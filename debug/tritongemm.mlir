// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.extsi %0 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %0, %c64_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<64xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<64xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<64xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<64xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<64xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<64xi32> loc(#loc5)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_5 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_6 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_7 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %1, %c64_i32_5 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_10 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %cst_11 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_11 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %35 = tt.call @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc10)
    %c0_i32 = arith.constant 0 : i32 loc(#loc11)
    %c32_i32 = arith.constant 32 : i32 loc(#loc11)
    %36 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc11)
    %37 = arith.bitcast %arg5 : i32 to i32 loc(#loc11)
    %38 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc11)
    %39 = ub.poison : i32 loc(#loc11)
    %40 = scf.for %arg9 = %36 to %37 step %38 iter_args(%arg10 = %35) -> (tensor<64x64xf32>)  : i32 {
      %72 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %73 = arith.extsi %72 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %74 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %75 = arith.addi %73, %74 : tensor<32xi64> loc(#loc12)
      %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc12)
      %cst_24 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc12)
      %76 = arith.cmpi sle, %75, %cst_24 : tensor<32xi64> loc(#loc12)
      %cst_25 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc12)
      %77 = arith.cmpi sge, %75, %cst_25 : tensor<32xi64> loc(#loc12)
      %78 = arith.andi %76, %77 : tensor<32xi1> loc(#loc12)
      %79 = arith.addi %72, %34 : tensor<32xi32> loc(#loc12)
      %80 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %81 = arith.cmpi slt, %79, %80 : tensor<32xi32> loc(#loc13)
      %82 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %83 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %84 = arith.extsi %82 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc15)
      %85 = arith.extsi %83 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc15)
      %86 = arith.muli %84, %85 : tensor<64x1xi64> loc(#loc15)
      %c2147483647_i64_26 = arith.constant 2147483647 : i64 loc(#loc15)
      %c-2147483648_i64_27 = arith.constant -2147483648 : i64 loc(#loc15)
      %cst_28 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc15)
      %87 = arith.cmpi sle, %86, %cst_28 : tensor<64x1xi64> loc(#loc15)
      %cst_29 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc15)
      %88 = arith.cmpi sge, %86, %cst_29 : tensor<64x1xi64> loc(#loc15)
      %89 = arith.andi %87, %88 : tensor<64x1xi1> loc(#loc15)
      %90 = arith.muli %82, %83 : tensor<64x1xi32> loc(#loc15)
      %91 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %92 = tt.addptr %91, %90 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %93 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %94 = arith.extsi %93 : tensor<32xi32> to tensor<32xi64> loc(#loc17)
      %95 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc17)
      %96 = arith.addi %94, %95 : tensor<32xi64> loc(#loc17)
      %c2147483647_i64_30 = arith.constant 2147483647 : i64 loc(#loc17)
      %c-2147483648_i64_31 = arith.constant -2147483648 : i64 loc(#loc17)
      %cst_32 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc17)
      %97 = arith.cmpi sle, %96, %cst_32 : tensor<32xi64> loc(#loc17)
      %cst_33 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc17)
      %98 = arith.cmpi sge, %96, %cst_33 : tensor<32xi64> loc(#loc17)
      %99 = arith.andi %97, %98 : tensor<32xi1> loc(#loc17)
      %100 = arith.addi %93, %34 : tensor<32xi32> loc(#loc17)
      %101 = tt.expand_dims %100 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %c1_i32_34 = arith.constant 1 : i32 loc(#loc19)
      %c1_i32_35 = arith.constant 1 : i32 loc(#loc19)
      %cst_36 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc19)
      %102 = arith.extsi %101 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc19)
      %103 = arith.extsi %cst_36 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc19)
      %104 = arith.muli %102, %103 : tensor<1x32xi64> loc(#loc19)
      %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc19)
      %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc19)
      %cst_39 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc19)
      %105 = arith.cmpi sle, %104, %cst_39 : tensor<1x32xi64> loc(#loc19)
      %cst_40 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc19)
      %106 = arith.cmpi sge, %104, %cst_40 : tensor<1x32xi64> loc(#loc19)
      %107 = arith.andi %105, %106 : tensor<1x32xi1> loc(#loc19)
      %108 = arith.muli %101, %cst_36 : tensor<1x32xi32> loc(#loc19)
      %109 = tt.broadcast %92 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc20)
      %110 = tt.broadcast %108 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc20)
      %111 = tt.addptr %109, %110 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc20)
      %112 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc21)
      %113 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc22)
      %114 = arith.cmpi slt, %112, %113 : tensor<64x1xi32> loc(#loc22)
      %115 = tt.expand_dims %81 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc23)
      %116 = tt.broadcast %114 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc24)
      %117 = tt.broadcast %115 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc24)
      %118 = arith.andi %116, %117 : tensor<64x32xi1> loc(#loc24)
      %cst_41 = arith.constant 0.000000e+00 : f32 loc(#loc25)
      %cst_42 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc25)
      %119 = arith.truncf %cst_42 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc25)
      %120 = tt.load %111, %118, %119 : tensor<64x32x!tt.ptr<bf16>> loc(#loc25)
      %121 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc26)
      %122 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc27)
      %123 = arith.extsi %121 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc27)
      %124 = arith.extsi %122 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc27)
      %125 = arith.muli %123, %124 : tensor<64x1xi64> loc(#loc27)
      %c2147483647_i64_43 = arith.constant 2147483647 : i64 loc(#loc27)
      %c-2147483648_i64_44 = arith.constant -2147483648 : i64 loc(#loc27)
      %cst_45 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc27)
      %126 = arith.cmpi sle, %125, %cst_45 : tensor<64x1xi64> loc(#loc27)
      %cst_46 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc27)
      %127 = arith.cmpi sge, %125, %cst_46 : tensor<64x1xi64> loc(#loc27)
      %128 = arith.andi %126, %127 : tensor<64x1xi1> loc(#loc27)
      %129 = arith.muli %121, %122 : tensor<64x1xi32> loc(#loc27)
      %130 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc28)
      %131 = tt.addptr %130, %129 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc28)
      %132 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc29)
      %133 = arith.extsi %132 : tensor<32xi32> to tensor<32xi64> loc(#loc29)
      %134 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc29)
      %135 = arith.addi %133, %134 : tensor<32xi64> loc(#loc29)
      %c2147483647_i64_47 = arith.constant 2147483647 : i64 loc(#loc29)
      %c-2147483648_i64_48 = arith.constant -2147483648 : i64 loc(#loc29)
      %cst_49 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc29)
      %136 = arith.cmpi sle, %135, %cst_49 : tensor<32xi64> loc(#loc29)
      %cst_50 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc29)
      %137 = arith.cmpi sge, %135, %cst_50 : tensor<32xi64> loc(#loc29)
      %138 = arith.andi %136, %137 : tensor<32xi1> loc(#loc29)
      %139 = arith.addi %132, %34 : tensor<32xi32> loc(#loc29)
      %140 = tt.expand_dims %139 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc30)
      %c1_i32_51 = arith.constant 1 : i32 loc(#loc31)
      %c1_i32_52 = arith.constant 1 : i32 loc(#loc31)
      %cst_53 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc31)
      %141 = arith.extsi %140 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc31)
      %142 = arith.extsi %cst_53 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc31)
      %143 = arith.muli %141, %142 : tensor<1x32xi64> loc(#loc31)
      %c2147483647_i64_54 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_55 = arith.constant -2147483648 : i64 loc(#loc31)
      %cst_56 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc31)
      %144 = arith.cmpi sle, %143, %cst_56 : tensor<1x32xi64> loc(#loc31)
      %cst_57 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc31)
      %145 = arith.cmpi sge, %143, %cst_57 : tensor<1x32xi64> loc(#loc31)
      %146 = arith.andi %144, %145 : tensor<1x32xi1> loc(#loc31)
      %147 = arith.muli %140, %cst_53 : tensor<1x32xi32> loc(#loc31)
      %148 = tt.broadcast %131 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc32)
      %149 = tt.broadcast %147 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc32)
      %150 = tt.addptr %148, %149 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc32)
      %151 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc33)
      %152 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc34)
      %153 = arith.cmpi slt, %151, %152 : tensor<64x1xi32> loc(#loc34)
      %154 = tt.expand_dims %81 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc35)
      %155 = tt.broadcast %153 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc36)
      %156 = tt.broadcast %154 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc36)
      %157 = arith.andi %155, %156 : tensor<64x32xi1> loc(#loc36)
      %cst_58 = arith.constant 0.000000e+00 : f32 loc(#loc37)
      %cst_59 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc37)
      %158 = arith.truncf %cst_59 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc37)
      %159 = tt.load %150, %157, %158 : tensor<64x32x!tt.ptr<bf16>> loc(#loc37)
      %160 = tt.trans %159 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc38)
      %cst_60 = arith.constant 0.000000e+00 : f32 loc(#loc39)
      %cst_61 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc39)
      %161 = tt.dot %120, %160, %cst_61 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc39)
      %162 = arith.addf %arg10, %161 : tensor<64x64xf32> loc(#loc40)
      scf.yield %162 : tensor<64x64xf32> loc(#loc41)
    } loc(#loc11)
    %41 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc42)
    %42 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc43)
    %43 = arith.extsi %41 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc43)
    %44 = arith.extsi %42 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc43)
    %45 = arith.muli %43, %44 : tensor<64x1xi64> loc(#loc43)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc43)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc43)
    %cst_14 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc43)
    %46 = arith.cmpi sle, %45, %cst_14 : tensor<64x1xi64> loc(#loc43)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc43)
    %47 = arith.cmpi sge, %45, %cst_15 : tensor<64x1xi64> loc(#loc43)
    %48 = arith.andi %46, %47 : tensor<64x1xi1> loc(#loc43)
    %49 = arith.muli %41, %42 : tensor<64x1xi32> loc(#loc43)
    %50 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc44)
    %51 = tt.addptr %50, %49 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc44)
    %52 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc45)
    %c1_i32 = arith.constant 1 : i32 loc(#loc46)
    %c1_i32_16 = arith.constant 1 : i32 loc(#loc46)
    %cst_17 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc46)
    %53 = arith.extsi %52 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc46)
    %54 = arith.extsi %cst_17 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc46)
    %55 = arith.muli %53, %54 : tensor<1x64xi64> loc(#loc46)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc46)
    %cst_20 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc46)
    %56 = arith.cmpi sle, %55, %cst_20 : tensor<1x64xi64> loc(#loc46)
    %cst_21 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc46)
    %57 = arith.cmpi sge, %55, %cst_21 : tensor<1x64xi64> loc(#loc46)
    %58 = arith.andi %56, %57 : tensor<1x64xi1> loc(#loc46)
    %59 = arith.muli %52, %cst_17 : tensor<1x64xi32> loc(#loc46)
    %60 = tt.broadcast %51 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %61 = tt.broadcast %59 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %62 = tt.addptr %60, %61 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %63 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc48)
    %64 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc49)
    %65 = arith.cmpi slt, %63, %64 : tensor<64x1xi32> loc(#loc49)
    %66 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc50)
    %67 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc51)
    %68 = arith.cmpi slt, %66, %67 : tensor<1x64xi32> loc(#loc51)
    %69 = tt.broadcast %65 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc52)
    %70 = tt.broadcast %68 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc52)
    %71 = arith.andi %69, %70 : tensor<64x64xi1> loc(#loc52)
    tt.store %62, %40, %71 : tensor<64x64x!tt.ptr<f32>> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
  tt.func private @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc56)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc56)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc57)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc58)
    tt.return %0 : tensor<64x64xf32> loc(#loc58)
  } loc(#loc55)
} loc(#loc)
#loc1 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":56:19)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:45)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:45)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:65)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc52 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc53 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc54 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)
#loc55 = loc("/app/triton-amd/python/triton/language/standard.py":117:0)
#loc56 = loc("/app/triton-amd/python/triton/language/standard.py":126:31)
#loc57 = loc("/app/triton-amd/python/triton/language/standard.py":126:11)
#loc58 = loc("/app/triton-amd/python/triton/language/standard.py":126:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.extsi %0 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %0, %c64_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<64xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<64xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<64xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<64xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<64xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<64xi32> loc(#loc5)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_5 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_6 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_7 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %1, %c64_i32_5 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_10 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %cst_11 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_11 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %35 = tt.call @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc10)
    %c0_i32 = arith.constant 0 : i32 loc(#loc11)
    %c32_i32 = arith.constant 32 : i32 loc(#loc11)
    %36 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc11)
    %37 = arith.bitcast %arg5 : i32 to i32 loc(#loc11)
    %38 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc11)
    %39 = ub.poison : i32 loc(#loc11)
    %40 = scf.for %arg9 = %36 to %37 step %38 iter_args(%arg10 = %35) -> (tensor<64x64xf32>)  : i32 {
      %72 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %73 = arith.extsi %72 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %74 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %75 = arith.addi %73, %74 : tensor<32xi64> loc(#loc12)
      %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc12)
      %cst_24 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc12)
      %76 = arith.cmpi sle, %75, %cst_24 : tensor<32xi64> loc(#loc12)
      %cst_25 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc12)
      %77 = arith.cmpi sge, %75, %cst_25 : tensor<32xi64> loc(#loc12)
      %78 = arith.andi %76, %77 : tensor<32xi1> loc(#loc12)
      %79 = arith.addi %72, %34 : tensor<32xi32> loc(#loc12)
      %80 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %81 = arith.cmpi slt, %79, %80 : tensor<32xi32> loc(#loc13)
      %82 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %83 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %84 = arith.extsi %82 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc15)
      %85 = arith.extsi %83 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc15)
      %86 = arith.muli %84, %85 : tensor<64x1xi64> loc(#loc15)
      %c2147483647_i64_26 = arith.constant 2147483647 : i64 loc(#loc15)
      %c-2147483648_i64_27 = arith.constant -2147483648 : i64 loc(#loc15)
      %cst_28 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc15)
      %87 = arith.cmpi sle, %86, %cst_28 : tensor<64x1xi64> loc(#loc15)
      %cst_29 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc15)
      %88 = arith.cmpi sge, %86, %cst_29 : tensor<64x1xi64> loc(#loc15)
      %89 = arith.andi %87, %88 : tensor<64x1xi1> loc(#loc15)
      %90 = arith.muli %82, %83 : tensor<64x1xi32> loc(#loc15)
      %91 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %92 = tt.addptr %91, %90 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %93 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %94 = arith.extsi %93 : tensor<32xi32> to tensor<32xi64> loc(#loc17)
      %95 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc17)
      %96 = arith.addi %94, %95 : tensor<32xi64> loc(#loc17)
      %c2147483647_i64_30 = arith.constant 2147483647 : i64 loc(#loc17)
      %c-2147483648_i64_31 = arith.constant -2147483648 : i64 loc(#loc17)
      %cst_32 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc17)
      %97 = arith.cmpi sle, %96, %cst_32 : tensor<32xi64> loc(#loc17)
      %cst_33 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc17)
      %98 = arith.cmpi sge, %96, %cst_33 : tensor<32xi64> loc(#loc17)
      %99 = arith.andi %97, %98 : tensor<32xi1> loc(#loc17)
      %100 = arith.addi %93, %34 : tensor<32xi32> loc(#loc17)
      %101 = tt.expand_dims %100 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %c1_i32_34 = arith.constant 1 : i32 loc(#loc19)
      %c1_i32_35 = arith.constant 1 : i32 loc(#loc19)
      %cst_36 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc19)
      %102 = arith.extsi %101 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc19)
      %103 = arith.extsi %cst_36 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc19)
      %104 = arith.muli %102, %103 : tensor<1x32xi64> loc(#loc19)
      %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc19)
      %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc19)
      %cst_39 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc19)
      %105 = arith.cmpi sle, %104, %cst_39 : tensor<1x32xi64> loc(#loc19)
      %cst_40 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc19)
      %106 = arith.cmpi sge, %104, %cst_40 : tensor<1x32xi64> loc(#loc19)
      %107 = arith.andi %105, %106 : tensor<1x32xi1> loc(#loc19)
      %108 = arith.muli %101, %cst_36 : tensor<1x32xi32> loc(#loc19)
      %109 = tt.broadcast %92 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc20)
      %110 = tt.broadcast %108 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc20)
      %111 = tt.addptr %109, %110 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc20)
      %112 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc21)
      %113 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc22)
      %114 = arith.cmpi slt, %112, %113 : tensor<64x1xi32> loc(#loc22)
      %115 = tt.expand_dims %81 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc23)
      %116 = tt.broadcast %114 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc24)
      %117 = tt.broadcast %115 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc24)
      %118 = arith.andi %116, %117 : tensor<64x32xi1> loc(#loc24)
      %cst_41 = arith.constant 0.000000e+00 : f32 loc(#loc25)
      %cst_42 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc25)
      %119 = arith.truncf %cst_42 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc25)
      %120 = tt.load %111, %118, %119 : tensor<64x32x!tt.ptr<bf16>> loc(#loc25)
      %121 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc26)
      %122 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc27)
      %123 = arith.extsi %121 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc27)
      %124 = arith.extsi %122 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc27)
      %125 = arith.muli %123, %124 : tensor<64x1xi64> loc(#loc27)
      %c2147483647_i64_43 = arith.constant 2147483647 : i64 loc(#loc27)
      %c-2147483648_i64_44 = arith.constant -2147483648 : i64 loc(#loc27)
      %cst_45 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc27)
      %126 = arith.cmpi sle, %125, %cst_45 : tensor<64x1xi64> loc(#loc27)
      %cst_46 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc27)
      %127 = arith.cmpi sge, %125, %cst_46 : tensor<64x1xi64> loc(#loc27)
      %128 = arith.andi %126, %127 : tensor<64x1xi1> loc(#loc27)
      %129 = arith.muli %121, %122 : tensor<64x1xi32> loc(#loc27)
      %130 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc28)
      %131 = tt.addptr %130, %129 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc28)
      %132 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc29)
      %133 = arith.extsi %132 : tensor<32xi32> to tensor<32xi64> loc(#loc29)
      %134 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc29)
      %135 = arith.addi %133, %134 : tensor<32xi64> loc(#loc29)
      %c2147483647_i64_47 = arith.constant 2147483647 : i64 loc(#loc29)
      %c-2147483648_i64_48 = arith.constant -2147483648 : i64 loc(#loc29)
      %cst_49 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc29)
      %136 = arith.cmpi sle, %135, %cst_49 : tensor<32xi64> loc(#loc29)
      %cst_50 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc29)
      %137 = arith.cmpi sge, %135, %cst_50 : tensor<32xi64> loc(#loc29)
      %138 = arith.andi %136, %137 : tensor<32xi1> loc(#loc29)
      %139 = arith.addi %132, %34 : tensor<32xi32> loc(#loc29)
      %140 = tt.expand_dims %139 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc30)
      %c1_i32_51 = arith.constant 1 : i32 loc(#loc31)
      %c1_i32_52 = arith.constant 1 : i32 loc(#loc31)
      %cst_53 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc31)
      %141 = arith.extsi %140 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc31)
      %142 = arith.extsi %cst_53 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc31)
      %143 = arith.muli %141, %142 : tensor<1x32xi64> loc(#loc31)
      %c2147483647_i64_54 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_55 = arith.constant -2147483648 : i64 loc(#loc31)
      %cst_56 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc31)
      %144 = arith.cmpi sle, %143, %cst_56 : tensor<1x32xi64> loc(#loc31)
      %cst_57 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc31)
      %145 = arith.cmpi sge, %143, %cst_57 : tensor<1x32xi64> loc(#loc31)
      %146 = arith.andi %144, %145 : tensor<1x32xi1> loc(#loc31)
      %147 = arith.muli %140, %cst_53 : tensor<1x32xi32> loc(#loc31)
      %148 = tt.broadcast %131 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc32)
      %149 = tt.broadcast %147 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc32)
      %150 = tt.addptr %148, %149 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc32)
      %151 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc33)
      %152 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc34)
      %153 = arith.cmpi slt, %151, %152 : tensor<64x1xi32> loc(#loc34)
      %154 = tt.expand_dims %81 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc35)
      %155 = tt.broadcast %153 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc36)
      %156 = tt.broadcast %154 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc36)
      %157 = arith.andi %155, %156 : tensor<64x32xi1> loc(#loc36)
      %cst_58 = arith.constant 0.000000e+00 : f32 loc(#loc37)
      %cst_59 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc37)
      %158 = arith.truncf %cst_59 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc37)
      %159 = tt.load %150, %157, %158 : tensor<64x32x!tt.ptr<bf16>> loc(#loc37)
      %160 = tt.trans %159 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc38)
      %cst_60 = arith.constant 0.000000e+00 : f32 loc(#loc39)
      %cst_61 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc39)
      %161 = tt.dot %120, %160, %cst_61 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc39)
      %162 = arith.addf %arg10, %161 : tensor<64x64xf32> loc(#loc40)
      scf.yield %162 : tensor<64x64xf32> loc(#loc41)
    } loc(#loc11)
    %41 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc42)
    %42 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc43)
    %43 = arith.extsi %41 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc43)
    %44 = arith.extsi %42 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc43)
    %45 = arith.muli %43, %44 : tensor<64x1xi64> loc(#loc43)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc43)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc43)
    %cst_14 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc43)
    %46 = arith.cmpi sle, %45, %cst_14 : tensor<64x1xi64> loc(#loc43)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc43)
    %47 = arith.cmpi sge, %45, %cst_15 : tensor<64x1xi64> loc(#loc43)
    %48 = arith.andi %46, %47 : tensor<64x1xi1> loc(#loc43)
    %49 = arith.muli %41, %42 : tensor<64x1xi32> loc(#loc43)
    %50 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc44)
    %51 = tt.addptr %50, %49 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc44)
    %52 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc45)
    %c1_i32 = arith.constant 1 : i32 loc(#loc46)
    %c1_i32_16 = arith.constant 1 : i32 loc(#loc46)
    %cst_17 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc46)
    %53 = arith.extsi %52 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc46)
    %54 = arith.extsi %cst_17 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc46)
    %55 = arith.muli %53, %54 : tensor<1x64xi64> loc(#loc46)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc46)
    %cst_20 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc46)
    %56 = arith.cmpi sle, %55, %cst_20 : tensor<1x64xi64> loc(#loc46)
    %cst_21 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc46)
    %57 = arith.cmpi sge, %55, %cst_21 : tensor<1x64xi64> loc(#loc46)
    %58 = arith.andi %56, %57 : tensor<1x64xi1> loc(#loc46)
    %59 = arith.muli %52, %cst_17 : tensor<1x64xi32> loc(#loc46)
    %60 = tt.broadcast %51 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %61 = tt.broadcast %59 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %62 = tt.addptr %60, %61 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %63 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc48)
    %64 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc49)
    %65 = arith.cmpi slt, %63, %64 : tensor<64x1xi32> loc(#loc49)
    %66 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc50)
    %67 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc51)
    %68 = arith.cmpi slt, %66, %67 : tensor<1x64xi32> loc(#loc51)
    %69 = tt.broadcast %65 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc52)
    %70 = tt.broadcast %68 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc52)
    %71 = arith.andi %69, %70 : tensor<64x64xi1> loc(#loc52)
    tt.store %62, %40, %71 : tensor<64x64x!tt.ptr<f32>> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
  tt.func private @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc56)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc56)
    tt.return %cst_0 : tensor<64x64xf32> loc(#loc57)
  ^bb1:  // no predecessors
    %0 = ub.poison : tensor<64x64xf32> loc(#loc58)
    tt.return %0 : tensor<64x64xf32> loc(#loc58)
  } loc(#loc55)
} loc(#loc)
#loc1 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":56:19)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:45)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:45)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:65)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc52 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc53 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc54 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)
#loc55 = loc("/app/triton-amd/python/triton/language/standard.py":117:0)
#loc56 = loc("/app/triton-amd/python/triton/language/standard.py":126:31)
#loc57 = loc("/app/triton-amd/python/triton/language/standard.py":126:11)
#loc58 = loc("/app/triton-amd/python/triton/language/standard.py":126:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @matmul_abt_kernel) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %1 = tt.get_program_id y : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.extsi %0 : i32 to i64 loc(#loc3)
    %3 = arith.extsi %c64_i32_0 : i32 to i64 loc(#loc3)
    %4 = arith.muli %2, %3 : i64 loc(#loc3)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc3)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc3)
    %5 = arith.cmpi sle, %4, %c2147483647_i64 : i64 loc(#loc3)
    %6 = arith.cmpi sge, %4, %c-2147483648_i64 : i64 loc(#loc3)
    %7 = arith.andi %5, %6 : i1 loc(#loc3)
    %8 = arith.muli %0, %c64_i32_0 : i32 loc(#loc3)
    %9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %10 = tt.splat %8 : i32 -> tensor<64xi32> loc(#loc5)
    %11 = arith.extsi %10 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %12 = arith.extsi %9 : tensor<64xi32> to tensor<64xi64> loc(#loc5)
    %13 = arith.addi %11, %12 : tensor<64xi64> loc(#loc5)
    %c2147483647_i64_1 = arith.constant 2147483647 : i64 loc(#loc5)
    %c-2147483648_i64_2 = arith.constant -2147483648 : i64 loc(#loc5)
    %cst = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc5)
    %14 = arith.cmpi sle, %13, %cst : tensor<64xi64> loc(#loc5)
    %cst_3 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc5)
    %15 = arith.cmpi sge, %13, %cst_3 : tensor<64xi64> loc(#loc5)
    %16 = arith.andi %14, %15 : tensor<64xi1> loc(#loc5)
    %17 = arith.addi %10, %9 : tensor<64xi32> loc(#loc5)
    %c64_i32_4 = arith.constant 64 : i32 loc(#loc6)
    %c64_i32_5 = arith.constant 64 : i32 loc(#loc6)
    %18 = arith.extsi %1 : i32 to i64 loc(#loc6)
    %19 = arith.extsi %c64_i32_5 : i32 to i64 loc(#loc6)
    %20 = arith.muli %18, %19 : i64 loc(#loc6)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc6)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc6)
    %21 = arith.cmpi sle, %20, %c2147483647_i64_6 : i64 loc(#loc6)
    %22 = arith.cmpi sge, %20, %c-2147483648_i64_7 : i64 loc(#loc6)
    %23 = arith.andi %21, %22 : i1 loc(#loc6)
    %24 = arith.muli %1, %c64_i32_5 : i32 loc(#loc6)
    %25 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc7)
    %26 = tt.splat %24 : i32 -> tensor<64xi32> loc(#loc8)
    %27 = arith.extsi %26 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %28 = arith.extsi %25 : tensor<64xi32> to tensor<64xi64> loc(#loc8)
    %29 = arith.addi %27, %28 : tensor<64xi64> loc(#loc8)
    %c2147483647_i64_8 = arith.constant 2147483647 : i64 loc(#loc8)
    %c-2147483648_i64_9 = arith.constant -2147483648 : i64 loc(#loc8)
    %cst_10 = arith.constant dense<2147483647> : tensor<64xi64> loc(#loc8)
    %30 = arith.cmpi sle, %29, %cst_10 : tensor<64xi64> loc(#loc8)
    %cst_11 = arith.constant dense<-2147483648> : tensor<64xi64> loc(#loc8)
    %31 = arith.cmpi sge, %29, %cst_11 : tensor<64xi64> loc(#loc8)
    %32 = arith.andi %30, %31 : tensor<64xi1> loc(#loc8)
    %33 = arith.addi %26, %25 : tensor<64xi32> loc(#loc8)
    %34 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %35 = tt.call @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() : () -> tensor<64x64xf32> loc(#loc10)
    %c0_i32 = arith.constant 0 : i32 loc(#loc11)
    %c32_i32 = arith.constant 32 : i32 loc(#loc11)
    %36 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc11)
    %37 = arith.bitcast %arg5 : i32 to i32 loc(#loc11)
    %38 = arith.bitcast %c32_i32 : i32 to i32 loc(#loc11)
    %39 = ub.poison : i32 loc(#loc11)
    %40 = scf.for %arg9 = %36 to %37 step %38 iter_args(%arg10 = %35) -> (tensor<64x64xf32>)  : i32 {
      %72 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %73 = arith.extsi %72 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %74 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc12)
      %75 = arith.addi %73, %74 : tensor<32xi64> loc(#loc12)
      %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc12)
      %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc12)
      %cst_24 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc12)
      %76 = arith.cmpi sle, %75, %cst_24 : tensor<32xi64> loc(#loc12)
      %cst_25 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc12)
      %77 = arith.cmpi sge, %75, %cst_25 : tensor<32xi64> loc(#loc12)
      %78 = arith.andi %76, %77 : tensor<32xi1> loc(#loc12)
      %79 = arith.addi %72, %34 : tensor<32xi32> loc(#loc12)
      %80 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %81 = arith.cmpi slt, %79, %80 : tensor<32xi32> loc(#loc13)
      %82 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %83 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %84 = arith.extsi %82 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc15)
      %85 = arith.extsi %83 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc15)
      %86 = arith.muli %84, %85 : tensor<64x1xi64> loc(#loc15)
      %c2147483647_i64_26 = arith.constant 2147483647 : i64 loc(#loc15)
      %c-2147483648_i64_27 = arith.constant -2147483648 : i64 loc(#loc15)
      %cst_28 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc15)
      %87 = arith.cmpi sle, %86, %cst_28 : tensor<64x1xi64> loc(#loc15)
      %cst_29 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc15)
      %88 = arith.cmpi sge, %86, %cst_29 : tensor<64x1xi64> loc(#loc15)
      %89 = arith.andi %87, %88 : tensor<64x1xi1> loc(#loc15)
      %90 = arith.muli %82, %83 : tensor<64x1xi32> loc(#loc15)
      %91 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %92 = tt.addptr %91, %90 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %93 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %94 = arith.extsi %93 : tensor<32xi32> to tensor<32xi64> loc(#loc17)
      %95 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc17)
      %96 = arith.addi %94, %95 : tensor<32xi64> loc(#loc17)
      %c2147483647_i64_30 = arith.constant 2147483647 : i64 loc(#loc17)
      %c-2147483648_i64_31 = arith.constant -2147483648 : i64 loc(#loc17)
      %cst_32 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc17)
      %97 = arith.cmpi sle, %96, %cst_32 : tensor<32xi64> loc(#loc17)
      %cst_33 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc17)
      %98 = arith.cmpi sge, %96, %cst_33 : tensor<32xi64> loc(#loc17)
      %99 = arith.andi %97, %98 : tensor<32xi1> loc(#loc17)
      %100 = arith.addi %93, %34 : tensor<32xi32> loc(#loc17)
      %101 = tt.expand_dims %100 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %c1_i32_34 = arith.constant 1 : i32 loc(#loc19)
      %c1_i32_35 = arith.constant 1 : i32 loc(#loc19)
      %cst_36 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc19)
      %102 = arith.extsi %101 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc19)
      %103 = arith.extsi %cst_36 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc19)
      %104 = arith.muli %102, %103 : tensor<1x32xi64> loc(#loc19)
      %c2147483647_i64_37 = arith.constant 2147483647 : i64 loc(#loc19)
      %c-2147483648_i64_38 = arith.constant -2147483648 : i64 loc(#loc19)
      %cst_39 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc19)
      %105 = arith.cmpi sle, %104, %cst_39 : tensor<1x32xi64> loc(#loc19)
      %cst_40 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc19)
      %106 = arith.cmpi sge, %104, %cst_40 : tensor<1x32xi64> loc(#loc19)
      %107 = arith.andi %105, %106 : tensor<1x32xi1> loc(#loc19)
      %108 = arith.muli %101, %cst_36 : tensor<1x32xi32> loc(#loc19)
      %109 = tt.broadcast %92 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc20)
      %110 = tt.broadcast %108 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc20)
      %111 = tt.addptr %109, %110 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc20)
      %112 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc21)
      %113 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc22)
      %114 = arith.cmpi slt, %112, %113 : tensor<64x1xi32> loc(#loc22)
      %115 = tt.expand_dims %81 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc23)
      %116 = tt.broadcast %114 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc24)
      %117 = tt.broadcast %115 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc24)
      %118 = arith.andi %116, %117 : tensor<64x32xi1> loc(#loc24)
      %cst_41 = arith.constant 0.000000e+00 : f32 loc(#loc25)
      %cst_42 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc25)
      %119 = arith.truncf %cst_42 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc25)
      %120 = tt.load %111, %118, %119 : tensor<64x32x!tt.ptr<bf16>> loc(#loc25)
      %121 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc26)
      %122 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc27)
      %123 = arith.extsi %121 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc27)
      %124 = arith.extsi %122 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc27)
      %125 = arith.muli %123, %124 : tensor<64x1xi64> loc(#loc27)
      %c2147483647_i64_43 = arith.constant 2147483647 : i64 loc(#loc27)
      %c-2147483648_i64_44 = arith.constant -2147483648 : i64 loc(#loc27)
      %cst_45 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc27)
      %126 = arith.cmpi sle, %125, %cst_45 : tensor<64x1xi64> loc(#loc27)
      %cst_46 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc27)
      %127 = arith.cmpi sge, %125, %cst_46 : tensor<64x1xi64> loc(#loc27)
      %128 = arith.andi %126, %127 : tensor<64x1xi1> loc(#loc27)
      %129 = arith.muli %121, %122 : tensor<64x1xi32> loc(#loc27)
      %130 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc28)
      %131 = tt.addptr %130, %129 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc28)
      %132 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc29)
      %133 = arith.extsi %132 : tensor<32xi32> to tensor<32xi64> loc(#loc29)
      %134 = arith.extsi %34 : tensor<32xi32> to tensor<32xi64> loc(#loc29)
      %135 = arith.addi %133, %134 : tensor<32xi64> loc(#loc29)
      %c2147483647_i64_47 = arith.constant 2147483647 : i64 loc(#loc29)
      %c-2147483648_i64_48 = arith.constant -2147483648 : i64 loc(#loc29)
      %cst_49 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc29)
      %136 = arith.cmpi sle, %135, %cst_49 : tensor<32xi64> loc(#loc29)
      %cst_50 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc29)
      %137 = arith.cmpi sge, %135, %cst_50 : tensor<32xi64> loc(#loc29)
      %138 = arith.andi %136, %137 : tensor<32xi1> loc(#loc29)
      %139 = arith.addi %132, %34 : tensor<32xi32> loc(#loc29)
      %140 = tt.expand_dims %139 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc30)
      %c1_i32_51 = arith.constant 1 : i32 loc(#loc31)
      %c1_i32_52 = arith.constant 1 : i32 loc(#loc31)
      %cst_53 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc31)
      %141 = arith.extsi %140 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc31)
      %142 = arith.extsi %cst_53 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc31)
      %143 = arith.muli %141, %142 : tensor<1x32xi64> loc(#loc31)
      %c2147483647_i64_54 = arith.constant 2147483647 : i64 loc(#loc31)
      %c-2147483648_i64_55 = arith.constant -2147483648 : i64 loc(#loc31)
      %cst_56 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc31)
      %144 = arith.cmpi sle, %143, %cst_56 : tensor<1x32xi64> loc(#loc31)
      %cst_57 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc31)
      %145 = arith.cmpi sge, %143, %cst_57 : tensor<1x32xi64> loc(#loc31)
      %146 = arith.andi %144, %145 : tensor<1x32xi1> loc(#loc31)
      %147 = arith.muli %140, %cst_53 : tensor<1x32xi32> loc(#loc31)
      %148 = tt.broadcast %131 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc32)
      %149 = tt.broadcast %147 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc32)
      %150 = tt.addptr %148, %149 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc32)
      %151 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc33)
      %152 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc34)
      %153 = arith.cmpi slt, %151, %152 : tensor<64x1xi32> loc(#loc34)
      %154 = tt.expand_dims %81 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc35)
      %155 = tt.broadcast %153 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc36)
      %156 = tt.broadcast %154 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc36)
      %157 = arith.andi %155, %156 : tensor<64x32xi1> loc(#loc36)
      %cst_58 = arith.constant 0.000000e+00 : f32 loc(#loc37)
      %cst_59 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc37)
      %158 = arith.truncf %cst_59 : tensor<64x32xf32> to tensor<64x32xbf16> loc(#loc37)
      %159 = tt.load %150, %157, %158 : tensor<64x32x!tt.ptr<bf16>> loc(#loc37)
      %160 = tt.trans %159 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc38)
      %cst_60 = arith.constant 0.000000e+00 : f32 loc(#loc39)
      %cst_61 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc39)
      %161 = tt.dot %120, %160, %cst_61 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc39)
      %162 = arith.addf %arg10, %161 : tensor<64x64xf32> loc(#loc40)
      scf.yield %162 : tensor<64x64xf32> loc(#loc41)
    } loc(#loc11)
    %41 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc42)
    %42 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc43)
    %43 = arith.extsi %41 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc43)
    %44 = arith.extsi %42 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc43)
    %45 = arith.muli %43, %44 : tensor<64x1xi64> loc(#loc43)
    %c2147483647_i64_12 = arith.constant 2147483647 : i64 loc(#loc43)
    %c-2147483648_i64_13 = arith.constant -2147483648 : i64 loc(#loc43)
    %cst_14 = arith.constant dense<2147483647> : tensor<64x1xi64> loc(#loc43)
    %46 = arith.cmpi sle, %45, %cst_14 : tensor<64x1xi64> loc(#loc43)
    %cst_15 = arith.constant dense<-2147483648> : tensor<64x1xi64> loc(#loc43)
    %47 = arith.cmpi sge, %45, %cst_15 : tensor<64x1xi64> loc(#loc43)
    %48 = arith.andi %46, %47 : tensor<64x1xi1> loc(#loc43)
    %49 = arith.muli %41, %42 : tensor<64x1xi32> loc(#loc43)
    %50 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc44)
    %51 = tt.addptr %50, %49 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc44)
    %52 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc45)
    %c1_i32 = arith.constant 1 : i32 loc(#loc46)
    %c1_i32_16 = arith.constant 1 : i32 loc(#loc46)
    %cst_17 = arith.constant dense<1> : tensor<1x64xi32> loc(#loc46)
    %53 = arith.extsi %52 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc46)
    %54 = arith.extsi %cst_17 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc46)
    %55 = arith.muli %53, %54 : tensor<1x64xi64> loc(#loc46)
    %c2147483647_i64_18 = arith.constant 2147483647 : i64 loc(#loc46)
    %c-2147483648_i64_19 = arith.constant -2147483648 : i64 loc(#loc46)
    %cst_20 = arith.constant dense<2147483647> : tensor<1x64xi64> loc(#loc46)
    %56 = arith.cmpi sle, %55, %cst_20 : tensor<1x64xi64> loc(#loc46)
    %cst_21 = arith.constant dense<-2147483648> : tensor<1x64xi64> loc(#loc46)
    %57 = arith.cmpi sge, %55, %cst_21 : tensor<1x64xi64> loc(#loc46)
    %58 = arith.andi %56, %57 : tensor<1x64xi1> loc(#loc46)
    %59 = arith.muli %52, %cst_17 : tensor<1x64xi32> loc(#loc46)
    %60 = tt.broadcast %51 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc47)
    %61 = tt.broadcast %59 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc47)
    %62 = tt.addptr %60, %61 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc47)
    %63 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc48)
    %64 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc49)
    %65 = arith.cmpi slt, %63, %64 : tensor<64x1xi32> loc(#loc49)
    %66 = tt.expand_dims %33 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc50)
    %67 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc51)
    %68 = arith.cmpi slt, %66, %67 : tensor<1x64xi32> loc(#loc51)
    %69 = tt.broadcast %65 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc52)
    %70 = tt.broadcast %68 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc52)
    %71 = arith.andi %69, %70 : tensor<64x64xi1> loc(#loc52)
    tt.store %62, %40, %71 : tensor<64x64x!tt.ptr<f32>> loc(#loc53)
    tt.return loc(#loc54)
  } loc(#loc)
  tt.func private @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc56)
    tt.return %cst : tensor<64x64xf32> loc(#loc57)
  } loc(#loc55)
} loc(#loc)
#loc1 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":56:19)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:45)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:45)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:65)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc52 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc53 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc54 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)
#loc55 = loc("/app/triton-amd/python/triton/language/standard.py":117:0)
#loc56 = loc("/app/triton-amd/python/triton/language/standard.py":126:31)
#loc57 = loc("/app/triton-amd/python/triton/language/standard.py":126:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @matmul_abt_kernel) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc55)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_1) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc14)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc14)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc15)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc15)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc16)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc17)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc17)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc18)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc18)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc19)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc19)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc20)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc21)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc21)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc21)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc22)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc23)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc23)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc24)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc25)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc25)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc25)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc26)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc27)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc28)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc28)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc29)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc29)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc30)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc30)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc31)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc32)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc32)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc32)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc33)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc34)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc34)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc35)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc36)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc36)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc36)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc37)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc38)
      %73 = tt.dot %52, %72, %cst_0 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc39)
      %74 = arith.addf %arg10, %73 : tensor<64x64xf32> loc(#loc40)
      scf.yield %74 : tensor<64x64xf32> loc(#loc41)
    } loc(#loc13)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc42)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc43)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc43)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc44)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc44)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc45)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc46)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc46)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc46)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc47)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc48)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc48)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc49)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc50)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc50)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc51)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc51)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc51)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc52)
    tt.return loc(#loc53)
  } loc(#loc)
  tt.func private @"zeros____(0, 0)cconstexpr_64__(0, 1)cconstexpr_64__(1,)cconstexpr_fp32_"() -> tensor<64x64xf32> attributes {noinline = false} loc(#loc54)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/app/triton-amd/python/triton/language/standard.py":126:31)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":56:19)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc52 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc53 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)
#loc54 = loc("/app/triton-amd/python/triton/language/standard.py":117:0)
#loc55 = loc(callsite(#loc11 at #loc12))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc12)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc13)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc15)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc17)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc19)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc21)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc21)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc22)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc23)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc23)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc23)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc24)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc25)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc27)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc27)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc28)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc28)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc30)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc31)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc32)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc32)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc33)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc34)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc34)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc34)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc36)
      %73 = tt.dot %52, %72, %cst_0 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc37)
      %74 = arith.addf %arg10, %73 : tensor<64x64xf32> loc(#loc38)
      scf.yield %74 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc11)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc41)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc41)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc42)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc42)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc43)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc44)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc44)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc46)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc46)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc47)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc48)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc48)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc49)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc49)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc49)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc12)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc13)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc15)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc17)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc19)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc21)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc21)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc22)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc23)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc23)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc23)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc24)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc25)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc27)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc27)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc28)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc28)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc30)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc31)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc32)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc32)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc33)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc34)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc34)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc34)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc36)
      %73 = tt.dot %52, %72, %cst_0 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc37)
      %74 = arith.addf %arg10, %73 : tensor<64x64xf32> loc(#loc38)
      scf.yield %74 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc11)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc41)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc41)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc42)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc42)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc43)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc44)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc44)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc46)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc46)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc47)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc48)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc48)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc49)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc49)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc49)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc12)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc13)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc15)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc17)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc19)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc21)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc21)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc22)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc23)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc23)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc23)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc24)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc25)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc27)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc27)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc28)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc28)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc30)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc31)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc32)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc32)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc33)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc34)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc34)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc34)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc36)
      %73 = tt.dot %52, %72, %cst_0 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc37)
      %74 = arith.addf %arg10, %73 : tensor<64x64xf32> loc(#loc38)
      scf.yield %74 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc11)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc41)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc41)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc42)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc42)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc43)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc44)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc44)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc46)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc46)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc47)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc48)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc48)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc49)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc49)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc49)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc12)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc13)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc15)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc17)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc19)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc21)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc21)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc22)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc23)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc23)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc23)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc24)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc25)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc27)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc27)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc28)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc28)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc30)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc31)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc32)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc32)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc33)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc34)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc34)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc34)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc36)
      %73 = tt.dot %52, %72, %cst_0 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc37)
      %74 = arith.addf %arg10, %73 : tensor<64x64xf32> loc(#loc38)
      scf.yield %74 : tensor<64x64xf32> loc(#loc39)
    } loc(#loc11)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc40)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc41)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc41)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc42)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc42)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc43)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc44)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc44)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc44)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc45)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc46)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc46)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc47)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc48)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc48)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc49)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc49)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc49)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:15)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc51 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc12)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc13)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc15)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc17)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc19)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc21)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc21)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc22)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc23)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc23)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc23)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc24)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc25)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc27)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc27)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc28)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc28)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc30)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc31)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc32)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc32)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc33)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc34)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc34)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc34)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc36)
      %73 = tt.dot %52, %72, %arg10 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc37)
      scf.yield %73 : tensor<64x64xf32> loc(#loc38)
    } loc(#loc11)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc39)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc40)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc40)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc41)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc41)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc42)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc43)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc43)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc43)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc44)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc45)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc45)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc46)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc47)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc47)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc48)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc48)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc48)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc8)
    %8 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<64xi32> loc(#loc9)
    %10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc10)
    %11 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %30 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc12)
      %31 = arith.addi %30, %10 : tensor<32xi32> loc(#loc12)
      %32 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc13)
      %33 = arith.cmpi slt, %31, %32 : tensor<32xi32> loc(#loc13)
      %34 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc14)
      %35 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc15)
      %36 = arith.muli %34, %35 : tensor<64x1xi32> loc(#loc15)
      %37 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc16)
      %38 = tt.addptr %37, %36 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc16)
      %39 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc17)
      %40 = arith.addi %39, %10 : tensor<32xi32> loc(#loc17)
      %41 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc18)
      %42 = tt.broadcast %38 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc19)
      %44 = tt.addptr %42, %43 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc19)
      %45 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc20)
      %46 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc21)
      %47 = arith.cmpi slt, %45, %46 : tensor<64x1xi32> loc(#loc21)
      %48 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc22)
      %49 = tt.broadcast %47 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc23)
      %50 = tt.broadcast %48 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc23)
      %51 = arith.andi %49, %50 : tensor<64x32xi1> loc(#loc23)
      %52 = tt.load %44, %51, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc24)
      %53 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc25)
      %54 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.muli %53, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc27)
      %57 = tt.addptr %56, %55 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc27)
      %58 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc28)
      %59 = arith.addi %58, %10 : tensor<32xi32> loc(#loc28)
      %60 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc29)
      %61 = tt.broadcast %57 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc30)
      %62 = tt.broadcast %60 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc30)
      %63 = tt.addptr %61, %62 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc30)
      %64 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc31)
      %65 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc32)
      %66 = arith.cmpi slt, %64, %65 : tensor<64x1xi32> loc(#loc32)
      %67 = tt.expand_dims %33 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc33)
      %68 = tt.broadcast %66 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc34)
      %69 = tt.broadcast %67 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc34)
      %70 = arith.andi %68, %69 : tensor<64x32xi1> loc(#loc34)
      %71 = tt.load %63, %70, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc35)
      %72 = tt.trans %71 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc36)
      %73 = tt.dot %52, %72, %arg10 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc37)
      scf.yield %73 : tensor<64x64xf32> loc(#loc38)
    } loc(#loc11)
    %12 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc39)
    %13 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc40)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc40)
    %15 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc41)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc41)
    %17 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc42)
    %18 = tt.broadcast %16 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc43)
    %19 = tt.broadcast %17 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc43)
    %20 = tt.addptr %18, %19 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc43)
    %21 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc44)
    %22 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc45)
    %23 = arith.cmpi slt, %21, %22 : tensor<64x1xi32> loc(#loc45)
    %24 = tt.expand_dims %9 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc46)
    %25 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc47)
    %26 = arith.cmpi slt, %24, %25 : tensor<1x64xi32> loc(#loc47)
    %27 = tt.broadcast %23 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc48)
    %28 = tt.broadcast %26 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc48)
    %29 = arith.andi %27, %28 : tensor<64x64xi1> loc(#loc48)
    tt.store %20, %11, %29 : tensor<64x64x!tt.ptr<f32>> loc(#loc49)
    tt.return loc(#loc50)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:44)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:26)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:38)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:26)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:34)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:41)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:64)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc43 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc44 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:39)
#loc45 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc46 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:63)
#loc47 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc48 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc49 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc50 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %27 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc11)
      %28 = arith.addi %27, %9 : tensor<32xi32> loc(#loc11)
      %29 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc12)
      %30 = arith.cmpi slt, %28, %29 : tensor<32xi32> loc(#loc12)
      %31 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc13)
      %32 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc14)
      %33 = arith.muli %31, %32 : tensor<64x1xi32> loc(#loc14)
      %34 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc15)
      %35 = tt.addptr %34, %33 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc15)
      %36 = tt.expand_dims %28 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc16)
      %37 = tt.broadcast %35 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc17)
      %38 = tt.broadcast %36 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc17)
      %39 = tt.addptr %37, %38 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc17)
      %40 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc18)
      %41 = arith.cmpi slt, %31, %40 : tensor<64x1xi32> loc(#loc18)
      %42 = tt.expand_dims %30 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc19)
      %43 = tt.broadcast %41 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc20)
      %44 = tt.broadcast %42 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc20)
      %45 = arith.andi %43, %44 : tensor<64x32xi1> loc(#loc20)
      %46 = tt.load %39, %45, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc21)
      %47 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc22)
      %48 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc23)
      %49 = arith.muli %47, %48 : tensor<64x1xi32> loc(#loc23)
      %50 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc24)
      %51 = tt.addptr %50, %49 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc24)
      %52 = tt.broadcast %51 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc25)
      %53 = tt.addptr %52, %38 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc25)
      %54 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc26)
      %55 = arith.cmpi slt, %47, %54 : tensor<64x1xi32> loc(#loc26)
      %56 = tt.broadcast %55 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc27)
      %57 = arith.andi %56, %44 : tensor<64x32xi1> loc(#loc27)
      %58 = tt.load %53, %57, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc28)
      %59 = tt.trans %58 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc29)
      %60 = tt.dot %46, %59, %arg10 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %60 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %12 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc33)
    %13 = arith.muli %11, %12 : tensor<64x1xi32> loc(#loc33)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc34)
    %15 = tt.addptr %14, %13 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc34)
    %16 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc35)
    %17 = tt.broadcast %15 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc36)
    %18 = tt.broadcast %16 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc36)
    %19 = tt.addptr %17, %18 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc36)
    %20 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc37)
    %21 = arith.cmpi slt, %11, %20 : tensor<64x1xi32> loc(#loc37)
    %22 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc38)
    %23 = arith.cmpi slt, %16, %22 : tensor<1x64xi32> loc(#loc38)
    %24 = tt.broadcast %21 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc39)
    %25 = tt.broadcast %23 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc39)
    %26 = arith.andi %24, %25 : tensor<64x64xi1> loc(#loc39)
    tt.store %19, %10, %26 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc11)
    %12 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc12)
    %13 = arith.muli %11, %12 : tensor<64x1xi32> loc(#loc12)
    %14 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc13)
    %15 = tt.addptr %14, %13 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc13)
    %16 = tt.broadcast %15 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc14)
    %17 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc15)
    %18 = arith.cmpi slt, %11, %17 : tensor<64x1xi32> loc(#loc15)
    %19 = tt.broadcast %18 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc16)
    %20 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc17)
    %21 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc18)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc18)
    %23 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc19)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc19)
    %25 = tt.broadcast %24 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc20)
    %26 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc21)
    %27 = arith.cmpi slt, %20, %26 : tensor<64x1xi32> loc(#loc21)
    %28 = tt.broadcast %27 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc22)
    %29 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %46 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc24)
      %47 = arith.addi %46, %9 : tensor<32xi32> loc(#loc24)
      %48 = arith.cmpi slt, %47, %10 : tensor<32xi32> loc(#loc10)
      %49 = tt.expand_dims %47 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc25)
      %50 = tt.broadcast %49 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc14)
      %51 = tt.addptr %16, %50 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc14)
      %52 = tt.expand_dims %48 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc26)
      %53 = tt.broadcast %52 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc16)
      %54 = arith.andi %19, %53 : tensor<64x32xi1> loc(#loc16)
      %55 = tt.load %51, %54, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc27)
      %56 = tt.addptr %25, %50 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc20)
      %57 = arith.andi %28, %53 : tensor<64x32xi1> loc(#loc22)
      %58 = tt.load %56, %57, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc28)
      %59 = tt.trans %58 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc29)
      %60 = tt.dot %55, %59, %arg10 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %60 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc23)
    %30 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %31 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc33)
    %32 = arith.muli %30, %31 : tensor<64x1xi32> loc(#loc33)
    %33 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc34)
    %34 = tt.addptr %33, %32 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc34)
    %35 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc35)
    %36 = tt.broadcast %34 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc36)
    %37 = tt.broadcast %35 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc36)
    %38 = tt.addptr %36, %37 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc36)
    %39 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc37)
    %40 = arith.cmpi slt, %30, %39 : tensor<64x1xi32> loc(#loc37)
    %41 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc38)
    %42 = arith.cmpi slt, %35, %41 : tensor<1x64xi32> loc(#loc38)
    %43 = tt.broadcast %40 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc39)
    %44 = tt.broadcast %42 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc39)
    %45 = arith.andi %43, %44 : tensor<64x64xi1> loc(#loc39)
    tt.store %38, %29, %45 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc11)
    %12 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc12)
    %13 = arith.muli %11, %12 : tensor<64x1xi32> loc(#loc12)
    %14 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc13)
    %15 = tt.addptr %14, %13 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc13)
    %16 = tt.broadcast %15 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc14)
    %17 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc15)
    %18 = arith.cmpi slt, %11, %17 : tensor<64x1xi32> loc(#loc15)
    %19 = tt.broadcast %18 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc16)
    %20 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc17)
    %21 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc18)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc18)
    %23 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc19)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc19)
    %25 = tt.broadcast %24 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc20)
    %26 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc21)
    %27 = arith.cmpi slt, %20, %26 : tensor<64x1xi32> loc(#loc21)
    %28 = tt.broadcast %27 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc22)
    %29 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %46 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc24)
      %47 = arith.addi %46, %9 : tensor<32xi32> loc(#loc24)
      %48 = arith.cmpi slt, %47, %10 : tensor<32xi32> loc(#loc10)
      %49 = tt.expand_dims %47 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc25)
      %50 = tt.broadcast %49 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc14)
      %51 = tt.addptr %16, %50 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc14)
      %52 = tt.expand_dims %48 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc26)
      %53 = tt.broadcast %52 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc16)
      %54 = arith.andi %19, %53 : tensor<64x32xi1> loc(#loc16)
      %55 = tt.load %51, %54, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc27)
      %56 = tt.addptr %25, %50 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc20)
      %57 = arith.andi %28, %53 : tensor<64x32xi1> loc(#loc22)
      %58 = tt.load %56, %57, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc28)
      %59 = tt.trans %58 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc29)
      %60 = tt.dot %55, %59, %arg10 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %60 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc23)
    %30 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %31 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc33)
    %32 = arith.muli %30, %31 : tensor<64x1xi32> loc(#loc33)
    %33 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc34)
    %34 = tt.addptr %33, %32 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc34)
    %35 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc35)
    %36 = tt.broadcast %34 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc36)
    %37 = tt.broadcast %35 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc36)
    %38 = tt.addptr %36, %37 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc36)
    %39 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc37)
    %40 = arith.cmpi slt, %30, %39 : tensor<64x1xi32> loc(#loc37)
    %41 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc38)
    %42 = arith.cmpi slt, %35, %41 : tensor<1x64xi32> loc(#loc38)
    %43 = tt.broadcast %40 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc39)
    %44 = tt.broadcast %42 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc39)
    %45 = arith.andi %43, %44 : tensor<64x64xi1> loc(#loc39)
    tt.store %38, %29, %45 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc9)
    %10 = tt.splat %arg5 : i32 -> tensor<32xi32> loc(#loc10)
    %11 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc11)
    %12 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc12)
    %13 = arith.muli %11, %12 : tensor<64x1xi32> loc(#loc12)
    %14 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc13)
    %15 = tt.addptr %14, %13 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc13)
    %16 = tt.broadcast %15 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc14)
    %17 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc15)
    %18 = arith.cmpi slt, %11, %17 : tensor<64x1xi32> loc(#loc15)
    %19 = tt.broadcast %18 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc16)
    %20 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc17)
    %21 = tt.splat %arg7 : i32 -> tensor<64x1xi32> loc(#loc18)
    %22 = arith.muli %20, %21 : tensor<64x1xi32> loc(#loc18)
    %23 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>> loc(#loc19)
    %24 = tt.addptr %23, %22 : tensor<64x1x!tt.ptr<bf16>>, tensor<64x1xi32> loc(#loc19)
    %25 = tt.broadcast %24 : tensor<64x1x!tt.ptr<bf16>> -> tensor<64x32x!tt.ptr<bf16>> loc(#loc20)
    %26 = tt.splat %arg4 : i32 -> tensor<64x1xi32> loc(#loc21)
    %27 = arith.cmpi slt, %20, %26 : tensor<64x1xi32> loc(#loc21)
    %28 = tt.broadcast %27 : tensor<64x1xi1> -> tensor<64x32xi1> loc(#loc22)
    %29 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32>)  : i32 {
      %46 = tt.splat %arg9 : i32 -> tensor<32xi32> loc(#loc24)
      %47 = arith.addi %46, %9 : tensor<32xi32> loc(#loc24)
      %48 = arith.cmpi slt, %47, %10 : tensor<32xi32> loc(#loc10)
      %49 = tt.expand_dims %47 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc25)
      %50 = tt.broadcast %49 : tensor<1x32xi32> -> tensor<64x32xi32> loc(#loc14)
      %51 = tt.addptr %16, %50 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc14)
      %52 = tt.expand_dims %48 {axis = 0 : i32} : tensor<32xi1> -> tensor<1x32xi1> loc(#loc26)
      %53 = tt.broadcast %52 : tensor<1x32xi1> -> tensor<64x32xi1> loc(#loc16)
      %54 = arith.andi %19, %53 : tensor<64x32xi1> loc(#loc16)
      %55 = tt.load %51, %54, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc27)
      %56 = tt.addptr %25, %50 : tensor<64x32x!tt.ptr<bf16>>, tensor<64x32xi32> loc(#loc20)
      %57 = arith.andi %28, %53 : tensor<64x32xi1> loc(#loc22)
      %58 = tt.load %56, %57, %cst : tensor<64x32x!tt.ptr<bf16>> loc(#loc28)
      %59 = tt.trans %58 {order = array<i32: 1, 0>} : tensor<64x32xbf16> -> tensor<32x64xbf16> loc(#loc29)
      %60 = tt.dot %55, %59, %arg10 : tensor<64x32xbf16> * tensor<32x64xbf16> -> tensor<64x64xf32> loc(#loc30)
      scf.yield %60 : tensor<64x64xf32> loc(#loc31)
    } loc(#loc23)
    %30 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc32)
    %31 = tt.splat %arg8 : i32 -> tensor<64x1xi32> loc(#loc33)
    %32 = arith.muli %30, %31 : tensor<64x1xi32> loc(#loc33)
    %33 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc34)
    %34 = tt.addptr %33, %32 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc34)
    %35 = tt.expand_dims %8 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc35)
    %36 = tt.broadcast %34 : tensor<64x1x!tt.ptr<f32>> -> tensor<64x64x!tt.ptr<f32>> loc(#loc36)
    %37 = tt.broadcast %35 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc36)
    %38 = tt.addptr %36, %37 : tensor<64x64x!tt.ptr<f32>>, tensor<64x64xi32> loc(#loc36)
    %39 = tt.splat %arg3 : i32 -> tensor<64x1xi32> loc(#loc37)
    %40 = arith.cmpi slt, %30, %39 : tensor<64x1xi32> loc(#loc37)
    %41 = tt.splat %arg4 : i32 -> tensor<1x64xi32> loc(#loc38)
    %42 = arith.cmpi slt, %35, %41 : tensor<1x64xi32> loc(#loc38)
    %43 = tt.broadcast %40 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc39)
    %44 = tt.broadcast %42 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc39)
    %45 = arith.andi %43, %44 : tensor<64x64xi1> loc(#loc39)
    tt.store %38, %29, %45 : tensor<64x64x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked7 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked2> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32, #blocked2> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32, #blocked2> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32, #blocked2> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32, #blocked2> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked2> loc(#loc9)
    %10 = tt.splat %arg5 : i32 -> tensor<32xi32, #blocked2> loc(#loc10)
    %11 = ttg.convert_layout %5 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc11)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3> loc(#loc11)
    %13 = ttg.convert_layout %12 : tensor<64x1xi32, #blocked3> -> tensor<64x1xi32, #blocked4> loc(#loc12)
    %14 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc12)
    %15 = arith.muli %13, %14 : tensor<64x1xi32, #blocked4> loc(#loc12)
    %16 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked4> loc(#loc13)
    %17 = tt.addptr %16, %15 : tensor<64x1x!tt.ptr<bf16>, #blocked4>, tensor<64x1xi32, #blocked4> loc(#loc13)
    %18 = tt.broadcast %17 : tensor<64x1x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked4> loc(#loc14)
    %19 = ttg.convert_layout %18 : tensor<64x32x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %20 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc15)
    %21 = arith.cmpi slt, %13, %20 : tensor<64x1xi32, #blocked4> loc(#loc15)
    %22 = tt.broadcast %21 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc16)
    %23 = ttg.convert_layout %22 : tensor<64x32xi1, #blocked4> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %24 = ttg.convert_layout %8 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc17)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3> loc(#loc17)
    %26 = ttg.convert_layout %25 : tensor<64x1xi32, #blocked3> -> tensor<64x1xi32, #blocked4> loc(#loc18)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked4> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked4> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked4>, tensor<64x1xi32, #blocked4> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked4> loc(#loc20)
    %32 = ttg.convert_layout %31 : tensor<64x32x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %33 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc21)
    %34 = arith.cmpi slt, %26, %33 : tensor<64x1xi32, #blocked4> loc(#loc21)
    %35 = tt.broadcast %34 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc22)
    %36 = ttg.convert_layout %35 : tensor<64x32xi1, #blocked4> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %37 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #blocked1>)  : i32 {
      %60 = tt.splat %arg9 : i32 -> tensor<32xi32, #blocked2> loc(#loc24)
      %61 = arith.addi %60, %9 : tensor<32xi32, #blocked2> loc(#loc24)
      %62 = arith.cmpi slt, %61, %10 : tensor<32xi32, #blocked2> loc(#loc10)
      %63 = ttg.convert_layout %61 : tensor<32xi32, #blocked2> -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc25)
      %64 = tt.expand_dims %63 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x32xi32, #blocked5> loc(#loc25)
      %65 = ttg.convert_layout %64 : tensor<1x32xi32, #blocked5> -> tensor<1x32xi32, #blocked> loc(#loc14)
      %66 = tt.broadcast %65 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %67 = tt.addptr %19, %66 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %68 = ttg.convert_layout %62 : tensor<32xi1, #blocked2> -> tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc26)
      %69 = tt.expand_dims %68 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x32xi1, #blocked5> loc(#loc26)
      %70 = ttg.convert_layout %69 : tensor<1x32xi1, #blocked5> -> tensor<1x32xi1, #blocked> loc(#loc16)
      %71 = tt.broadcast %70 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %72 = arith.andi %23, %71 : tensor<64x32xi1, #blocked> loc(#loc16)
      %73 = tt.load %67, %72, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %74 = tt.addptr %32, %66 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %75 = arith.andi %36, %71 : tensor<64x32xi1, #blocked> loc(#loc22)
      %76 = tt.load %74, %75, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %77 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked6> loc(#loc29)
      %78 = ttg.convert_layout %77 : tensor<32x64xbf16, #blocked6> -> tensor<32x64xbf16, #blocked1> loc(#loc30)
      %79 = ttg.convert_layout %73 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked7}>> loc(#loc27)
      %80 = ttg.convert_layout %78 : tensor<32x64xbf16, #blocked1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked7}>> loc(#loc30)
      %81 = ttg.convert_layout %arg10 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked7> loc(#loc31)
      %82 = tt.dot %79, %80, %81 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked7}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked7}>> -> tensor<64x64xf32, #blocked7> loc(#loc30)
      %83 = ttg.convert_layout %82 : tensor<64x64xf32, #blocked7> -> tensor<64x64xf32, #blocked1> loc(#loc32)
      scf.yield %83 : tensor<64x64xf32, #blocked1> loc(#loc32)
    } loc(#loc23)
    %38 = ttg.convert_layout %5 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc33)
    %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3> loc(#loc33)
    %40 = ttg.convert_layout %39 : tensor<64x1xi32, #blocked3> -> tensor<64x1xi32, #blocked4> loc(#loc34)
    %41 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc34)
    %42 = arith.muli %40, %41 : tensor<64x1xi32, #blocked4> loc(#loc34)
    %43 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked4> loc(#loc35)
    %44 = tt.addptr %43, %42 : tensor<64x1x!tt.ptr<f32>, #blocked4>, tensor<64x1xi32, #blocked4> loc(#loc35)
    %45 = ttg.convert_layout %8 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc36)
    %46 = tt.expand_dims %45 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x64xi32, #blocked5> loc(#loc36)
    %47 = ttg.convert_layout %46 : tensor<1x64xi32, #blocked5> -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %48 = tt.broadcast %44 : tensor<64x1x!tt.ptr<f32>, #blocked4> -> tensor<64x64x!tt.ptr<f32>, #blocked4> loc(#loc37)
    %49 = ttg.convert_layout %48 : tensor<64x64x!tt.ptr<f32>, #blocked4> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %50 = tt.broadcast %47 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc37)
    %51 = tt.addptr %49, %50 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc37)
    %52 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc38)
    %53 = arith.cmpi slt, %40, %52 : tensor<64x1xi32, #blocked4> loc(#loc38)
    %54 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc39)
    %55 = arith.cmpi slt, %47, %54 : tensor<1x64xi32, #blocked1> loc(#loc39)
    %56 = tt.broadcast %53 : tensor<64x1xi1, #blocked4> -> tensor<64x64xi1, #blocked4> loc(#loc40)
    %57 = ttg.convert_layout %56 : tensor<64x64xi1, #blocked4> -> tensor<64x64xi1, #blocked1> loc(#loc40)
    %58 = tt.broadcast %55 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc40)
    %59 = arith.andi %57, %58 : tensor<64x64xi1, #blocked1> loc(#loc40)
    tt.store %51, %37, %59 : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":56:19)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked7 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked2> loc(#loc5)
    %4 = tt.splat %2 : i32 -> tensor<64xi32, #blocked2> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64xi32, #blocked2> loc(#loc6)
    %6 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<64xi32, #blocked2> loc(#loc8)
    %8 = arith.addi %7, %3 : tensor<64xi32, #blocked2> loc(#loc8)
    %9 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked2> loc(#loc9)
    %10 = tt.splat %arg5 : i32 -> tensor<32xi32, #blocked2> loc(#loc10)
    %11 = ttg.convert_layout %5 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc11)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3> loc(#loc11)
    %13 = ttg.convert_layout %12 : tensor<64x1xi32, #blocked3> -> tensor<64x1xi32, #blocked4> loc(#loc12)
    %14 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc12)
    %15 = arith.muli %13, %14 : tensor<64x1xi32, #blocked4> loc(#loc12)
    %16 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked4> loc(#loc13)
    %17 = tt.addptr %16, %15 : tensor<64x1x!tt.ptr<bf16>, #blocked4>, tensor<64x1xi32, #blocked4> loc(#loc13)
    %18 = tt.broadcast %17 : tensor<64x1x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked4> loc(#loc14)
    %19 = ttg.convert_layout %18 : tensor<64x32x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %20 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc15)
    %21 = arith.cmpi slt, %13, %20 : tensor<64x1xi32, #blocked4> loc(#loc15)
    %22 = tt.broadcast %21 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc16)
    %23 = ttg.convert_layout %22 : tensor<64x32xi1, #blocked4> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %24 = ttg.convert_layout %8 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc17)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3> loc(#loc17)
    %26 = ttg.convert_layout %25 : tensor<64x1xi32, #blocked3> -> tensor<64x1xi32, #blocked4> loc(#loc18)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked4> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked4> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked4>, tensor<64x1xi32, #blocked4> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked4> loc(#loc20)
    %32 = ttg.convert_layout %31 : tensor<64x32x!tt.ptr<bf16>, #blocked4> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %33 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc21)
    %34 = arith.cmpi slt, %26, %33 : tensor<64x1xi32, #blocked4> loc(#loc21)
    %35 = tt.broadcast %34 : tensor<64x1xi1, #blocked4> -> tensor<64x32xi1, #blocked4> loc(#loc22)
    %36 = ttg.convert_layout %35 : tensor<64x32xi1, #blocked4> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %37 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #blocked1>)  : i32 {
      %63 = tt.splat %arg9 : i32 -> tensor<32xi32, #blocked2> loc(#loc24)
      %64 = arith.addi %63, %9 : tensor<32xi32, #blocked2> loc(#loc24)
      %65 = arith.cmpi slt, %64, %10 : tensor<32xi32, #blocked2> loc(#loc10)
      %66 = ttg.convert_layout %64 : tensor<32xi32, #blocked2> -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc25)
      %67 = tt.expand_dims %66 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x32xi32, #blocked5> loc(#loc25)
      %68 = ttg.convert_layout %67 : tensor<1x32xi32, #blocked5> -> tensor<1x32xi32, #blocked> loc(#loc14)
      %69 = tt.broadcast %68 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %70 = tt.addptr %19, %69 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %71 = ttg.convert_layout %65 : tensor<32xi1, #blocked2> -> tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc26)
      %72 = tt.expand_dims %71 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x32xi1, #blocked5> loc(#loc26)
      %73 = ttg.convert_layout %72 : tensor<1x32xi1, #blocked5> -> tensor<1x32xi1, #blocked> loc(#loc16)
      %74 = tt.broadcast %73 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %75 = arith.andi %23, %74 : tensor<64x32xi1, #blocked> loc(#loc16)
      %76 = ttg.convert_layout %70 : tensor<64x32x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %77 = ttg.convert_layout %75 : tensor<64x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc27)
      %78 = ttg.convert_layout %cst : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #blocked> loc(#loc27)
      %79 = tt.load %76, %77, %78 : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %80 = tt.addptr %32, %69 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %81 = arith.andi %36, %74 : tensor<64x32xi1, #blocked> loc(#loc22)
      %82 = ttg.convert_layout %80 : tensor<64x32x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %83 = ttg.convert_layout %81 : tensor<64x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc28)
      %84 = ttg.convert_layout %cst : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #blocked> loc(#loc28)
      %85 = tt.load %82, %83, %84 : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %86 = tt.trans %85 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked6> loc(#loc29)
      %87 = ttg.convert_layout %86 : tensor<32x64xbf16, #blocked6> -> tensor<32x64xbf16, #blocked1> loc(#loc30)
      %88 = ttg.convert_layout %79 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked7}>> loc(#loc27)
      %89 = ttg.convert_layout %87 : tensor<32x64xbf16, #blocked1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked7}>> loc(#loc30)
      %90 = ttg.convert_layout %arg10 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked7> loc(#loc31)
      %91 = tt.dot %88, %89, %90 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked7}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked7}>> -> tensor<64x64xf32, #blocked7> loc(#loc30)
      %92 = ttg.convert_layout %91 : tensor<64x64xf32, #blocked7> -> tensor<64x64xf32, #blocked1> loc(#loc32)
      scf.yield %92 : tensor<64x64xf32, #blocked1> loc(#loc32)
    } loc(#loc23)
    %38 = ttg.convert_layout %5 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc33)
    %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<64x1xi32, #blocked3> loc(#loc33)
    %40 = ttg.convert_layout %39 : tensor<64x1xi32, #blocked3> -> tensor<64x1xi32, #blocked4> loc(#loc34)
    %41 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc34)
    %42 = arith.muli %40, %41 : tensor<64x1xi32, #blocked4> loc(#loc34)
    %43 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked4> loc(#loc35)
    %44 = tt.addptr %43, %42 : tensor<64x1x!tt.ptr<f32>, #blocked4>, tensor<64x1xi32, #blocked4> loc(#loc35)
    %45 = ttg.convert_layout %8 : tensor<64xi32, #blocked2> -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc36)
    %46 = tt.expand_dims %45 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x64xi32, #blocked5> loc(#loc36)
    %47 = ttg.convert_layout %46 : tensor<1x64xi32, #blocked5> -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %48 = tt.broadcast %44 : tensor<64x1x!tt.ptr<f32>, #blocked4> -> tensor<64x64x!tt.ptr<f32>, #blocked4> loc(#loc37)
    %49 = ttg.convert_layout %48 : tensor<64x64x!tt.ptr<f32>, #blocked4> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %50 = tt.broadcast %47 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc37)
    %51 = tt.addptr %49, %50 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc37)
    %52 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked4> loc(#loc38)
    %53 = arith.cmpi slt, %40, %52 : tensor<64x1xi32, #blocked4> loc(#loc38)
    %54 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc39)
    %55 = arith.cmpi slt, %47, %54 : tensor<1x64xi32, #blocked1> loc(#loc39)
    %56 = tt.broadcast %53 : tensor<64x1xi1, #blocked4> -> tensor<64x64xi1, #blocked4> loc(#loc40)
    %57 = ttg.convert_layout %56 : tensor<64x64xi1, #blocked4> -> tensor<64x64xi1, #blocked1> loc(#loc40)
    %58 = tt.broadcast %55 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc40)
    %59 = arith.andi %57, %58 : tensor<64x64xi1, #blocked1> loc(#loc40)
    %60 = ttg.convert_layout %51 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked8> loc(#loc41)
    %61 = ttg.convert_layout %37 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked8> loc(#loc41)
    %62 = ttg.convert_layout %59 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #blocked8> loc(#loc41)
    tt.store %60, %61, %62 : tensor<64x64x!tt.ptr<f32>, #blocked8> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":56:19)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc42 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #blocked1>)  : i32 {
      %53 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %54 = arith.addi %53, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.cmpi slt, %54, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %57 = tt.broadcast %56 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %58 = tt.addptr %22, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %60 = tt.broadcast %59 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %61 = arith.andi %25, %60 : tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = tt.load %58, %61, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %63 = tt.addptr %31, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %64 = arith.andi %34, %60 : tensor<64x32xi1, #blocked> loc(#loc22)
      %65 = tt.load %63, %64, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %66 = tt.trans %65 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked3> loc(#loc29)
      %67 = ttg.convert_layout %62 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> loc(#loc27)
      %68 = ttg.convert_layout %66 : tensor<32x64xbf16, #blocked3> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> loc(#loc30)
      %69 = tt.dot %67, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> -> tensor<64x64xf32, #blocked1> loc(#loc30)
      scf.yield %69 : tensor<64x64xf32, #blocked1> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked2> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked2> -> tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked2> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked2> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %52 = ttg.convert_layout %35 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked2> loc(#loc40)
    tt.store %44, %52, %51 : tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUAccelerateMatmul (tritonamdgpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #blocked1>)  : i32 {
      %53 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %54 = arith.addi %53, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.cmpi slt, %54, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %57 = tt.broadcast %56 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %58 = tt.addptr %22, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %60 = tt.broadcast %59 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %61 = arith.andi %25, %60 : tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = tt.load %58, %61, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %63 = tt.addptr %31, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %64 = arith.andi %34, %60 : tensor<64x32xi1, #blocked> loc(#loc22)
      %65 = tt.load %63, %64, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %66 = tt.trans %65 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked3> loc(#loc29)
      %67 = ttg.convert_layout %62 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> loc(#loc27)
      %68 = ttg.convert_layout %66 : tensor<32x64xbf16, #blocked3> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> loc(#loc30)
      %69 = tt.dot %67, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> -> tensor<64x64xf32, #blocked1> loc(#loc30)
      scf.yield %69 : tensor<64x64xf32, #blocked1> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked2> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked2> -> tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked2> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked2> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %52 = ttg.convert_layout %35 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked2> loc(#loc40)
    tt.store %44, %52, %51 : tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [4, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #blocked1>)  : i32 {
      %53 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %54 = arith.addi %53, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.cmpi slt, %54, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %57 = tt.broadcast %56 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %58 = tt.addptr %22, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %60 = tt.broadcast %59 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %61 = arith.andi %25, %60 : tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = tt.load %58, %61, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %63 = tt.addptr %31, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %64 = arith.andi %34, %60 : tensor<64x32xi1, #blocked> loc(#loc22)
      %65 = tt.load %63, %64, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %66 = tt.trans %65 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked3> loc(#loc29)
      %67 = ttg.convert_layout %62 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> loc(#loc27)
      %68 = ttg.convert_layout %66 : tensor<32x64xbf16, #blocked3> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> loc(#loc30)
      %69 = ttg.convert_layout %arg10 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #mma> loc(#loc1)
      %70 = ttg.convert_layout %67 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked1}>> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %71 = ttg.convert_layout %68 : tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked1}>> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %72 = tt.dot %70, %71, %69 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      %73 = ttg.convert_layout %72 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked1> loc(#loc30)
      scf.yield %73 : tensor<64x64xf32, #blocked1> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked2> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked2> -> tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked2> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked2> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked2> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked2> -> tensor<64x64xi1, #blocked2> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked2> loc(#loc39)
    %52 = ttg.convert_layout %35 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked2> loc(#loc40)
    tt.store %44, %52, %51 : tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUOptimizeEpilogue (tritonamdgpu-optimize-epilogue) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %53 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %54 = arith.addi %53, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.cmpi slt, %54, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %57 = tt.broadcast %56 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %58 = tt.addptr %22, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %60 = tt.broadcast %59 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %61 = arith.andi %25, %60 : tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = tt.load %58, %61, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %63 = tt.addptr %31, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %64 = arith.andi %34, %60 : tensor<64x32xi1, #blocked> loc(#loc22)
      %65 = tt.load %63, %64, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %66 = ttg.convert_layout %65 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %67 = tt.trans %66 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %68 = ttg.convert_layout %62 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %69 = tt.dot %68, %67, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %69 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %35 : tensor<64x64xf32, #mma> -> tensor<64x64xf32, #blocked1> loc(#loc40)
    tt.store %44, %52, %51 : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUHoistLayoutConversions (tritonamdgpu-hoist-layout-conversions) ('tt.func' operation: @matmul_abt_kernel) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPUFuseNestedLoops (tritongpu-fuse-nested-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUStreamPipeline (tritonamdgpu-stream-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = scf.for %arg9 = %c0_i32 to %arg5 step %c32_i32 iter_args(%arg10 = %cst_0) -> (tensor<64x64xf32, #mma>)  : i32 {
      %54 = tt.splat %arg9 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %55 = arith.addi %54, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %56 = arith.cmpi slt, %55, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %57 = tt.expand_dims %55 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %58 = tt.broadcast %57 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %59 = tt.addptr %22, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %60 = tt.expand_dims %56 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %61 = tt.broadcast %60 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %62 = arith.andi %25, %61 : tensor<64x32xi1, #blocked> loc(#loc16)
      %63 = tt.load %59, %62, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %64 = tt.addptr %31, %58 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %65 = arith.andi %34, %61 : tensor<64x32xi1, #blocked> loc(#loc22)
      %66 = tt.load %64, %65, %cst : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %67 = ttg.convert_layout %66 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %68 = tt.trans %67 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %69 = ttg.convert_layout %63 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %70 = tt.dot %69, %68, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %70 : tensor<64x64xf32, #mma> loc(#loc31)
    } loc(#loc23)
    %36 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %37 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc33)
    %38 = arith.muli %36, %37 : tensor<64x1xi32, #blocked1> loc(#loc33)
    %39 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %40 = tt.addptr %39, %38 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc34)
    %41 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc35)
    %42 = tt.broadcast %40 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %43 = tt.broadcast %41 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc36)
    %44 = tt.addptr %42, %43 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc36)
    %45 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc37)
    %46 = arith.cmpi slt, %36, %45 : tensor<64x1xi32, #blocked1> loc(#loc37)
    %47 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc38)
    %48 = arith.cmpi slt, %41, %47 : tensor<1x64xi32, #blocked1> loc(#loc38)
    %49 = tt.broadcast %46 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %50 = tt.broadcast %48 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc39)
    %51 = arith.andi %49, %50 : tensor<64x64xi1, #blocked1> loc(#loc39)
    %52 = ttg.convert_layout %44 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc36)
    %53 = ttg.convert_layout %51 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc39)
    tt.store %52, %35, %53 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:8)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc41 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc23)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc23)
    %c1_i32 = arith.constant 1 : i32 loc(#loc23)
    %c2_i32 = arith.constant 2 : i32 loc(#loc23)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc23)
    %35 = arith.muli %c32_i32, %c0_i32_2 : i32 loc(#loc23)
    %36 = arith.addi %c0_i32, %35 : i32 loc(#loc23)
    %37 = arith.cmpi slt, %36, %arg5 : i32 loc(#loc23)
    %38 = tt.splat %36 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %39 = arith.addi %38, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %40 = arith.cmpi slt, %39, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %41 = tt.expand_dims %39 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
    %42 = tt.broadcast %41 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %43 = tt.addptr %22, %42 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %44 = tt.expand_dims %40 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
    %45 = tt.broadcast %44 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %46 = arith.andi %25, %45 : tensor<64x32xi1, #blocked> loc(#loc16)
    %47 = tt.splat %37 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %48 = arith.andi %47, %46 : tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = tt.load %43, %48, %cst {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %50 = tt.addptr %31, %42 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %51 = arith.andi %34, %45 : tensor<64x32xi1, #blocked> loc(#loc22)
    %52 = tt.splat %37 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %53 = arith.andi %52, %51 : tensor<64x32xi1, #blocked> loc(#loc23)
    %54 = tt.load %50, %53, %cst {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
    %c1_i32_3 = arith.constant 1 : i32 loc(#loc23)
    %55 = arith.muli %c32_i32, %c1_i32_3 : i32 loc(#loc23)
    %56 = arith.addi %c0_i32, %55 : i32 loc(#loc23)
    %57 = arith.cmpi slt, %56, %arg5 : i32 loc(#loc23)
    %58 = tt.splat %56 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %59 = arith.addi %58, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %60 = arith.cmpi slt, %59, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %61 = tt.expand_dims %59 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
    %62 = tt.broadcast %61 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %63 = tt.addptr %22, %62 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %64 = tt.expand_dims %60 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
    %65 = tt.broadcast %64 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %66 = arith.andi %25, %65 : tensor<64x32xi1, #blocked> loc(#loc16)
    %67 = tt.splat %57 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %68 = arith.andi %67, %66 : tensor<64x32xi1, #blocked> loc(#loc23)
    %69 = tt.load %63, %68, %cst {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %70 = tt.addptr %31, %62 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %71 = arith.andi %34, %65 : tensor<64x32xi1, #blocked> loc(#loc22)
    %72 = tt.splat %57 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %73 = arith.andi %72, %71 : tensor<64x32xi1, #blocked> loc(#loc23)
    %74 = tt.load %70, %73, %cst {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
    %c2_i32_4 = arith.constant 2 : i32 loc(#loc23)
    %75 = arith.muli %c32_i32, %c2_i32_4 : i32 loc(#loc23)
    %76 = arith.subi %arg5, %75 : i32 loc(#loc23)
    %77:6 = scf.for %arg9 = %c0_i32 to %76 step %c32_i32 iter_args(%arg10 = %cst_0, %arg11 = %c-1_i32, %arg12 = %54, %arg13 = %74, %arg14 = %49, %arg15 = %69) -> (tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %130 = arith.addi %arg11, %c1_i32 : i32 loc(#loc23)
      %131 = arith.cmpi slt, %130, %c2_i32 : i32 loc(#loc23)
      %132 = arith.select %131, %130, %c0_i32_1 : i32 loc(#loc23)
      %c2_i32_11 = arith.constant 2 : i32 loc(#loc23)
      %133 = arith.muli %c32_i32, %c2_i32_11 : i32 loc(#loc23)
      %134 = arith.addi %arg9, %133 : i32 loc(#loc23)
      %135 = tt.splat %134 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %136 = arith.addi %135, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %137 = arith.cmpi slt, %136, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %138 = tt.expand_dims %136 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc25)
      %139 = tt.broadcast %138 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %140 = tt.addptr %22, %139 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %141 = tt.expand_dims %137 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc26)
      %142 = tt.broadcast %141 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %143 = arith.andi %25, %142 : tensor<64x32xi1, #blocked> loc(#loc16)
      %144 = tt.load %140, %143, %cst {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %145 = tt.addptr %31, %139 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %146 = arith.andi %34, %142 : tensor<64x32xi1, #blocked> loc(#loc22)
      %147 = tt.load %145, %146, %cst {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc28)
      %148 = ttg.convert_layout %arg12 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %149 = tt.trans %148 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %150 = ttg.convert_layout %arg14 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
      %151 = tt.dot %150, %149, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %151, %132, %arg13, %147, %arg15, %144 : tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc23)
    } loc(#loc23)
    %c0_i32_5 = arith.constant 0 : i32 loc(#loc23)
    %c1_i32_6 = arith.constant 1 : i32 loc(#loc23)
    %78 = arith.cmpi slt, %c32_i32, %c0_i32_5 : i32 loc(#loc23)
    %c-1_i32_7 = arith.constant -1 : i32 loc(#loc23)
    %79 = arith.select %78, %c1_i32_6, %c-1_i32_7 : i32 loc(#loc23)
    %80 = arith.subi %arg5, %c0_i32 : i32 loc(#loc23)
    %81 = arith.addi %80, %c32_i32 : i32 loc(#loc23)
    %82 = arith.addi %81, %79 : i32 loc(#loc23)
    %83 = arith.divsi %82, %c32_i32 : i32 loc(#loc23)
    %c2_i32_8 = arith.constant 2 : i32 loc(#loc23)
    %84 = arith.subi %83, %c2_i32_8 : i32 loc(#loc23)
    %85 = arith.maxsi %c0_i32_5, %84 : i32 loc(#loc23)
    %86 = arith.muli %c32_i32, %85 : i32 loc(#loc23)
    %87 = arith.addi %c0_i32, %86 : i32 loc(#loc23)
    %88 = arith.addi %85, %c1_i32_6 : i32 loc(#loc23)
    %c1_i32_9 = arith.constant 1 : i32 loc(#loc23)
    %89 = arith.cmpi sge, %83, %c1_i32_9 : i32 loc(#loc23)
    %90 = arith.muli %c32_i32, %88 : i32 loc(#loc23)
    %91 = arith.addi %c0_i32, %90 : i32 loc(#loc23)
    %92 = arith.addi %88, %c1_i32_6 : i32 loc(#loc23)
    %c2_i32_10 = arith.constant 2 : i32 loc(#loc23)
    %93 = arith.cmpi sge, %83, %c2_i32_10 : i32 loc(#loc23)
    %94 = arith.addi %77#1, %c1_i32 : i32 loc(#loc23)
    %95 = arith.cmpi slt, %94, %c2_i32 : i32 loc(#loc23)
    %96 = arith.select %95, %94, %c0_i32_1 : i32 loc(#loc23)
    %97 = ttg.convert_layout %77#2 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %98 = tt.trans %97 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %99 = ttg.convert_layout %77#4 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
    %100 = scf.if %89 -> (tensor<64x64xf32, #mma>) {
      %130 = tt.dot %99, %98, %77#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %130 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %77#0 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %101 = arith.select %89, %100, %77#0 : tensor<64x64xf32, #mma> loc(#loc23)
    %102 = arith.select %89, %96, %77#1 : i32 loc(#loc23)
    %103 = arith.addi %102, %c1_i32 : i32 loc(#loc23)
    %104 = arith.cmpi slt, %103, %c2_i32 : i32 loc(#loc23)
    %105 = arith.select %104, %103, %c0_i32_1 : i32 loc(#loc23)
    %106 = ttg.convert_layout %77#3 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %107 = tt.trans %106 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %108 = ttg.convert_layout %77#5 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc27)
    %109 = scf.if %93 -> (tensor<64x64xf32, #mma>) {
      %130 = tt.dot %108, %107, %101 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %130 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %101 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %110 = arith.select %93, %109, %101 : tensor<64x64xf32, #mma> loc(#loc23)
    %111 = arith.select %93, %105, %102 : i32 loc(#loc23)
    %112 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc31)
    %113 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %114 = arith.muli %112, %113 : tensor<64x1xi32, #blocked1> loc(#loc32)
    %115 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %116 = tt.addptr %115, %114 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc33)
    %117 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc34)
    %118 = tt.broadcast %116 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %119 = tt.broadcast %117 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc35)
    %120 = tt.addptr %118, %119 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
    %121 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc36)
    %122 = arith.cmpi slt, %112, %121 : tensor<64x1xi32, #blocked1> loc(#loc36)
    %123 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %124 = arith.cmpi slt, %117, %123 : tensor<1x64xi32, #blocked1> loc(#loc37)
    %125 = tt.broadcast %122 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %126 = tt.broadcast %124 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %127 = arith.andi %125, %126 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %128 = ttg.convert_layout %120 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %129 = ttg.convert_layout %127 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %128, %110, %129 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc23)
    %36 = arith.cmpi slt, %15, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %37 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %38 = tt.broadcast %37 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %39 = tt.addptr %22, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %40 = tt.expand_dims %36 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %41 = tt.broadcast %40 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %42 = arith.andi %25, %41 : tensor<64x32xi1, #blocked> loc(#loc16)
    %43 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %42 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = tt.load %39, %44, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %46 = tt.addptr %31, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %47 = arith.andi %34, %41 : tensor<64x32xi1, #blocked> loc(#loc22)
    %48 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %48, %47 : tensor<64x32xi1, #blocked> loc(#loc23)
    %50 = tt.load %46, %49, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc23)
    %52 = arith.addi %15, %cst : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %53 = arith.cmpi slt, %52, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %54 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %56 = tt.addptr %22, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %57 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %58 = tt.broadcast %57 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %59 = arith.andi %25, %58 : tensor<64x32xi1, #blocked> loc(#loc16)
    %60 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %61 = arith.andi %60, %59 : tensor<64x32xi1, #blocked> loc(#loc23)
    %62 = tt.load %56, %61, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %63 = tt.addptr %31, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %64 = arith.andi %34, %58 : tensor<64x32xi1, #blocked> loc(#loc22)
    %65 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %66 = arith.andi %65, %64 : tensor<64x32xi1, #blocked> loc(#loc23)
    %67 = tt.load %63, %66, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %68 = arith.subi %arg5, %c64_i32 : i32 loc(#loc23)
    %69:6 = scf.for %arg9 = %c0_i32 to %68 step %c32_i32 iter_args(%arg10 = %cst_1, %arg11 = %c-1_i32, %arg12 = %50, %arg13 = %67, %arg14 = %45, %arg15 = %62) -> (tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %102 = arith.addi %arg11, %c1_i32 : i32 loc(#loc23)
      %103 = arith.cmpi slt, %102, %c2_i32 : i32 loc(#loc23)
      %104 = arith.select %103, %102, %c0_i32 : i32 loc(#loc23)
      %105 = arith.addi %arg9, %c64_i32 : i32 loc(#loc23)
      %106 = tt.splat %105 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %107 = arith.addi %106, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %108 = arith.cmpi slt, %107, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %109 = tt.expand_dims %107 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
      %110 = tt.broadcast %109 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %111 = tt.addptr %22, %110 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %112 = tt.expand_dims %108 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
      %113 = tt.broadcast %112 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %114 = arith.andi %25, %113 : tensor<64x32xi1, #blocked> loc(#loc16)
      %115 = tt.load %111, %114, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
      %116 = tt.addptr %31, %110 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %117 = arith.andi %34, %113 : tensor<64x32xi1, #blocked> loc(#loc22)
      %118 = tt.load %116, %117, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %119 = ttg.convert_layout %arg12 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %120 = tt.trans %119 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %121 = ttg.convert_layout %arg14 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
      %122 = tt.dot %121, %120, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %122, %104, %arg13, %118, %arg15, %115 : tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc23)
    } loc(#loc23)
    %70 = arith.addi %arg5, %c31_i32 : i32 loc(#loc23)
    %71 = arith.divsi %70, %c32_i32 : i32 loc(#loc23)
    %72 = arith.cmpi sge, %71, %c1_i32 : i32 loc(#loc23)
    %73 = arith.cmpi sge, %71, %c2_i32 : i32 loc(#loc23)
    %74 = ttg.convert_layout %69#2 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %75 = tt.trans %74 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %76 = ttg.convert_layout %69#4 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %77 = scf.if %72 -> (tensor<64x64xf32, #mma>) {
      %102 = tt.dot %76, %75, %69#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %102 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %69#0 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %78 = arith.select %72, %77, %69#0 : tensor<64x64xf32, #mma> loc(#loc23)
    %79 = ttg.convert_layout %69#3 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %80 = tt.trans %79 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %81 = ttg.convert_layout %69#5 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %82 = scf.if %73 -> (tensor<64x64xf32, #mma>) {
      %102 = tt.dot %81, %80, %78 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %102 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %78 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %83 = arith.select %73, %82, %78 : tensor<64x64xf32, #mma> loc(#loc23)
    %84 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc31)
    %85 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %86 = arith.muli %84, %85 : tensor<64x1xi32, #blocked1> loc(#loc32)
    %87 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %88 = tt.addptr %87, %86 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc33)
    %89 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc34)
    %90 = tt.broadcast %88 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %91 = tt.broadcast %89 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc35)
    %92 = tt.addptr %90, %91 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
    %93 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc36)
    %94 = arith.cmpi slt, %84, %93 : tensor<64x1xi32, #blocked1> loc(#loc36)
    %95 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %96 = arith.cmpi slt, %89, %95 : tensor<1x64xi32, #blocked1> loc(#loc37)
    %97 = tt.broadcast %94 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %98 = tt.broadcast %96 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %99 = arith.andi %97, %98 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %100 = ttg.convert_layout %92 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %101 = ttg.convert_layout %99 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %100, %83, %101 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc23)
    %36 = arith.cmpi slt, %15, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %37 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %38 = tt.broadcast %37 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %39 = tt.addptr %22, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %40 = tt.expand_dims %36 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %41 = tt.broadcast %40 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %42 = arith.andi %25, %41 : tensor<64x32xi1, #blocked> loc(#loc16)
    %43 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %42 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = tt.load %39, %44, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %46 = tt.addptr %31, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %47 = arith.andi %34, %41 : tensor<64x32xi1, #blocked> loc(#loc22)
    %48 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %48, %47 : tensor<64x32xi1, #blocked> loc(#loc23)
    %50 = tt.load %46, %49, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc23)
    %52 = arith.addi %15, %cst : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %53 = arith.cmpi slt, %52, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %54 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %56 = tt.addptr %22, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %57 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %58 = tt.broadcast %57 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %59 = arith.andi %25, %58 : tensor<64x32xi1, #blocked> loc(#loc16)
    %60 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %61 = arith.andi %60, %59 : tensor<64x32xi1, #blocked> loc(#loc23)
    %62 = tt.load %56, %61, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %63 = tt.addptr %31, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %64 = arith.andi %34, %58 : tensor<64x32xi1, #blocked> loc(#loc22)
    %65 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %66 = arith.andi %65, %64 : tensor<64x32xi1, #blocked> loc(#loc23)
    %67 = tt.load %63, %66, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %68 = arith.subi %arg5, %c64_i32 : i32 loc(#loc23)
    %69:6 = scf.for %arg9 = %c0_i32 to %68 step %c32_i32 iter_args(%arg10 = %cst_1, %arg11 = %c-1_i32, %arg12 = %50, %arg13 = %67, %arg14 = %45, %arg15 = %62) -> (tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %102 = arith.addi %arg11, %c1_i32 : i32 loc(#loc23)
      %103 = arith.cmpi slt, %102, %c2_i32 : i32 loc(#loc23)
      %104 = arith.select %103, %102, %c0_i32 : i32 loc(#loc23)
      %105 = arith.addi %arg9, %c64_i32 : i32 loc(#loc23)
      %106 = tt.splat %105 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %107 = arith.addi %106, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %108 = arith.cmpi slt, %107, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %109 = tt.expand_dims %107 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
      %110 = tt.broadcast %109 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %111 = tt.addptr %22, %110 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %112 = tt.expand_dims %108 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
      %113 = tt.broadcast %112 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %114 = arith.andi %25, %113 : tensor<64x32xi1, #blocked> loc(#loc16)
      %115 = tt.load %111, %114, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
      %116 = tt.addptr %31, %110 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %117 = arith.andi %34, %113 : tensor<64x32xi1, #blocked> loc(#loc22)
      %118 = tt.load %116, %117, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %119 = ttg.convert_layout %arg12 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %120 = tt.trans %119 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %121 = ttg.convert_layout %arg14 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
      %122 = tt.dot %121, %120, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %122, %104, %arg13, %118, %arg15, %115 : tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc23)
    } loc(#loc23)
    %70 = arith.addi %arg5, %c31_i32 : i32 loc(#loc23)
    %71 = arith.divsi %70, %c32_i32 : i32 loc(#loc23)
    %72 = arith.cmpi sge, %71, %c1_i32 : i32 loc(#loc23)
    %73 = arith.cmpi sge, %71, %c2_i32 : i32 loc(#loc23)
    %74 = ttg.convert_layout %69#2 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %75 = tt.trans %74 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %76 = ttg.convert_layout %69#4 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %77 = scf.if %72 -> (tensor<64x64xf32, #mma>) {
      %102 = tt.dot %76, %75, %69#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %102 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %69#0 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %78 = arith.select %72, %77, %69#0 : tensor<64x64xf32, #mma> loc(#loc23)
    %79 = ttg.convert_layout %69#3 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %80 = tt.trans %79 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %81 = ttg.convert_layout %69#5 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %82 = scf.if %73 -> (tensor<64x64xf32, #mma>) {
      %102 = tt.dot %81, %80, %78 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %102 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %78 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %83 = arith.select %73, %82, %78 : tensor<64x64xf32, #mma> loc(#loc23)
    %84 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc31)
    %85 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %86 = arith.muli %84, %85 : tensor<64x1xi32, #blocked1> loc(#loc32)
    %87 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %88 = tt.addptr %87, %86 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc33)
    %89 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc34)
    %90 = tt.broadcast %88 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %91 = tt.broadcast %89 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc35)
    %92 = tt.addptr %90, %91 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
    %93 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc36)
    %94 = arith.cmpi slt, %84, %93 : tensor<64x1xi32, #blocked1> loc(#loc36)
    %95 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %96 = arith.cmpi slt, %89, %95 : tensor<1x64xi32, #blocked1> loc(#loc37)
    %97 = tt.broadcast %94 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %98 = tt.broadcast %96 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %99 = arith.andi %97, %98 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %100 = ttg.convert_layout %92 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %101 = ttg.convert_layout %99 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %100, %83, %101 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [0, 16]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0], [0, 8]], warp = [[32, 0], [0, 0]], block = []}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc23)
    %36 = arith.cmpi slt, %15, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %37 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %38 = tt.broadcast %37 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %39 = tt.addptr %22, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %40 = tt.expand_dims %36 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %41 = tt.broadcast %40 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %42 = arith.andi %25, %41 : tensor<64x32xi1, #blocked> loc(#loc16)
    %43 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %42 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = tt.load %39, %44, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %46 = tt.addptr %31, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %47 = arith.andi %34, %41 : tensor<64x32xi1, #blocked> loc(#loc22)
    %48 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %48, %47 : tensor<64x32xi1, #blocked> loc(#loc23)
    %50 = tt.load %46, %49, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc23)
    %52 = arith.addi %15, %cst : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %53 = arith.cmpi slt, %52, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %54 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %56 = tt.addptr %22, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %57 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %58 = tt.broadcast %57 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %59 = arith.andi %25, %58 : tensor<64x32xi1, #blocked> loc(#loc16)
    %60 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %61 = arith.andi %60, %59 : tensor<64x32xi1, #blocked> loc(#loc23)
    %62 = tt.load %56, %61, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %63 = tt.addptr %31, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %64 = arith.andi %34, %58 : tensor<64x32xi1, #blocked> loc(#loc22)
    %65 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %66 = arith.andi %65, %64 : tensor<64x32xi1, #blocked> loc(#loc23)
    %67 = tt.load %63, %66, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %68 = arith.subi %arg5, %c64_i32 : i32 loc(#loc23)
    %69:6 = scf.for %arg9 = %c0_i32 to %68 step %c32_i32 iter_args(%arg10 = %cst_1, %arg11 = %c-1_i32, %arg12 = %50, %arg13 = %67, %arg14 = %45, %arg15 = %62) -> (tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %102 = arith.addi %arg11, %c1_i32 : i32 loc(#loc23)
      %103 = arith.cmpi slt, %102, %c2_i32 : i32 loc(#loc23)
      %104 = arith.select %103, %102, %c0_i32 : i32 loc(#loc23)
      %105 = arith.addi %arg9, %c64_i32 : i32 loc(#loc23)
      %106 = tt.splat %105 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %107 = arith.addi %106, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %108 = arith.cmpi slt, %107, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %109 = tt.expand_dims %107 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
      %110 = tt.broadcast %109 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %111 = tt.addptr %22, %110 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %112 = tt.expand_dims %108 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
      %113 = tt.broadcast %112 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %114 = arith.andi %25, %113 : tensor<64x32xi1, #blocked> loc(#loc16)
      %115 = tt.load %111, %114, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
      %116 = tt.addptr %31, %110 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %117 = arith.andi %34, %113 : tensor<64x32xi1, #blocked> loc(#loc22)
      %118 = tt.load %116, %117, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %119 = ttg.convert_layout %arg12 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
      %120 = tt.trans %119 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
      %121 = ttg.convert_layout %arg14 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
      %122 = tt.dot %121, %120, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %122, %104, %arg13, %118, %arg15, %115 : tensor<64x64xf32, #mma>, i32, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc23)
    } loc(#loc23)
    %70 = arith.addi %arg5, %c31_i32 : i32 loc(#loc23)
    %71 = arith.divsi %70, %c32_i32 : i32 loc(#loc23)
    %72 = arith.cmpi sge, %71, %c1_i32 : i32 loc(#loc23)
    %73 = arith.cmpi sge, %71, %c2_i32 : i32 loc(#loc23)
    %74 = ttg.convert_layout %69#2 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %75 = tt.trans %74 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %76 = ttg.convert_layout %69#4 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %77 = scf.if %72 -> (tensor<64x64xf32, #mma>) {
      %102 = tt.dot %76, %75, %69#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %102 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %69#0 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %78 = arith.select %72, %77, %69#0 : tensor<64x64xf32, #mma> loc(#loc23)
    %79 = ttg.convert_layout %69#3 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #linear> loc(#loc29)
    %80 = tt.trans %79 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #linear> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc30)
    %81 = ttg.convert_layout %69#5 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %82 = scf.if %73 -> (tensor<64x64xf32, #mma>) {
      %102 = tt.dot %81, %80, %78 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc29)
      scf.yield %102 : tensor<64x64xf32, #mma> loc(#loc29)
    } else {
      scf.yield %78 : tensor<64x64xf32, #mma> loc(#loc29)
    } loc(#loc29)
    %83 = arith.select %73, %82, %78 : tensor<64x64xf32, #mma> loc(#loc23)
    %84 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc31)
    %85 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc32)
    %86 = arith.muli %84, %85 : tensor<64x1xi32, #blocked1> loc(#loc32)
    %87 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %88 = tt.addptr %87, %86 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc33)
    %89 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc34)
    %90 = tt.broadcast %88 : tensor<64x1x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %91 = tt.broadcast %89 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc35)
    %92 = tt.addptr %90, %91 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc35)
    %93 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc36)
    %94 = arith.cmpi slt, %84, %93 : tensor<64x1xi32, #blocked1> loc(#loc36)
    %95 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc37)
    %96 = arith.cmpi slt, %89, %95 : tensor<1x64xi32, #blocked1> loc(#loc37)
    %97 = tt.broadcast %94 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %98 = tt.broadcast %96 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc38)
    %99 = arith.andi %97, %98 : tensor<64x64xi1, #blocked1> loc(#loc38)
    %100 = ttg.convert_layout %92 : tensor<64x64x!tt.ptr<f32>, #blocked1> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %101 = ttg.convert_layout %99 : tensor<64x64xi1, #blocked1> -> tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %100, %83, %101 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc23)
    %36 = arith.cmpi slt, %15, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %37 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %38 = tt.broadcast %37 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %39 = tt.addptr %22, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %40 = tt.expand_dims %36 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %41 = tt.broadcast %40 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %42 = arith.andi %25, %41 : tensor<64x32xi1, #blocked> loc(#loc16)
    %43 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %42 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = tt.load %39, %44, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %46 = tt.addptr %31, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %47 = arith.andi %34, %41 : tensor<64x32xi1, #blocked> loc(#loc22)
    %48 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %48, %47 : tensor<64x32xi1, #blocked> loc(#loc23)
    %50 = tt.load %46, %49, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc23)
    %52 = arith.addi %15, %cst : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %53 = arith.cmpi slt, %52, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %54 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %56 = tt.addptr %22, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %57 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %58 = tt.broadcast %57 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %59 = arith.andi %25, %58 : tensor<64x32xi1, #blocked> loc(#loc16)
    %60 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %61 = arith.andi %60, %59 : tensor<64x32xi1, #blocked> loc(#loc23)
    %62 = tt.load %56, %61, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %63 = tt.addptr %31, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %64 = arith.andi %34, %58 : tensor<64x32xi1, #blocked> loc(#loc22)
    %65 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %66 = arith.andi %65, %64 : tensor<64x32xi1, #blocked> loc(#loc23)
    %67 = tt.load %63, %66, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %68 = arith.subi %arg5, %c64_i32 : i32 loc(#loc23)
    %69:5 = scf.for %arg9 = %c0_i32 to %68 step %c32_i32 iter_args(%arg10 = %cst_1, %arg11 = %50, %arg12 = %67, %arg13 = %45, %arg14 = %62) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %100 = arith.addi %arg9, %c64_i32 : i32 loc(#loc23)
      %101 = tt.splat %100 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %102 = arith.addi %101, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %103 = arith.cmpi slt, %102, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %104 = tt.expand_dims %102 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
      %105 = tt.broadcast %104 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %106 = tt.addptr %22, %105 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %107 = tt.expand_dims %103 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
      %108 = tt.broadcast %107 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %109 = arith.andi %25, %108 : tensor<64x32xi1, #blocked> loc(#loc16)
      %110 = tt.load %106, %109, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
      %111 = tt.addptr %31, %105 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %112 = arith.andi %34, %108 : tensor<64x32xi1, #blocked> loc(#loc22)
      %113 = tt.load %111, %112, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %114 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
      %115 = ttg.convert_layout %114 : tensor<32x64xbf16, #blocked1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
      %116 = ttg.convert_layout %arg13 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
      %117 = tt.dot %116, %115, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %117, %arg12, %113, %arg14, %110 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc23)
    } loc(#loc23)
    %70 = arith.addi %arg5, %c31_i32 : i32 loc(#loc23)
    %71 = arith.divsi %70, %c32_i32 : i32 loc(#loc23)
    %72 = arith.cmpi sge, %71, %c1_i32 : i32 loc(#loc23)
    %73 = arith.cmpi sge, %71, %c2_i32 : i32 loc(#loc23)
    %74 = tt.trans %69#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %75 = ttg.convert_layout %74 : tensor<32x64xbf16, #blocked1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %76 = ttg.convert_layout %69#3 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %77 = scf.if %72 -> (tensor<64x64xf32, #mma>) {
      %100 = tt.dot %76, %75, %69#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %100 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %69#0 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %78 = arith.select %72, %77, %69#0 : tensor<64x64xf32, #mma> loc(#loc23)
    %79 = tt.trans %69#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %80 = ttg.convert_layout %79 : tensor<32x64xbf16, #blocked1> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %81 = ttg.convert_layout %69#4 : tensor<64x32xbf16, #blocked> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %82 = scf.if %73 -> (tensor<64x64xf32, #mma>) {
      %100 = tt.dot %81, %80, %78 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %100 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %78 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %83 = arith.select %73, %82, %78 : tensor<64x64xf32, #mma> loc(#loc23)
    %84 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc31)
    %85 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %86 = arith.muli %84, %85 : tensor<64x1xi32, #mma> loc(#loc32)
    %87 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #mma> loc(#loc33)
    %88 = tt.addptr %87, %86 : tensor<64x1x!tt.ptr<f32>, #mma>, tensor<64x1xi32, #mma> loc(#loc33)
    %89 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc34)
    %90 = tt.broadcast %88 : tensor<64x1x!tt.ptr<f32>, #mma> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %91 = tt.broadcast %89 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc35)
    %92 = tt.addptr %90, %91 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    %93 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc36)
    %94 = arith.cmpi slt, %84, %93 : tensor<64x1xi32, #mma> loc(#loc36)
    %95 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc37)
    %96 = arith.cmpi slt, %89, %95 : tensor<1x64xi32, #mma> loc(#loc37)
    %97 = tt.broadcast %94 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %98 = tt.broadcast %96 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %99 = arith.andi %97, %98 : tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %92, %83, %99 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUReorderInstructions (tritonamdgpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %cst = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c64_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %9 = arith.addi %7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %10 = arith.muli %1, %c64_i32 : i32 loc(#loc7)
    %11 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %12 = tt.splat %10 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %13 = arith.addi %11, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %14 = arith.addi %12, %5 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc8)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %16 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %17 = tt.expand_dims %8 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc11)
    %18 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = arith.muli %17, %18 : tensor<64x1xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc14)
    %23 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc15)
    %24 = arith.cmpi slt, %17, %23 : tensor<64x1xi32, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %26 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %27 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %28 = arith.muli %26, %27 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc19)
    %30 = tt.addptr %29, %28 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc19)
    %31 = tt.broadcast %30 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc20)
    %32 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc21)
    %33 = arith.cmpi slt, %26, %32 : tensor<64x1xi32, #blocked> loc(#loc21)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc22)
    %35 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc23)
    %36 = arith.cmpi slt, %15, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %37 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %38 = tt.broadcast %37 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %39 = tt.addptr %22, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %40 = tt.expand_dims %36 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %41 = tt.broadcast %40 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %42 = arith.andi %25, %41 : tensor<64x32xi1, #blocked> loc(#loc16)
    %43 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %42 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = tt.load %39, %44, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %46 = tt.addptr %31, %38 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %47 = arith.andi %34, %41 : tensor<64x32xi1, #blocked> loc(#loc22)
    %48 = tt.splat %35 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %48, %47 : tensor<64x32xi1, #blocked> loc(#loc23)
    %50 = tt.load %46, %49, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc23)
    %52 = arith.addi %15, %cst : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %53 = arith.cmpi slt, %52, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %54 = tt.expand_dims %52 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
    %56 = tt.addptr %22, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
    %57 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
    %58 = tt.broadcast %57 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
    %59 = arith.andi %25, %58 : tensor<64x32xi1, #blocked> loc(#loc16)
    %60 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %61 = arith.andi %60, %59 : tensor<64x32xi1, #blocked> loc(#loc23)
    %62 = tt.load %56, %61, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
    %63 = tt.addptr %31, %55 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
    %64 = arith.andi %34, %58 : tensor<64x32xi1, #blocked> loc(#loc22)
    %65 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc23)
    %66 = arith.andi %65, %64 : tensor<64x32xi1, #blocked> loc(#loc23)
    %67 = tt.load %63, %66, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %68 = arith.subi %arg5, %c64_i32 : i32 loc(#loc23)
    %69:5 = scf.for %arg9 = %c0_i32 to %68 step %c32_i32 iter_args(%arg10 = %cst_1, %arg11 = %50, %arg12 = %67, %arg13 = %45, %arg14 = %62) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %104 = arith.addi %arg9, %c64_i32 : i32 loc(#loc23)
      %105 = tt.splat %104 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %106 = arith.addi %105, %15 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %107 = arith.cmpi slt, %106, %16 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
      %108 = tt.expand_dims %106 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
      %109 = tt.broadcast %108 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc14)
      %110 = tt.addptr %22, %109 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc14)
      %111 = tt.expand_dims %107 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc25)
      %112 = tt.broadcast %111 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc16)
      %113 = arith.andi %25, %112 : tensor<64x32xi1, #blocked> loc(#loc16)
      %114 = tt.load %110, %113, %cst_0 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc26)
      %115 = tt.addptr %31, %109 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc20)
      %116 = arith.andi %34, %112 : tensor<64x32xi1, #blocked> loc(#loc22)
      %117 = tt.load %115, %116, %cst_0 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %118 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
      %119 = ttg.local_alloc %118 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
      %120 = ttg.local_load %119 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
      %121 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc26)
      %122 = ttg.local_load %121 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
      %123 = tt.dot %122, %120, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %123, %arg12, %117, %arg14, %114 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc23)
    } loc(#loc23)
    %70 = arith.addi %arg5, %c31_i32 : i32 loc(#loc23)
    %71 = arith.divsi %70, %c32_i32 : i32 loc(#loc23)
    %72 = arith.cmpi sge, %71, %c1_i32 : i32 loc(#loc23)
    %73 = arith.cmpi sge, %71, %c2_i32 : i32 loc(#loc23)
    %74 = tt.trans %69#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %75 = ttg.local_alloc %74 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
    %76 = ttg.local_load %75 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %77 = ttg.local_alloc %69#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc26)
    %78 = ttg.local_load %77 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %79 = scf.if %72 -> (tensor<64x64xf32, #mma>) {
      %104 = tt.dot %78, %76, %69#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %104 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %69#0 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %80 = arith.select %72, %79, %69#0 : tensor<64x64xf32, #mma> loc(#loc23)
    %81 = tt.trans %69#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %82 = ttg.local_alloc %81 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
    %83 = ttg.local_load %82 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %84 = ttg.local_alloc %69#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc26)
    %85 = ttg.local_load %84 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc26)
    %86 = scf.if %73 -> (tensor<64x64xf32, #mma>) {
      %104 = tt.dot %85, %83, %80 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %104 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %80 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %87 = arith.select %73, %86, %80 : tensor<64x64xf32, #mma> loc(#loc23)
    %88 = tt.expand_dims %9 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc31)
    %89 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %90 = arith.muli %88, %89 : tensor<64x1xi32, #mma> loc(#loc32)
    %91 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #mma> loc(#loc33)
    %92 = tt.addptr %91, %90 : tensor<64x1x!tt.ptr<f32>, #mma>, tensor<64x1xi32, #mma> loc(#loc33)
    %93 = tt.expand_dims %14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc34)
    %94 = tt.broadcast %92 : tensor<64x1x!tt.ptr<f32>, #mma> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %95 = tt.broadcast %93 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc35)
    %96 = tt.addptr %94, %95 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    %97 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc36)
    %98 = arith.cmpi slt, %88, %97 : tensor<64x1xi32, #mma> loc(#loc36)
    %99 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc37)
    %100 = arith.cmpi slt, %93, %99 : tensor<1x64xi32, #mma> loc(#loc37)
    %101 = tt.broadcast %98 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %102 = tt.broadcast %100 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %103 = arith.andi %101, %102 : tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %96, %87, %103 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUCanonicalizePointers (tritonamdgpu-canonicalize-pointers) ('tt.func' operation: @matmul_abt_kernel) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %0 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc1)
    %1 = tt.get_program_id x : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.muli %1, %c64_i32 : i32 loc(#loc4)
    %3 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = arith.addi %3, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %6 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc8)
    %8 = arith.muli %6, %7 : tensor<64x1xi32, #blocked> loc(#loc8)
    %9 = tt.addptr %0, %8 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc1)
    %10 = tt.broadcast %9 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc9)
    %11 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %12 = tt.expand_dims %11 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc11)
    %13 = tt.broadcast %12 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %14 = tt.addptr %10, %13 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %15 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc12)
    %16 = tt.splat %15 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %17 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc13)
    %18 = arith.cmpi slt, %6, %17 : tensor<64x1xi32, #blocked> loc(#loc13)
    %19 = tt.broadcast %18 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
    %20 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %21 = arith.cmpi slt, %11, %20 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %22 = tt.expand_dims %21 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc16)
    %23 = tt.broadcast %22 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
    %24 = arith.andi %19, %23 : tensor<64x32xi1, #blocked> loc(#loc14)
    %25 = arith.andi %16, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc3)
    %26 = tt.load %14, %25, %cst {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %27 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<64x1x!tt.ptr<bf16>, #blocked> loc(#loc18)
    %28 = tt.get_program_id y : i32 loc(#loc19)
    %29 = arith.muli %28, %c64_i32 : i32 loc(#loc20)
    %30 = tt.splat %29 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %31 = arith.addi %30, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc22)
    %33 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc23)
    %34 = arith.muli %32, %33 : tensor<64x1xi32, #blocked> loc(#loc23)
    %35 = tt.addptr %27, %34 : tensor<64x1x!tt.ptr<bf16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc18)
    %36 = tt.broadcast %35 : tensor<64x1x!tt.ptr<bf16>, #blocked> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %37 = tt.addptr %36, %13 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %38 = tt.splat %15 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %39 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc25)
    %40 = arith.cmpi slt, %32, %39 : tensor<64x1xi32, #blocked> loc(#loc25)
    %41 = tt.broadcast %40 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc26)
    %42 = arith.andi %41, %23 : tensor<64x32xi1, #blocked> loc(#loc26)
    %43 = arith.andi %38, %42 : tensor<64x32xi1, #blocked> loc(#loc12)
    %44 = tt.load %37, %43, %cst {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %45 = arith.addi %11, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %46 = tt.expand_dims %45 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc11)
    %47 = tt.broadcast %46 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %48 = tt.addptr %10, %47 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc9)
    %c32_i32 = arith.constant 32 : i32 loc(#loc3)
    %49 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc12)
    %50 = tt.splat %49 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %51 = arith.cmpi slt, %45, %20 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %52 = tt.expand_dims %51 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc16)
    %53 = tt.broadcast %52 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
    %54 = arith.andi %19, %53 : tensor<64x32xi1, #blocked> loc(#loc14)
    %55 = arith.andi %50, %54 : tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = tt.load %48, %55, %cst {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %57 = tt.addptr %36, %47 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %58 = tt.splat %49 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %59 = arith.andi %41, %53 : tensor<64x32xi1, #blocked> loc(#loc26)
    %60 = arith.andi %58, %59 : tensor<64x32xi1, #blocked> loc(#loc12)
    %61 = tt.load %57, %60, %cst {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %c31_i32 = arith.constant 31 : i32 loc(#loc3)
    %c2_i32 = arith.constant 2 : i32 loc(#loc3)
    %c1_i32 = arith.constant 1 : i32 loc(#loc3)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc3)
    %62 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %63 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc6)
    %64 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %65 = arith.addi %64, %62 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %66 = tt.splat %29 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc21)
    %67 = arith.addi %66, %63 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc21)
    %68 = arith.subi %arg5, %c64_i32 : i32 loc(#loc12)
    %69:5 = scf.for %arg9 = %c0_i32 to %68 step %c32_i32 iter_args(%arg10 = %cst_1, %arg11 = %44, %arg12 = %61, %arg13 = %26, %arg14 = %56) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %104 = arith.addi %arg9, %c64_i32 : i32 loc(#loc12)
      %105 = tt.splat %104 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %106 = arith.addi %105, %11 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %107 = tt.expand_dims %106 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc11)
      %108 = tt.broadcast %107 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
      %109 = tt.addptr %10, %108 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc9)
      %110 = arith.cmpi slt, %106, %20 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
      %111 = tt.expand_dims %110 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc16)
      %112 = tt.broadcast %111 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
      %113 = arith.andi %19, %112 : tensor<64x32xi1, #blocked> loc(#loc14)
      %114 = tt.load %109, %113, %cst {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
      %115 = tt.addptr %36, %108 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %116 = arith.andi %41, %112 : tensor<64x32xi1, #blocked> loc(#loc26)
      %117 = tt.load %115, %116, %cst {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %118 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
      %119 = ttg.local_alloc %118 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
      %120 = ttg.local_load %119 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
      %121 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc17)
      %122 = ttg.local_load %121 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc17)
      %123 = tt.dot %122, %120, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %123, %arg12, %117, %arg14, %114 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc12)
    } loc(#loc12)
    %70 = tt.trans %69#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %71 = tt.trans %69#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %72 = arith.addi %arg5, %c31_i32 : i32 loc(#loc12)
    %73 = arith.divsi %72, %c32_i32 : i32 loc(#loc12)
    %74 = arith.cmpi sge, %73, %c1_i32 : i32 loc(#loc12)
    %75 = arith.cmpi sge, %73, %c2_i32 : i32 loc(#loc12)
    %76 = ttg.local_alloc %71 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
    %77 = ttg.local_load %76 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %78 = ttg.local_alloc %69#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc17)
    %79 = ttg.local_load %78 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc17)
    %80 = scf.if %74 -> (tensor<64x64xf32, #mma>) {
      %104 = tt.dot %79, %77, %69#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %104 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %69#0 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %81 = arith.select %74, %80, %69#0 : tensor<64x64xf32, #mma> loc(#loc12)
    %82 = ttg.local_alloc %70 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
    %83 = ttg.local_load %82 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %84 = ttg.local_alloc %69#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc17)
    %85 = ttg.local_load %84 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc17)
    %86 = scf.if %75 -> (tensor<64x64xf32, #mma>) {
      %104 = tt.dot %85, %83, %81 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %104 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %81 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %87 = arith.select %75, %86, %81 : tensor<64x64xf32, #mma> loc(#loc12)
    %88 = tt.expand_dims %65 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc31)
    %89 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %90 = arith.muli %88, %89 : tensor<64x1xi32, #mma> loc(#loc32)
    %91 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #mma> loc(#loc33)
    %92 = tt.addptr %91, %90 : tensor<64x1x!tt.ptr<f32>, #mma>, tensor<64x1xi32, #mma> loc(#loc33)
    %93 = tt.expand_dims %67 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc34)
    %94 = tt.broadcast %92 : tensor<64x1x!tt.ptr<f32>, #mma> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %95 = tt.broadcast %93 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc35)
    %96 = tt.addptr %94, %95 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    %97 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc36)
    %98 = arith.cmpi slt, %88, %97 : tensor<64x1xi32, #mma> loc(#loc36)
    %99 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc37)
    %100 = arith.cmpi slt, %93, %99 : tensor<1x64xi32, #mma> loc(#loc37)
    %101 = tt.broadcast %98 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %102 = tt.broadcast %100 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %103 = arith.andi %101, %102 : tensor<64x64xi1, #mma> loc(#loc38)
    tt.store %96, %87, %103 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc(unknown)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc)
    %0 = tt.splat %c0_i32_0 : i32 -> tensor<64x1xi32, #blocked> loc(#loc1)
    %1 = tt.get_program_id x : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %2 = arith.muli %1, %c64_i32 : i32 loc(#loc4)
    %3 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = arith.addi %3, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %6 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc8)
    %8 = arith.muli %6, %7 : tensor<64x1xi32, #blocked> loc(#loc8)
    %cst = arith.constant dense<0> : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc1)
    %9 = arith.addi %2, %c0_i32_2 : i32 loc(#loc1)
    %10 = arith.addi %cst, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc1)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<64x1xi32, #blocked> loc(#loc1)
    %12 = arith.muli %9, %arg6 : i32 loc(#loc1)
    %13 = tt.splat %9 : i32 -> tensor<64x1xi32, #blocked> loc(#loc1)
    %14 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc1)
    %15 = arith.muli %11, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc1)
    %16 = arith.muli %13, %cst_3 : tensor<64x1xi32, #blocked> loc(#loc1)
    %17 = arith.muli %11, %14 : tensor<64x1xi32, #blocked> loc(#loc1)
    %18 = arith.addi %15, %16 : tensor<64x1xi32, #blocked> loc(#loc1)
    %19 = arith.addi %18, %17 : tensor<64x1xi32, #blocked> loc(#loc1)
    %20 = tt.addptr %arg1, %12 : !tt.ptr<bf16>, i32 loc(#loc1)
    %21 = arith.addi %19, %0 : tensor<64x1xi32, #blocked> loc(#loc1)
    %22 = tt.broadcast %21 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %23 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc10)
    %24 = tt.expand_dims %23 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc11)
    %25 = tt.broadcast %24 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %c0_i32_4 = arith.constant 0 : i32 loc(#loc9)
    %26 = tt.expand_dims %23 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc9)
    %27 = tt.broadcast %26 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %28 = tt.addptr %20, %c0_i32_4 : !tt.ptr<bf16>, i32 loc(#loc9)
    %29 = arith.addi %27, %22 : tensor<64x32xi32, #blocked> loc(#loc9)
    %c0_i32_5 = arith.constant 0 : i32 loc(#loc3)
    %30 = arith.cmpi sgt, %arg5, %c0_i32_5 : i32 loc(#loc12)
    %31 = tt.splat %30 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %32 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc13)
    %33 = arith.cmpi slt, %6, %32 : tensor<64x1xi32, #blocked> loc(#loc13)
    %34 = tt.broadcast %33 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
    %35 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %36 = arith.cmpi slt, %23, %35 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %37 = tt.expand_dims %36 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc16)
    %38 = tt.broadcast %37 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
    %39 = arith.andi %34, %38 : tensor<64x32xi1, #blocked> loc(#loc14)
    %40 = arith.andi %31, %39 : tensor<64x32xi1, #blocked> loc(#loc12)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc3)
    %41 = tt.splat %28 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %42 = tt.addptr %41, %29 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc17)
    %43 = tt.load %42, %40, %cst_6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %44 = tt.splat %c0_i32_1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %45 = tt.get_program_id y : i32 loc(#loc19)
    %46 = arith.muli %45, %c64_i32 : i32 loc(#loc20)
    %47 = tt.splat %46 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %48 = arith.addi %47, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %49 = tt.expand_dims %48 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc22)
    %50 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc23)
    %51 = arith.muli %49, %50 : tensor<64x1xi32, #blocked> loc(#loc23)
    %cst_7 = arith.constant dense<0> : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %c0_i32_8 = arith.constant 0 : i32 loc(#loc18)
    %52 = arith.addi %46, %c0_i32_8 : i32 loc(#loc18)
    %53 = arith.addi %cst_7, %4 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %54 = tt.expand_dims %53 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc18)
    %cst_9 = arith.constant dense<0> : tensor<64x1xi32, #blocked> loc(#loc18)
    %55 = arith.muli %52, %arg7 : i32 loc(#loc18)
    %56 = tt.splat %52 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %57 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %58 = arith.muli %54, %cst_9 : tensor<64x1xi32, #blocked> loc(#loc18)
    %59 = arith.muli %56, %cst_9 : tensor<64x1xi32, #blocked> loc(#loc18)
    %60 = arith.muli %54, %57 : tensor<64x1xi32, #blocked> loc(#loc18)
    %61 = arith.addi %58, %59 : tensor<64x1xi32, #blocked> loc(#loc18)
    %62 = arith.addi %61, %60 : tensor<64x1xi32, #blocked> loc(#loc18)
    %63 = tt.addptr %arg2, %55 : !tt.ptr<bf16>, i32 loc(#loc18)
    %64 = arith.addi %62, %44 : tensor<64x1xi32, #blocked> loc(#loc18)
    %65 = tt.broadcast %64 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc24)
    %c0_i32_10 = arith.constant 0 : i32 loc(#loc24)
    %66 = tt.expand_dims %23 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %67 = tt.broadcast %66 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc24)
    %68 = tt.addptr %63, %c0_i32_10 : !tt.ptr<bf16>, i32 loc(#loc24)
    %69 = arith.addi %67, %65 : tensor<64x32xi32, #blocked> loc(#loc24)
    %70 = tt.splat %30 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %71 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc25)
    %72 = arith.cmpi slt, %49, %71 : tensor<64x1xi32, #blocked> loc(#loc25)
    %73 = tt.broadcast %72 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc26)
    %74 = arith.andi %73, %38 : tensor<64x32xi1, #blocked> loc(#loc26)
    %75 = arith.andi %70, %74 : tensor<64x32xi1, #blocked> loc(#loc12)
    %76 = tt.splat %68 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %77 = tt.addptr %76, %69 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc27)
    %78 = tt.load %77, %75, %cst_6 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %cst_11 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %79 = arith.addi %23, %cst_11 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
    %80 = tt.expand_dims %79 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc11)
    %81 = tt.broadcast %80 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %c0_i32_12 = arith.constant 0 : i32 loc(#loc9)
    %c32_i32 = arith.constant 32 : i32 loc(#loc9)
    %cst_13 = arith.constant dense<0> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %82 = arith.addi %c0_i32_12, %c32_i32 : i32 loc(#loc9)
    %83 = arith.addi %23, %cst_13 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %84 = tt.expand_dims %83 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc9)
    %85 = tt.broadcast %84 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
    %86 = tt.addptr %20, %82 : !tt.ptr<bf16>, i32 loc(#loc9)
    %87 = arith.addi %85, %22 : tensor<64x32xi32, #blocked> loc(#loc9)
    %c32_i32_14 = arith.constant 32 : i32 loc(#loc3)
    %88 = arith.cmpi sgt, %arg5, %c32_i32_14 : i32 loc(#loc12)
    %89 = tt.splat %88 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %90 = arith.cmpi slt, %79, %35 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %91 = tt.expand_dims %90 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc16)
    %92 = tt.broadcast %91 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
    %93 = arith.andi %34, %92 : tensor<64x32xi1, #blocked> loc(#loc14)
    %94 = arith.andi %89, %93 : tensor<64x32xi1, #blocked> loc(#loc12)
    %95 = tt.splat %86 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %96 = tt.addptr %95, %87 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc17)
    %97 = tt.load %96, %94, %cst_6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
    %c0_i32_15 = arith.constant 0 : i32 loc(#loc24)
    %c32_i32_16 = arith.constant 32 : i32 loc(#loc24)
    %cst_17 = arith.constant dense<0> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %98 = arith.addi %c0_i32_15, %c32_i32_16 : i32 loc(#loc24)
    %99 = arith.addi %23, %cst_17 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
    %100 = tt.expand_dims %99 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
    %101 = tt.broadcast %100 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc24)
    %102 = tt.addptr %63, %98 : !tt.ptr<bf16>, i32 loc(#loc24)
    %103 = arith.addi %101, %65 : tensor<64x32xi32, #blocked> loc(#loc24)
    %104 = tt.splat %88 : i1 -> tensor<64x32xi1, #blocked> loc(#loc12)
    %105 = arith.andi %73, %92 : tensor<64x32xi1, #blocked> loc(#loc26)
    %106 = arith.andi %104, %105 : tensor<64x32xi1, #blocked> loc(#loc12)
    %107 = tt.splat %102 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %108 = tt.addptr %107, %103 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc27)
    %109 = tt.load %108, %106, %cst_6 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
    %c31_i32 = arith.constant 31 : i32 loc(#loc3)
    %c2_i32 = arith.constant 2 : i32 loc(#loc3)
    %c1_i32 = arith.constant 1 : i32 loc(#loc3)
    %cst_18 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc3)
    %110 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %111 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc6)
    %112 = tt.splat %2 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %113 = arith.addi %112, %110 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %114 = tt.splat %46 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc21)
    %115 = arith.addi %114, %111 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc21)
    %116 = arith.subi %arg5, %c64_i32 : i32 loc(#loc12)
    %117:5 = scf.for %arg9 = %c0_i32_5 to %116 step %c32_i32_14 iter_args(%arg10 = %cst_18, %arg11 = %78, %arg12 = %109, %arg13 = %43, %arg14 = %97) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %171 = arith.addi %arg9, %c64_i32 : i32 loc(#loc12)
      %172 = tt.splat %171 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %173 = arith.addi %172, %23 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc28)
      %174 = tt.expand_dims %173 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc11)
      %175 = tt.broadcast %174 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
      %cst_24 = arith.constant dense<0> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
      %c0_i32_25 = arith.constant 0 : i32 loc(#loc9)
      %176 = arith.addi %171, %c0_i32_25 : i32 loc(#loc9)
      %177 = arith.addi %cst_24, %23 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
      %178 = tt.expand_dims %177 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc9)
      %179 = tt.broadcast %178 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc9)
      %180 = tt.addptr %20, %176 : !tt.ptr<bf16>, i32 loc(#loc9)
      %181 = arith.addi %179, %22 : tensor<64x32xi32, #blocked> loc(#loc9)
      %182 = arith.cmpi slt, %173, %35 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
      %183 = tt.expand_dims %182 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc16)
      %184 = tt.broadcast %183 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc14)
      %185 = arith.andi %34, %184 : tensor<64x32xi1, #blocked> loc(#loc14)
      %186 = tt.splat %180 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
      %187 = tt.addptr %186, %181 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc17)
      %188 = tt.load %187, %185, %cst_6 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc17)
      %cst_26 = arith.constant dense<0> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %c0_i32_27 = arith.constant 0 : i32 loc(#loc24)
      %189 = arith.addi %171, %c0_i32_27 : i32 loc(#loc24)
      %190 = arith.addi %cst_26, %23 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc24)
      %191 = tt.expand_dims %190 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc24)
      %192 = tt.broadcast %191 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc24)
      %193 = tt.addptr %63, %189 : !tt.ptr<bf16>, i32 loc(#loc24)
      %194 = arith.addi %192, %65 : tensor<64x32xi32, #blocked> loc(#loc24)
      %195 = arith.andi %73, %184 : tensor<64x32xi1, #blocked> loc(#loc26)
      %196 = tt.splat %193 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %197 = tt.addptr %196, %194 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc27)
      %198 = tt.load %197, %195, %cst_6 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc27)
      %199 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
      %200 = ttg.local_alloc %199 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
      %201 = ttg.local_load %200 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
      %202 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc17)
      %203 = ttg.local_load %202 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc17)
      %204 = tt.dot %203, %201, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %204, %arg12, %198, %arg14, %188 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc12)
    } loc(#loc12)
    %118 = tt.trans %117#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %119 = tt.trans %117#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc29)
    %120 = arith.addi %arg5, %c31_i32 : i32 loc(#loc12)
    %121 = arith.divsi %120, %c32_i32_14 : i32 loc(#loc12)
    %122 = arith.cmpi sge, %121, %c1_i32 : i32 loc(#loc12)
    %123 = arith.cmpi sge, %121, %c2_i32 : i32 loc(#loc12)
    %124 = ttg.local_alloc %119 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
    %125 = ttg.local_load %124 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %126 = ttg.local_alloc %117#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc17)
    %127 = ttg.local_load %126 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc17)
    %128 = scf.if %122 -> (tensor<64x64xf32, #mma>) {
      %171 = tt.dot %127, %125, %117#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %171 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %117#0 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %129 = arith.select %122, %128, %117#0 : tensor<64x64xf32, #mma> loc(#loc12)
    %130 = ttg.local_alloc %118 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc29)
    %131 = ttg.local_load %130 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc29)
    %132 = ttg.local_alloc %117#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc17)
    %133 = ttg.local_load %132 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc17)
    %134 = scf.if %123 -> (tensor<64x64xf32, #mma>) {
      %171 = tt.dot %133, %131, %129 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc30)
      scf.yield %171 : tensor<64x64xf32, #mma> loc(#loc30)
    } else {
      scf.yield %129 : tensor<64x64xf32, #mma> loc(#loc30)
    } loc(#loc30)
    %135 = arith.select %123, %134, %129 : tensor<64x64xf32, #mma> loc(#loc12)
    %136 = tt.expand_dims %113 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc31)
    %137 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %138 = arith.muli %136, %137 : tensor<64x1xi32, #mma> loc(#loc32)
    %139 = tt.splat %c0_i32 : i32 -> tensor<64x1xi32, #mma> loc(#loc33)
    %cst_19 = arith.constant dense<0> : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %c0_i32_20 = arith.constant 0 : i32 loc(#loc33)
    %140 = arith.addi %2, %c0_i32_20 : i32 loc(#loc33)
    %141 = arith.addi %cst_19, %110 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc33)
    %142 = tt.expand_dims %141 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc33)
    %cst_21 = arith.constant dense<0> : tensor<64x1xi32, #mma> loc(#loc33)
    %143 = arith.muli %140, %arg8 : i32 loc(#loc33)
    %144 = tt.splat %140 : i32 -> tensor<64x1xi32, #mma> loc(#loc33)
    %145 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc33)
    %146 = arith.muli %142, %cst_21 : tensor<64x1xi32, #mma> loc(#loc33)
    %147 = arith.muli %144, %cst_21 : tensor<64x1xi32, #mma> loc(#loc33)
    %148 = arith.muli %142, %145 : tensor<64x1xi32, #mma> loc(#loc33)
    %149 = arith.addi %146, %147 : tensor<64x1xi32, #mma> loc(#loc33)
    %150 = arith.addi %149, %148 : tensor<64x1xi32, #mma> loc(#loc33)
    %151 = tt.addptr %arg0, %143 : !tt.ptr<f32>, i32 loc(#loc33)
    %152 = arith.addi %150, %139 : tensor<64x1xi32, #mma> loc(#loc33)
    %153 = tt.expand_dims %115 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc34)
    %154 = tt.broadcast %152 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc35)
    %155 = tt.broadcast %153 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc35)
    %cst_22 = arith.constant dense<0> : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc35)
    %c0_i32_23 = arith.constant 0 : i32 loc(#loc35)
    %156 = arith.addi %46, %c0_i32_23 : i32 loc(#loc35)
    %157 = arith.addi %cst_22, %111 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc35)
    %158 = tt.expand_dims %157 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc35)
    %159 = tt.broadcast %158 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc35)
    %160 = tt.addptr %151, %156 : !tt.ptr<f32>, i32 loc(#loc35)
    %161 = arith.addi %159, %154 : tensor<64x64xi32, #mma> loc(#loc35)
    %162 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc36)
    %163 = arith.cmpi slt, %136, %162 : tensor<64x1xi32, #mma> loc(#loc36)
    %164 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc37)
    %165 = arith.cmpi slt, %153, %164 : tensor<1x64xi32, #mma> loc(#loc37)
    %166 = tt.broadcast %163 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %167 = tt.broadcast %165 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc38)
    %168 = arith.andi %166, %167 : tensor<64x64xi1, #mma> loc(#loc38)
    %169 = tt.splat %160 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    %170 = tt.addptr %169, %161 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc39)
    tt.store %170, %135, %168 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc(unknown)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:38)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:34)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:38)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:35)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc37 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc38 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc39 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc40 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDGPUConvertToBufferOps (tritonamdgpu-convert-buffer-ops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc20)
    %36 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %37 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = arith.muli %35, %37 : tensor<64x1xi32, #blocked> loc(#loc20)
    %39 = tt.addptr %arg2, %36 : !tt.ptr<bf16>, i32 loc(#loc20)
    %40 = tt.broadcast %38 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %42 = tt.broadcast %41 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %43 = arith.addi %42, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %44 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %45 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %46 = arith.cmpi slt, %34, %45 : tensor<64x1xi32, #blocked> loc(#loc22)
    %47 = tt.broadcast %46 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %48 = arith.andi %47, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %44, %48 : tensor<64x32xi1, #blocked> loc(#loc10)
    %50 = tt.splat %39 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %51 = tt.addptr %50, %43 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %52 = tt.load %51, %49, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %53 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %54 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %56 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %57 = arith.addi %55, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %58 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %59 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %60 = arith.cmpi slt, %53, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %61 = tt.expand_dims %60 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %62 = tt.broadcast %61 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %63 = arith.andi %20, %62 : tensor<64x32xi1, #blocked> loc(#loc12)
    %64 = arith.andi %59, %63 : tensor<64x32xi1, #blocked> loc(#loc10)
    %65 = tt.splat %56 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %66 = tt.addptr %65, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %67 = tt.load %66, %64, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %68 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %69 = tt.broadcast %68 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %70 = tt.addptr %39, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %71 = arith.addi %69, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %72 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %73 = arith.andi %47, %62 : tensor<64x32xi1, #blocked> loc(#loc23)
    %74 = arith.andi %72, %73 : tensor<64x32xi1, #blocked> loc(#loc10)
    %75 = tt.splat %70 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %76 = tt.addptr %75, %71 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %77 = tt.load %76, %74, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %78 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %79 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %80 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %81 = arith.addi %80, %78 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %82 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %83 = arith.addi %82, %79 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %84 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %85:5 = scf.for %arg9 = %c0_i32 to %84 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %52, %arg12 = %77, %arg13 = %29, %arg14 = %67) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %125 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %126 = tt.splat %125 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %127 = arith.addi %126, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %128 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
      %129 = tt.broadcast %128 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
      %130 = tt.addptr %10, %125 : !tt.ptr<bf16>, i32 loc(#loc8)
      %131 = arith.addi %129, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
      %132 = arith.cmpi slt, %127, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %133 = tt.expand_dims %132 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %134 = tt.broadcast %133 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %135 = arith.andi %20, %134 : tensor<64x32xi1, #blocked> loc(#loc12)
      %136 = tt.splat %130 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %137 = tt.addptr %136, %131 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %138 = tt.load %137, %135, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %139 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
      %140 = tt.broadcast %139 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
      %141 = tt.addptr %39, %125 : !tt.ptr<bf16>, i32 loc(#loc21)
      %142 = arith.addi %140, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
      %143 = arith.andi %47, %134 : tensor<64x32xi1, #blocked> loc(#loc23)
      %144 = tt.splat %141 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %145 = tt.addptr %144, %142 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %146 = tt.load %145, %143, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %147 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %148 = ttg.local_alloc %147 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %149 = ttg.local_load %148 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %150 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %151 = ttg.local_load %150 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %152 = tt.dot %151, %149, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %152, %arg12, %146, %arg14, %138 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %86 = tt.trans %85#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %87 = tt.trans %85#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %88 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %89 = arith.divsi %88, %c32_i32 : i32 loc(#loc10)
    %90 = arith.cmpi sge, %89, %c1_i32 : i32 loc(#loc10)
    %91 = arith.cmpi sge, %89, %c2_i32 : i32 loc(#loc10)
    %92 = ttg.local_alloc %87 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %93 = ttg.local_load %92 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %94 = ttg.local_alloc %85#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %95 = ttg.local_load %94 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %96 = scf.if %90 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %95, %93, %85#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %85#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %97 = arith.select %90, %96, %85#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %98 = ttg.local_alloc %86 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %85#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = scf.if %91 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %101, %99, %97 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %97 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %103 = arith.select %91, %102, %97 : tensor<64x64xf32, #mma> loc(#loc10)
    %104 = tt.expand_dims %81 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %105 = tt.expand_dims %78 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %106 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %107 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %108 = arith.muli %105, %107 : tensor<64x1xi32, #mma> loc(#loc29)
    %109 = tt.addptr %arg0, %106 : !tt.ptr<f32>, i32 loc(#loc29)
    %110 = tt.expand_dims %83 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %111 = tt.broadcast %108 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %112 = tt.expand_dims %79 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %113 = tt.broadcast %112 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %114 = tt.addptr %109, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %115 = arith.addi %113, %111 : tensor<64x64xi32, #mma> loc(#loc31)
    %116 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %117 = arith.cmpi slt, %104, %116 : tensor<64x1xi32, #mma> loc(#loc32)
    %118 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %119 = arith.cmpi slt, %110, %118 : tensor<1x64xi32, #mma> loc(#loc33)
    %120 = tt.broadcast %117 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %121 = tt.broadcast %119 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %122 = arith.andi %120, %121 : tensor<64x64xi1, #mma> loc(#loc34)
    %123 = tt.splat %114 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %124 = tt.addptr %123, %115 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %124, %103, %122 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonAMDFoldTrueCmpI (tritonamdgpu-fold-true-cmpi) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc20)
    %36 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %37 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = arith.muli %35, %37 : tensor<64x1xi32, #blocked> loc(#loc20)
    %39 = tt.addptr %arg2, %36 : !tt.ptr<bf16>, i32 loc(#loc20)
    %40 = tt.broadcast %38 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %42 = tt.broadcast %41 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %43 = arith.addi %42, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %44 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %45 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %46 = arith.cmpi slt, %34, %45 : tensor<64x1xi32, #blocked> loc(#loc22)
    %47 = tt.broadcast %46 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %48 = arith.andi %47, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %44, %48 : tensor<64x32xi1, #blocked> loc(#loc10)
    %50 = tt.splat %39 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %51 = tt.addptr %50, %43 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %52 = tt.load %51, %49, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %53 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %54 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %56 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %57 = arith.addi %55, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %58 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %59 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %60 = arith.cmpi slt, %53, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %61 = tt.expand_dims %60 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %62 = tt.broadcast %61 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %63 = arith.andi %20, %62 : tensor<64x32xi1, #blocked> loc(#loc12)
    %64 = arith.andi %59, %63 : tensor<64x32xi1, #blocked> loc(#loc10)
    %65 = tt.splat %56 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %66 = tt.addptr %65, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %67 = tt.load %66, %64, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %68 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %69 = tt.broadcast %68 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %70 = tt.addptr %39, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %71 = arith.addi %69, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %72 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %73 = arith.andi %47, %62 : tensor<64x32xi1, #blocked> loc(#loc23)
    %74 = arith.andi %72, %73 : tensor<64x32xi1, #blocked> loc(#loc10)
    %75 = tt.splat %70 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %76 = tt.addptr %75, %71 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %77 = tt.load %76, %74, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %78 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %79 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %80 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %81 = arith.addi %80, %78 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %82 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %83 = arith.addi %82, %79 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %84 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %85:5 = scf.for %arg9 = %c0_i32 to %84 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %52, %arg12 = %77, %arg13 = %29, %arg14 = %67) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %125 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %126 = tt.splat %125 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %127 = arith.addi %126, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %128 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
      %129 = tt.broadcast %128 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
      %130 = tt.addptr %10, %125 : !tt.ptr<bf16>, i32 loc(#loc8)
      %131 = arith.addi %129, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
      %132 = arith.cmpi slt, %127, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %133 = tt.expand_dims %132 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %134 = tt.broadcast %133 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %135 = arith.andi %20, %134 : tensor<64x32xi1, #blocked> loc(#loc12)
      %136 = tt.splat %130 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %137 = tt.addptr %136, %131 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %138 = tt.load %137, %135, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %139 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
      %140 = tt.broadcast %139 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
      %141 = tt.addptr %39, %125 : !tt.ptr<bf16>, i32 loc(#loc21)
      %142 = arith.addi %140, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
      %143 = arith.andi %47, %134 : tensor<64x32xi1, #blocked> loc(#loc23)
      %144 = tt.splat %141 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %145 = tt.addptr %144, %142 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %146 = tt.load %145, %143, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %147 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %148 = ttg.local_alloc %147 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %149 = ttg.local_load %148 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %150 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %151 = ttg.local_load %150 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %152 = tt.dot %151, %149, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %152, %arg12, %146, %arg14, %138 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %86 = tt.trans %85#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %87 = tt.trans %85#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %88 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %89 = arith.divsi %88, %c32_i32 : i32 loc(#loc10)
    %90 = arith.cmpi sge, %89, %c1_i32 : i32 loc(#loc10)
    %91 = arith.cmpi sge, %89, %c2_i32 : i32 loc(#loc10)
    %92 = ttg.local_alloc %87 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %93 = ttg.local_load %92 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %94 = ttg.local_alloc %85#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %95 = ttg.local_load %94 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %96 = scf.if %90 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %95, %93, %85#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %85#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %97 = arith.select %90, %96, %85#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %98 = ttg.local_alloc %86 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %85#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = scf.if %91 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %101, %99, %97 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %97 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %103 = arith.select %91, %102, %97 : tensor<64x64xf32, #mma> loc(#loc10)
    %104 = tt.expand_dims %81 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %105 = tt.expand_dims %78 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %106 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %107 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %108 = arith.muli %105, %107 : tensor<64x1xi32, #mma> loc(#loc29)
    %109 = tt.addptr %arg0, %106 : !tt.ptr<f32>, i32 loc(#loc29)
    %110 = tt.expand_dims %83 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %111 = tt.broadcast %108 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %112 = tt.expand_dims %79 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %113 = tt.broadcast %112 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %114 = tt.addptr %109, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %115 = arith.addi %113, %111 : tensor<64x64xi32, #mma> loc(#loc31)
    %116 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %117 = arith.cmpi slt, %104, %116 : tensor<64x1xi32, #mma> loc(#loc32)
    %118 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %119 = arith.cmpi slt, %110, %118 : tensor<1x64xi32, #mma> loc(#loc33)
    %120 = tt.broadcast %117 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %121 = tt.broadcast %119 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %122 = arith.andi %120, %121 : tensor<64x64xi1, #mma> loc(#loc34)
    %123 = tt.splat %114 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %124 = tt.addptr %123, %115 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %124, %103, %122 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc20)
    %36 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %37 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = arith.muli %35, %37 : tensor<64x1xi32, #blocked> loc(#loc20)
    %39 = tt.addptr %arg2, %36 : !tt.ptr<bf16>, i32 loc(#loc20)
    %40 = tt.broadcast %38 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %42 = tt.broadcast %41 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %43 = arith.addi %42, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %44 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %45 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %46 = arith.cmpi slt, %34, %45 : tensor<64x1xi32, #blocked> loc(#loc22)
    %47 = tt.broadcast %46 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %48 = arith.andi %47, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %44, %48 : tensor<64x32xi1, #blocked> loc(#loc10)
    %50 = tt.splat %39 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %51 = tt.addptr %50, %43 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %52 = tt.load %51, %49, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %53 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %54 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %56 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %57 = arith.addi %55, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %58 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %59 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %60 = arith.cmpi slt, %53, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %61 = tt.expand_dims %60 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %62 = tt.broadcast %61 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %63 = arith.andi %20, %62 : tensor<64x32xi1, #blocked> loc(#loc12)
    %64 = arith.andi %59, %63 : tensor<64x32xi1, #blocked> loc(#loc10)
    %65 = tt.splat %56 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %66 = tt.addptr %65, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %67 = tt.load %66, %64, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %68 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %69 = tt.broadcast %68 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %70 = tt.addptr %39, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %71 = arith.addi %69, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %72 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %73 = arith.andi %47, %62 : tensor<64x32xi1, #blocked> loc(#loc23)
    %74 = arith.andi %72, %73 : tensor<64x32xi1, #blocked> loc(#loc10)
    %75 = tt.splat %70 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %76 = tt.addptr %75, %71 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %77 = tt.load %76, %74, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %78 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %79 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %80 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %81 = arith.addi %80, %78 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %82 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %83 = arith.addi %82, %79 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %84 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %85:5 = scf.for %arg9 = %c0_i32 to %84 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %52, %arg12 = %77, %arg13 = %29, %arg14 = %67) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %125 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %126 = tt.splat %125 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %127 = arith.addi %126, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %128 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
      %129 = tt.broadcast %128 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
      %130 = tt.addptr %10, %125 : !tt.ptr<bf16>, i32 loc(#loc8)
      %131 = arith.addi %129, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
      %132 = arith.cmpi slt, %127, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %133 = tt.expand_dims %132 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %134 = tt.broadcast %133 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %135 = arith.andi %20, %134 : tensor<64x32xi1, #blocked> loc(#loc12)
      %136 = tt.splat %130 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %137 = tt.addptr %136, %131 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %138 = tt.load %137, %135, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %139 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
      %140 = tt.broadcast %139 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
      %141 = tt.addptr %39, %125 : !tt.ptr<bf16>, i32 loc(#loc21)
      %142 = arith.addi %140, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
      %143 = arith.andi %47, %134 : tensor<64x32xi1, #blocked> loc(#loc23)
      %144 = tt.splat %141 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %145 = tt.addptr %144, %142 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %146 = tt.load %145, %143, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %147 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %148 = ttg.local_alloc %147 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %149 = ttg.local_load %148 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %150 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %151 = ttg.local_load %150 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %152 = tt.dot %151, %149, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %152, %arg12, %146, %arg14, %138 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %86 = tt.trans %85#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %87 = tt.trans %85#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %88 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %89 = arith.divsi %88, %c32_i32 : i32 loc(#loc10)
    %90 = arith.cmpi sge, %89, %c1_i32 : i32 loc(#loc10)
    %91 = arith.cmpi sge, %89, %c2_i32 : i32 loc(#loc10)
    %92 = ttg.local_alloc %87 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %93 = ttg.local_load %92 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %94 = ttg.local_alloc %85#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %95 = ttg.local_load %94 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %96 = scf.if %90 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %95, %93, %85#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %85#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %97 = arith.select %90, %96, %85#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %98 = ttg.local_alloc %86 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %85#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = scf.if %91 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %101, %99, %97 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %97 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %103 = arith.select %91, %102, %97 : tensor<64x64xf32, #mma> loc(#loc10)
    %104 = tt.expand_dims %81 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %105 = tt.expand_dims %78 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %106 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %107 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %108 = arith.muli %105, %107 : tensor<64x1xi32, #mma> loc(#loc29)
    %109 = tt.addptr %arg0, %106 : !tt.ptr<f32>, i32 loc(#loc29)
    %110 = tt.expand_dims %83 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %111 = tt.broadcast %108 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %112 = tt.expand_dims %79 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %113 = tt.broadcast %112 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %114 = tt.addptr %109, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %115 = arith.addi %113, %111 : tensor<64x64xi32, #mma> loc(#loc31)
    %116 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %117 = arith.cmpi slt, %104, %116 : tensor<64x1xi32, #mma> loc(#loc32)
    %118 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %119 = arith.cmpi slt, %110, %118 : tensor<1x64xi32, #mma> loc(#loc33)
    %120 = tt.broadcast %117 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %121 = tt.broadcast %119 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %122 = arith.andi %120, %121 : tensor<64x64xi1, #mma> loc(#loc34)
    %123 = tt.splat %114 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %124 = tt.addptr %123, %115 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %124, %103, %122 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc20)
    %36 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %37 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = arith.muli %35, %37 : tensor<64x1xi32, #blocked> loc(#loc20)
    %39 = tt.addptr %arg2, %36 : !tt.ptr<bf16>, i32 loc(#loc20)
    %40 = tt.broadcast %38 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %42 = tt.broadcast %41 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %43 = arith.addi %42, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %44 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %45 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %46 = arith.cmpi slt, %34, %45 : tensor<64x1xi32, #blocked> loc(#loc22)
    %47 = tt.broadcast %46 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %48 = arith.andi %47, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %49 = arith.andi %44, %48 : tensor<64x32xi1, #blocked> loc(#loc10)
    %50 = tt.splat %39 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %51 = tt.addptr %50, %43 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %52 = tt.load %51, %49, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %53 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %54 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %55 = tt.broadcast %54 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %56 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %57 = arith.addi %55, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %58 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %59 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %60 = arith.cmpi slt, %53, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %61 = tt.expand_dims %60 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %62 = tt.broadcast %61 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %63 = arith.andi %20, %62 : tensor<64x32xi1, #blocked> loc(#loc12)
    %64 = arith.andi %59, %63 : tensor<64x32xi1, #blocked> loc(#loc10)
    %65 = tt.splat %56 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %66 = tt.addptr %65, %57 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %67 = tt.load %66, %64, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %68 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
    %69 = tt.broadcast %68 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %70 = tt.addptr %39, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %71 = arith.addi %69, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
    %72 = tt.splat %58 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %73 = arith.andi %47, %62 : tensor<64x32xi1, #blocked> loc(#loc23)
    %74 = arith.andi %72, %73 : tensor<64x32xi1, #blocked> loc(#loc10)
    %75 = tt.splat %70 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %76 = tt.addptr %75, %71 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %77 = tt.load %76, %74, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %78 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %79 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %80 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %81 = arith.addi %80, %78 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %82 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %83 = arith.addi %82, %79 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %84 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %85:5 = scf.for %arg9 = %c0_i32 to %84 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %52, %arg12 = %77, %arg13 = %29, %arg14 = %67) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %125 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %126 = tt.splat %125 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %127 = arith.addi %126, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %128 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
      %129 = tt.broadcast %128 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
      %130 = tt.addptr %10, %125 : !tt.ptr<bf16>, i32 loc(#loc8)
      %131 = arith.addi %129, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
      %132 = arith.cmpi slt, %127, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %133 = tt.expand_dims %132 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %134 = tt.broadcast %133 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %135 = arith.andi %20, %134 : tensor<64x32xi1, #blocked> loc(#loc12)
      %136 = tt.splat %130 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %137 = tt.addptr %136, %131 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %138 = tt.load %137, %135, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %139 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc21)
      %140 = tt.broadcast %139 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
      %141 = tt.addptr %39, %125 : !tt.ptr<bf16>, i32 loc(#loc21)
      %142 = arith.addi %140, %40 : tensor<64x32xi32, #blocked> loc(#loc21)
      %143 = arith.andi %47, %134 : tensor<64x32xi1, #blocked> loc(#loc23)
      %144 = tt.splat %141 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %145 = tt.addptr %144, %142 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %146 = tt.load %145, %143, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %147 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %148 = ttg.local_alloc %147 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %149 = ttg.local_load %148 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %150 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %151 = ttg.local_load %150 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %152 = tt.dot %151, %149, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %152, %arg12, %146, %arg14, %138 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %86 = tt.trans %85#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %87 = tt.trans %85#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %88 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %89 = arith.divsi %88, %c32_i32 : i32 loc(#loc10)
    %90 = arith.cmpi sge, %89, %c1_i32 : i32 loc(#loc10)
    %91 = arith.cmpi sge, %89, %c2_i32 : i32 loc(#loc10)
    %92 = ttg.local_alloc %87 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %93 = ttg.local_load %92 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %94 = ttg.local_alloc %85#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %95 = ttg.local_load %94 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %96 = scf.if %90 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %95, %93, %85#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %85#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %97 = arith.select %90, %96, %85#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %98 = ttg.local_alloc %86 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %85#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = scf.if %91 -> (tensor<64x64xf32, #mma>) {
      %125 = tt.dot %101, %99, %97 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %125 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %97 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %103 = arith.select %91, %102, %97 : tensor<64x64xf32, #mma> loc(#loc10)
    %104 = tt.expand_dims %81 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %105 = tt.expand_dims %78 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %106 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %107 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %108 = arith.muli %105, %107 : tensor<64x1xi32, #mma> loc(#loc29)
    %109 = tt.addptr %arg0, %106 : !tt.ptr<f32>, i32 loc(#loc29)
    %110 = tt.expand_dims %83 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %111 = tt.broadcast %108 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %112 = tt.expand_dims %79 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %113 = tt.broadcast %112 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %114 = tt.addptr %109, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %115 = arith.addi %113, %111 : tensor<64x64xi32, #mma> loc(#loc31)
    %116 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %117 = arith.cmpi slt, %104, %116 : tensor<64x1xi32, #mma> loc(#loc32)
    %118 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %119 = arith.cmpi slt, %110, %118 : tensor<1x64xi32, #mma> loc(#loc33)
    %120 = tt.broadcast %117 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %121 = tt.broadcast %119 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %122 = arith.andi %120, %121 : tensor<64x64xi1, #mma> loc(#loc34)
    %123 = tt.splat %114 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %124 = tt.addptr %123, %115 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %124, %103, %122 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %74:5 = scf.for %arg9 = %c0_i32 to %73 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %48, %arg12 = %66, %arg13 = %29, %arg14 = %60) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %114 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %115 = tt.splat %114 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %116 = arith.addi %115, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %117 = tt.addptr %10, %114 : !tt.ptr<bf16>, i32 loc(#loc8)
      %118 = arith.cmpi slt, %116, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %119 = tt.expand_dims %118 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %120 = tt.broadcast %119 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %121 = arith.andi %20, %120 : tensor<64x32xi1, #blocked> loc(#loc12)
      %122 = tt.splat %117 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %123 = tt.addptr %122, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %124 = tt.load %123, %121, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %125 = tt.addptr %38, %114 : !tt.ptr<bf16>, i32 loc(#loc21)
      %126 = arith.andi %43, %120 : tensor<64x32xi1, #blocked> loc(#loc23)
      %127 = tt.splat %125 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %128 = tt.addptr %127, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %129 = tt.load %128, %126, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %130 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %131 = ttg.local_alloc %130 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %132 = ttg.local_load %131 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %133 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %134 = ttg.local_load %133 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %135 = tt.dot %134, %132, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %135, %arg12, %129, %arg14, %124 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %75 = tt.trans %74#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %76 = tt.trans %74#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %77 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %78 = arith.divsi %77, %c32_i32 : i32 loc(#loc10)
    %79 = arith.cmpi sge, %78, %c1_i32 : i32 loc(#loc10)
    %80 = arith.cmpi sge, %78, %c2_i32 : i32 loc(#loc10)
    %81 = ttg.local_alloc %76 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %82 = ttg.local_load %81 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %83 = ttg.local_alloc %74#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %84 = ttg.local_load %83 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %85 = scf.if %79 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %84, %82, %74#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %74#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %86 = arith.select %79, %85, %74#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %87 = ttg.local_alloc %75 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %88 = ttg.local_load %87 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %89 = ttg.local_alloc %74#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %90 = ttg.local_load %89 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %91 = scf.if %80 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %90, %88, %86 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %86 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %92 = arith.select %80, %91, %86 : tensor<64x64xf32, #mma> loc(#loc10)
    %93 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %94 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %95 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %96 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %97 = arith.muli %94, %96 : tensor<64x1xi32, #mma> loc(#loc29)
    %98 = tt.addptr %arg0, %95 : !tt.ptr<f32>, i32 loc(#loc29)
    %99 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %100 = tt.broadcast %97 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %101 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %102 = tt.broadcast %101 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %103 = tt.addptr %98, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %104 = arith.addi %102, %100 : tensor<64x64xi32, #mma> loc(#loc31)
    %105 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %106 = arith.cmpi slt, %93, %105 : tensor<64x1xi32, #mma> loc(#loc32)
    %107 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %108 = arith.cmpi slt, %99, %107 : tensor<1x64xi32, #mma> loc(#loc33)
    %109 = tt.broadcast %106 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %110 = tt.broadcast %108 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %111 = arith.andi %109, %110 : tensor<64x64xi1, #mma> loc(#loc34)
    %112 = tt.splat %103 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %113 = tt.addptr %112, %104 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %113, %92, %111 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %74:5 = scf.for %arg9 = %c0_i32 to %73 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %48, %arg12 = %66, %arg13 = %29, %arg14 = %60) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %114 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %115 = tt.splat %114 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %116 = arith.addi %115, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %117 = tt.addptr %10, %114 : !tt.ptr<bf16>, i32 loc(#loc8)
      %118 = arith.cmpi slt, %116, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %119 = tt.expand_dims %118 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %120 = tt.broadcast %119 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %121 = arith.andi %20, %120 : tensor<64x32xi1, #blocked> loc(#loc12)
      %122 = tt.splat %117 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %123 = tt.addptr %122, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %124 = tt.load %123, %121, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %125 = tt.addptr %38, %114 : !tt.ptr<bf16>, i32 loc(#loc21)
      %126 = arith.andi %43, %120 : tensor<64x32xi1, #blocked> loc(#loc23)
      %127 = tt.splat %125 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %128 = tt.addptr %127, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %129 = tt.load %128, %126, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %130 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %131 = ttg.local_alloc %130 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %132 = ttg.local_load %131 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %133 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %134 = ttg.local_load %133 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %135 = tt.dot %134, %132, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %135, %arg12, %129, %arg14, %124 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %75 = tt.trans %74#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %76 = tt.trans %74#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %77 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %78 = arith.divsi %77, %c32_i32 : i32 loc(#loc10)
    %79 = arith.cmpi sge, %78, %c1_i32 : i32 loc(#loc10)
    %80 = arith.cmpi sge, %78, %c2_i32 : i32 loc(#loc10)
    %81 = ttg.local_alloc %76 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %82 = ttg.local_load %81 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %83 = ttg.local_alloc %74#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %84 = ttg.local_load %83 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %85 = scf.if %79 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %84, %82, %74#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %74#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %86 = arith.select %79, %85, %74#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %87 = ttg.local_alloc %75 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %88 = ttg.local_load %87 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %89 = ttg.local_alloc %74#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %90 = ttg.local_load %89 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %91 = scf.if %80 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %90, %88, %86 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %86 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %92 = arith.select %80, %91, %86 : tensor<64x64xf32, #mma> loc(#loc10)
    %93 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %94 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %95 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %96 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %97 = arith.muli %94, %96 : tensor<64x1xi32, #mma> loc(#loc29)
    %98 = tt.addptr %arg0, %95 : !tt.ptr<f32>, i32 loc(#loc29)
    %99 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %100 = tt.broadcast %97 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %101 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %102 = tt.broadcast %101 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %103 = tt.addptr %98, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %104 = arith.addi %102, %100 : tensor<64x64xi32, #mma> loc(#loc31)
    %105 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %106 = arith.cmpi slt, %93, %105 : tensor<64x1xi32, #mma> loc(#loc32)
    %107 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %108 = arith.cmpi slt, %99, %107 : tensor<1x64xi32, #mma> loc(#loc33)
    %109 = tt.broadcast %106 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %110 = tt.broadcast %108 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %111 = arith.andi %109, %110 : tensor<64x64xi1, #mma> loc(#loc34)
    %112 = tt.splat %103 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %113 = tt.addptr %112, %104 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %113, %92, %111 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before OptimizeAMDLDSUsage (optimize-amd-lds-usage) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %74:5 = scf.for %arg9 = %c0_i32 to %73 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %48, %arg12 = %66, %arg13 = %29, %arg14 = %60) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %114 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %115 = tt.splat %114 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %116 = arith.addi %115, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %117 = tt.addptr %10, %114 : !tt.ptr<bf16>, i32 loc(#loc8)
      %118 = arith.cmpi slt, %116, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %119 = tt.expand_dims %118 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %120 = tt.broadcast %119 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %121 = arith.andi %20, %120 : tensor<64x32xi1, #blocked> loc(#loc12)
      %122 = tt.splat %117 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %123 = tt.addptr %122, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %124 = tt.load %123, %121, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %125 = tt.addptr %38, %114 : !tt.ptr<bf16>, i32 loc(#loc21)
      %126 = arith.andi %43, %120 : tensor<64x32xi1, #blocked> loc(#loc23)
      %127 = tt.splat %125 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %128 = tt.addptr %127, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %129 = tt.load %128, %126, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %130 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %131 = ttg.local_alloc %130 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %132 = ttg.local_load %131 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %133 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %134 = ttg.local_load %133 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %135 = tt.dot %134, %132, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %135, %arg12, %129, %arg14, %124 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %75 = tt.trans %74#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %76 = tt.trans %74#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %77 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %78 = arith.divsi %77, %c32_i32 : i32 loc(#loc10)
    %79 = arith.cmpi sge, %78, %c1_i32 : i32 loc(#loc10)
    %80 = arith.cmpi sge, %78, %c2_i32 : i32 loc(#loc10)
    %81 = ttg.local_alloc %76 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %82 = ttg.local_load %81 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %83 = ttg.local_alloc %74#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %84 = ttg.local_load %83 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %85 = scf.if %79 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %84, %82, %74#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %74#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %86 = arith.select %79, %85, %74#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %87 = ttg.local_alloc %75 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %88 = ttg.local_load %87 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %89 = ttg.local_alloc %74#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %90 = ttg.local_load %89 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %91 = scf.if %80 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %90, %88, %86 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %86 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %92 = arith.select %80, %91, %86 : tensor<64x64xf32, #mma> loc(#loc10)
    %93 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %94 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %95 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %96 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %97 = arith.muli %94, %96 : tensor<64x1xi32, #mma> loc(#loc29)
    %98 = tt.addptr %arg0, %95 : !tt.ptr<f32>, i32 loc(#loc29)
    %99 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %100 = tt.broadcast %97 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %101 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %102 = tt.broadcast %101 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %103 = tt.addptr %98, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %104 = arith.addi %102, %100 : tensor<64x64xi32, #mma> loc(#loc31)
    %105 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %106 = arith.cmpi slt, %93, %105 : tensor<64x1xi32, #mma> loc(#loc32)
    %107 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %108 = arith.cmpi slt, %99, %107 : tensor<1x64xi32, #mma> loc(#loc33)
    %109 = tt.broadcast %106 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %110 = tt.broadcast %108 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %111 = arith.andi %109, %110 : tensor<64x64xi1, #mma> loc(#loc34)
    %112 = tt.splat %103 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %113 = tt.addptr %112, %104 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %113, %92, %111 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before SCFToControlFlowPass (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    %74:5 = scf.for %arg9 = %c0_i32 to %73 step %c32_i32 iter_args(%arg10 = %cst, %arg11 = %48, %arg12 = %66, %arg13 = %29, %arg14 = %60) -> (tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>)  : i32 {
      %114 = arith.addi %arg9, %c64_i32 : i32 loc(#loc10)
      %115 = tt.splat %114 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %116 = arith.addi %115, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
      %117 = tt.addptr %10, %114 : !tt.ptr<bf16>, i32 loc(#loc8)
      %118 = arith.cmpi slt, %116, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
      %119 = tt.expand_dims %118 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
      %120 = tt.broadcast %119 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
      %121 = arith.andi %20, %120 : tensor<64x32xi1, #blocked> loc(#loc12)
      %122 = tt.splat %117 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %123 = tt.addptr %122, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
      %124 = tt.load %123, %121, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
      %125 = tt.addptr %38, %114 : !tt.ptr<bf16>, i32 loc(#loc21)
      %126 = arith.andi %43, %120 : tensor<64x32xi1, #blocked> loc(#loc23)
      %127 = tt.splat %125 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %128 = tt.addptr %127, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
      %129 = tt.load %128, %126, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
      %130 = tt.trans %arg11 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
      %131 = ttg.local_alloc %130 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
      %132 = ttg.local_load %131 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
      %133 = ttg.local_alloc %arg13 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
      %134 = ttg.local_load %133 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
      %135 = tt.dot %134, %132, %arg10 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %135, %arg12, %129, %arg14, %124 : tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked> loc(#loc10)
    } loc(#loc10)
    %75 = tt.trans %74#2 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %76 = tt.trans %74#1 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %77 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %78 = arith.divsi %77, %c32_i32 : i32 loc(#loc10)
    %79 = arith.cmpi sge, %78, %c1_i32 : i32 loc(#loc10)
    %80 = arith.cmpi sge, %78, %c2_i32 : i32 loc(#loc10)
    %81 = ttg.local_alloc %76 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %82 = ttg.local_load %81 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %83 = ttg.local_alloc %74#3 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %84 = ttg.local_load %83 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %85 = scf.if %79 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %84, %82, %74#0 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %74#0 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %86 = arith.select %79, %85, %74#0 : tensor<64x64xf32, #mma> loc(#loc10)
    %87 = ttg.local_alloc %75 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %88 = ttg.local_load %87 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %89 = ttg.local_alloc %74#4 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %90 = ttg.local_load %89 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %91 = scf.if %80 -> (tensor<64x64xf32, #mma>) {
      %114 = tt.dot %90, %88, %86 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
      scf.yield %114 : tensor<64x64xf32, #mma> loc(#loc27)
    } else {
      scf.yield %86 : tensor<64x64xf32, #mma> loc(#loc27)
    } loc(#loc27)
    %92 = arith.select %80, %91, %86 : tensor<64x64xf32, #mma> loc(#loc10)
    %93 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %94 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %95 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %96 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %97 = arith.muli %94, %96 : tensor<64x1xi32, #mma> loc(#loc29)
    %98 = tt.addptr %arg0, %95 : !tt.ptr<f32>, i32 loc(#loc29)
    %99 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %100 = tt.broadcast %97 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %101 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %102 = tt.broadcast %101 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %103 = tt.addptr %98, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %104 = arith.addi %102, %100 : tensor<64x64xi32, #mma> loc(#loc31)
    %105 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %106 = arith.cmpi slt, %93, %105 : tensor<64x1xi32, #mma> loc(#loc32)
    %107 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %108 = arith.cmpi slt, %99, %107 : tensor<1x64xi32, #mma> loc(#loc33)
    %109 = tt.broadcast %106 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %110 = tt.broadcast %108 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %111 = arith.andi %109, %110 : tensor<64x64xi1, #mma> loc(#loc34)
    %112 = tt.splat %103 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %113 = tt.addptr %112, %104 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %113, %92, %111 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    cf.br ^bb1(%c0_i32, %cst, %48, %66, %29, %60 : i32, tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>) loc(#loc10)
  ^bb1(%74: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %75: tensor<64x64xf32, #mma> loc(unknown), %76: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %77: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %78: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %79: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %80 = arith.cmpi slt, %74, %73 : i32 loc(#loc10)
    cf.cond_br %80, ^bb2, ^bb3 loc(#loc10)
  ^bb2:  // pred: ^bb1
    %81 = arith.addi %74, %c64_i32 : i32 loc(#loc10)
    %82 = tt.splat %81 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %83 = arith.addi %82, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %84 = tt.addptr %10, %81 : !tt.ptr<bf16>, i32 loc(#loc8)
    %85 = arith.cmpi slt, %83, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %86 = tt.expand_dims %85 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %87 = tt.broadcast %86 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %88 = arith.andi %20, %87 : tensor<64x32xi1, #blocked> loc(#loc12)
    %89 = tt.splat %84 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %90 = tt.addptr %89, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %91 = tt.load %90, %88, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %92 = tt.addptr %38, %81 : !tt.ptr<bf16>, i32 loc(#loc21)
    %93 = arith.andi %43, %87 : tensor<64x32xi1, #blocked> loc(#loc23)
    %94 = tt.splat %92 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %95 = tt.addptr %94, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %96 = tt.load %95, %93, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %97 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %98 = ttg.local_alloc %97 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %78 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = tt.dot %101, %99, %75 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    %103 = arith.addi %74, %c32_i32 : i32 loc(#loc10)
    cf.br ^bb1(%103, %102, %77, %96, %79, %91 : i32, tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>) loc(#loc10)
  ^bb3:  // pred: ^bb1
    %104 = tt.trans %77 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %105 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %106 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %107 = arith.divsi %106, %c32_i32 : i32 loc(#loc10)
    %108 = arith.cmpi sge, %107, %c1_i32 : i32 loc(#loc10)
    %109 = arith.cmpi sge, %107, %c2_i32 : i32 loc(#loc10)
    %110 = ttg.local_alloc %105 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %111 = ttg.local_load %110 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %112 = ttg.local_alloc %78 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %113 = ttg.local_load %112 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    cf.cond_br %108, ^bb4, ^bb5 loc(#loc27)
  ^bb4:  // pred: ^bb3
    %114 = tt.dot %113, %111, %75 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    cf.br ^bb6(%114 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb5:  // pred: ^bb3
    cf.br ^bb6(%75 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb6(%115: tensor<64x64xf32, #mma> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    %116 = arith.select %108, %115, %75 : tensor<64x64xf32, #mma> loc(#loc10)
    %117 = ttg.local_alloc %104 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %118 = ttg.local_load %117 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %119 = ttg.local_alloc %79 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %120 = ttg.local_load %119 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    cf.cond_br %109, ^bb8, ^bb9 loc(#loc27)
  ^bb8:  // pred: ^bb7
    %121 = tt.dot %120, %118, %116 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    cf.br ^bb10(%121 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb9:  // pred: ^bb7
    cf.br ^bb10(%116 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb10(%122: tensor<64x64xf32, #mma> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    cf.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    %123 = arith.select %109, %122, %116 : tensor<64x64xf32, #mma> loc(#loc10)
    %124 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %125 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %126 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %127 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %128 = arith.muli %125, %127 : tensor<64x1xi32, #mma> loc(#loc29)
    %129 = tt.addptr %arg0, %126 : !tt.ptr<f32>, i32 loc(#loc29)
    %130 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %131 = tt.broadcast %128 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %132 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %133 = tt.broadcast %132 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %134 = tt.addptr %129, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %135 = arith.addi %133, %131 : tensor<64x64xi32, #mma> loc(#loc31)
    %136 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %137 = arith.cmpi slt, %124, %136 : tensor<64x1xi32, #mma> loc(#loc32)
    %138 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %139 = arith.cmpi slt, %130, %138 : tensor<1x64xi32, #mma> loc(#loc33)
    %140 = tt.broadcast %137 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %141 = tt.broadcast %139 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %142 = arith.andi %140, %141 : tensor<64x64xi1, #mma> loc(#loc34)
    %143 = tt.splat %134 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %144 = tt.addptr %143, %135 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %144, %123, %142 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    cf.br ^bb1(%c0_i32, %cst, %48, %66, %29, %60 : i32, tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>) loc(#loc10)
  ^bb1(%74: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %75: tensor<64x64xf32, #mma> loc(unknown), %76: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %77: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %78: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %79: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %80 = arith.cmpi slt, %74, %73 : i32 loc(#loc10)
    cf.cond_br %80, ^bb2, ^bb3 loc(#loc10)
  ^bb2:  // pred: ^bb1
    %81 = arith.addi %74, %c64_i32 : i32 loc(#loc10)
    %82 = tt.splat %81 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %83 = arith.addi %82, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %84 = tt.addptr %10, %81 : !tt.ptr<bf16>, i32 loc(#loc8)
    %85 = arith.cmpi slt, %83, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %86 = tt.expand_dims %85 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %87 = tt.broadcast %86 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %88 = arith.andi %20, %87 : tensor<64x32xi1, #blocked> loc(#loc12)
    %89 = tt.splat %84 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %90 = tt.addptr %89, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %91 = tt.load %90, %88, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %92 = tt.addptr %38, %81 : !tt.ptr<bf16>, i32 loc(#loc21)
    %93 = arith.andi %43, %87 : tensor<64x32xi1, #blocked> loc(#loc23)
    %94 = tt.splat %92 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %95 = tt.addptr %94, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %96 = tt.load %95, %93, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %97 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %98 = ttg.local_alloc %97 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %78 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = tt.dot %101, %99, %75 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    %103 = arith.addi %74, %c32_i32 : i32 loc(#loc10)
    cf.br ^bb1(%103, %102, %77, %96, %79, %91 : i32, tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>) loc(#loc10)
  ^bb3:  // pred: ^bb1
    %104 = tt.trans %77 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %105 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %106 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %107 = arith.divsi %106, %c32_i32 : i32 loc(#loc10)
    %108 = arith.cmpi sge, %107, %c1_i32 : i32 loc(#loc10)
    %109 = arith.cmpi sge, %107, %c2_i32 : i32 loc(#loc10)
    %110 = ttg.local_alloc %105 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %111 = ttg.local_load %110 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %112 = ttg.local_alloc %78 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %113 = ttg.local_load %112 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    cf.cond_br %108, ^bb4, ^bb5 loc(#loc27)
  ^bb4:  // pred: ^bb3
    %114 = tt.dot %113, %111, %75 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    cf.br ^bb6(%114 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb5:  // pred: ^bb3
    cf.br ^bb6(%75 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb6(%115: tensor<64x64xf32, #mma> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    %116 = arith.select %108, %115, %75 : tensor<64x64xf32, #mma> loc(#loc10)
    %117 = ttg.local_alloc %104 : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %118 = ttg.local_load %117 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %119 = ttg.local_alloc %79 : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %120 = ttg.local_load %119 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    cf.cond_br %109, ^bb8, ^bb9 loc(#loc27)
  ^bb8:  // pred: ^bb7
    %121 = tt.dot %120, %118, %116 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    cf.br ^bb10(%121 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb9:  // pred: ^bb7
    cf.br ^bb10(%116 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb10(%122: tensor<64x64xf32, #mma> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    cf.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    %123 = arith.select %109, %122, %116 : tensor<64x64xf32, #mma> loc(#loc10)
    %124 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %125 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %126 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %127 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %128 = arith.muli %125, %127 : tensor<64x1xi32, #mma> loc(#loc29)
    %129 = tt.addptr %arg0, %126 : !tt.ptr<f32>, i32 loc(#loc29)
    %130 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %131 = tt.broadcast %128 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %132 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %133 = tt.broadcast %132 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %134 = tt.addptr %129, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %135 = arith.addi %133, %131 : tensor<64x64xi32, #mma> loc(#loc31)
    %136 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %137 = arith.cmpi slt, %124, %136 : tensor<64x1xi32, #mma> loc(#loc32)
    %138 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %139 = arith.cmpi slt, %130, %138 : tensor<1x64xi32, #mma> loc(#loc33)
    %140 = tt.broadcast %137 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %141 = tt.broadcast %139 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %142 = arith.andi %140, %141 : tensor<64x64xi1, #mma> loc(#loc34)
    %143 = tt.splat %134 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %144 = tt.addptr %143, %135 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %144, %123, %142 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before ConvertTritonAMDGPUToLLVM (convert-triton-amdgpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [0, 1]}>
#shared1 = #ttg.swizzled_shared<{vec = 8, perPhase = 4, maxPhase = 4, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_abt_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xbf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %4 = arith.addi %2, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc6)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = arith.muli %1, %arg6 : i32 loc(#loc7)
    %8 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc7)
    %9 = arith.muli %6, %8 : tensor<64x1xi32, #blocked> loc(#loc7)
    %10 = tt.addptr %arg1, %7 : !tt.ptr<bf16>, i32 loc(#loc7)
    %11 = tt.broadcast %9 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc9)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc8)
    %14 = tt.broadcast %13 : tensor<1x32xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc8)
    %15 = arith.addi %14, %11 : tensor<64x32xi32, #blocked> loc(#loc8)
    %16 = arith.cmpi sgt, %arg5, %c0_i32 : i32 loc(#loc10)
    %17 = tt.splat %16 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %18 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc11)
    %19 = arith.cmpi slt, %5, %18 : tensor<64x1xi32, #blocked> loc(#loc11)
    %20 = tt.broadcast %19 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %21 = tt.splat %arg5 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %22 = arith.cmpi slt, %12, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %24 = tt.broadcast %23 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %25 = arith.andi %20, %24 : tensor<64x32xi1, #blocked> loc(#loc12)
    %26 = arith.andi %17, %25 : tensor<64x32xi1, #blocked> loc(#loc10)
    %27 = tt.splat %10 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %28 = tt.addptr %27, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %29 = tt.load %28, %26, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %30 = tt.get_program_id y : i32 loc(#loc16)
    %31 = arith.muli %30, %c64_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %33 = arith.addi %32, %3 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %35 = arith.muli %31, %arg7 : i32 loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %37 = arith.muli %6, %36 : tensor<64x1xi32, #blocked> loc(#loc20)
    %38 = tt.addptr %arg2, %35 : !tt.ptr<bf16>, i32 loc(#loc20)
    %39 = tt.broadcast %37 : tensor<64x1xi32, #blocked> -> tensor<64x32xi32, #blocked> loc(#loc21)
    %40 = arith.addi %14, %39 : tensor<64x32xi32, #blocked> loc(#loc21)
    %41 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc22)
    %42 = arith.cmpi slt, %34, %41 : tensor<64x1xi32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<64x1xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc23)
    %44 = arith.andi %43, %24 : tensor<64x32xi1, #blocked> loc(#loc23)
    %45 = arith.andi %17, %44 : tensor<64x32xi1, #blocked> loc(#loc10)
    %46 = tt.splat %38 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %47 = tt.addptr %46, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %48 = tt.load %47, %45, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %49 = arith.addi %12, %cst_0 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %50 = tt.addptr %10, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc8)
    %51 = arith.cmpi sgt, %arg5, %c32_i32 : i32 loc(#loc10)
    %52 = tt.splat %51 : i1 -> tensor<64x32xi1, #blocked> loc(#loc10)
    %53 = arith.cmpi slt, %49, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %54 = tt.expand_dims %53 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %55 = tt.broadcast %54 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %56 = arith.andi %20, %55 : tensor<64x32xi1, #blocked> loc(#loc12)
    %57 = arith.andi %52, %56 : tensor<64x32xi1, #blocked> loc(#loc10)
    %58 = tt.splat %50 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %59 = tt.addptr %58, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %60 = tt.load %59, %57, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %61 = tt.addptr %38, %c32_i32 : !tt.ptr<bf16>, i32 loc(#loc21)
    %62 = arith.andi %43, %55 : tensor<64x32xi1, #blocked> loc(#loc23)
    %63 = arith.andi %52, %62 : tensor<64x32xi1, #blocked> loc(#loc10)
    %64 = tt.splat %61 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %65 = tt.addptr %64, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %66 = tt.load %65, %63, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %67 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %68 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc5)
    %69 = tt.splat %1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %70 = arith.addi %69, %67 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc4)
    %71 = tt.splat %31 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %72 = arith.addi %71, %68 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %73 = arith.subi %arg5, %c64_i32 : i32 loc(#loc10)
    cf.br ^bb1(%c0_i32, %cst, %48, %66, %29, %60 : i32, tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>) loc(#loc10)
  ^bb1(%74: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %75: tensor<64x64xf32, #mma> loc(unknown), %76: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %77: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %78: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %79: tensor<64x32xbf16, #blocked> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %80 = arith.cmpi slt, %74, %73 : i32 loc(#loc10)
    cf.cond_br %80, ^bb2, ^bb3 loc(#loc10)
  ^bb2:  // pred: ^bb1
    %81 = arith.addi %74, %c64_i32 : i32 loc(#loc10)
    %82 = tt.splat %81 : i32 -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %83 = arith.addi %82, %12 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %84 = tt.addptr %10, %81 : !tt.ptr<bf16>, i32 loc(#loc8)
    %85 = arith.cmpi slt, %83, %21 : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %86 = tt.expand_dims %85 {axis = 0 : i32} : tensor<32xi1, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi1, #blocked> loc(#loc14)
    %87 = tt.broadcast %86 : tensor<1x32xi1, #blocked> -> tensor<64x32xi1, #blocked> loc(#loc12)
    %88 = arith.andi %20, %87 : tensor<64x32xi1, #blocked> loc(#loc12)
    %89 = tt.splat %84 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %90 = tt.addptr %89, %15 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc15)
    %91 = tt.load %90, %88, %cst_1 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc15)
    %92 = tt.addptr %38, %81 : !tt.ptr<bf16>, i32 loc(#loc21)
    %93 = arith.andi %43, %87 : tensor<64x32xi1, #blocked> loc(#loc23)
    %94 = tt.splat %92 : !tt.ptr<bf16> -> tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %95 = tt.addptr %94, %40 : tensor<64x32x!tt.ptr<bf16>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc24)
    %96 = tt.load %95, %93, %cst_1 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x32x!tt.ptr<bf16>, #blocked> loc(#loc24)
    %97 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %98 = ttg.local_alloc %97 {allocation.offset = 0 : i32} : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %99 = ttg.local_load %98 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %100 = ttg.local_alloc %78 {allocation.offset = 0 : i32} : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %101 = ttg.local_load %100 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    %102 = tt.dot %101, %99, %75 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    %103 = arith.addi %74, %c32_i32 : i32 loc(#loc10)
    cf.br ^bb1(%103, %102, %77, %96, %79, %91 : i32, tensor<64x64xf32, #mma>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>, tensor<64x32xbf16, #blocked>) loc(#loc10)
  ^bb3:  // pred: ^bb1
    %104 = tt.trans %77 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %105 = tt.trans %76 {order = array<i32: 1, 0>} : tensor<64x32xbf16, #blocked> -> tensor<32x64xbf16, #blocked1> loc(#loc26)
    %106 = arith.addi %arg5, %c31_i32 : i32 loc(#loc10)
    %107 = arith.divsi %106, %c32_i32 : i32 loc(#loc10)
    %108 = arith.cmpi sge, %107, %c1_i32 : i32 loc(#loc10)
    %109 = arith.cmpi sge, %107, %c2_i32 : i32 loc(#loc10)
    %110 = ttg.local_alloc %105 {allocation.offset = 0 : i32} : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %111 = ttg.local_load %110 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %112 = ttg.local_alloc %78 {allocation.offset = 0 : i32} : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %113 = ttg.local_load %112 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    cf.cond_br %108, ^bb4, ^bb5 loc(#loc27)
  ^bb4:  // pred: ^bb3
    %114 = tt.dot %113, %111, %75 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    cf.br ^bb6(%114 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb5:  // pred: ^bb3
    cf.br ^bb6(%75 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb6(%115: tensor<64x64xf32, #mma> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    cf.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    %116 = arith.select %108, %115, %75 : tensor<64x64xf32, #mma> loc(#loc10)
    %117 = ttg.local_alloc %104 {allocation.offset = 0 : i32} : (tensor<32x64xbf16, #blocked1>) -> !ttg.memdesc<32x64xbf16, #shared, #smem> loc(#loc26)
    %118 = ttg.local_load %117 : !ttg.memdesc<32x64xbf16, #shared, #smem> -> tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc26)
    %119 = ttg.local_alloc %79 {allocation.offset = 0 : i32} : (tensor<64x32xbf16, #blocked>) -> !ttg.memdesc<64x32xbf16, #shared1, #smem> loc(#loc15)
    %120 = ttg.local_load %119 : !ttg.memdesc<64x32xbf16, #shared1, #smem> -> tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc15)
    cf.cond_br %109, ^bb8, ^bb9 loc(#loc27)
  ^bb8:  // pred: ^bb7
    %121 = tt.dot %120, %118, %116 : tensor<64x32xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<32x64xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<64x64xf32, #mma> loc(#loc27)
    cf.br ^bb10(%121 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb9:  // pred: ^bb7
    cf.br ^bb10(%116 : tensor<64x64xf32, #mma>) loc(#loc27)
  ^bb10(%122: tensor<64x64xf32, #mma> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    cf.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    %123 = arith.select %109, %122, %116 : tensor<64x64xf32, #mma> loc(#loc10)
    %124 = tt.expand_dims %70 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc28)
    %125 = tt.expand_dims %67 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc29)
    %126 = arith.muli %1, %arg8 : i32 loc(#loc29)
    %127 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc29)
    %128 = arith.muli %125, %127 : tensor<64x1xi32, #mma> loc(#loc29)
    %129 = tt.addptr %arg0, %126 : !tt.ptr<f32>, i32 loc(#loc29)
    %130 = tt.expand_dims %72 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc30)
    %131 = tt.broadcast %128 : tensor<64x1xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %132 = tt.expand_dims %68 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %133 = tt.broadcast %132 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc31)
    %134 = tt.addptr %129, %31 : !tt.ptr<f32>, i32 loc(#loc31)
    %135 = arith.addi %133, %131 : tensor<64x64xi32, #mma> loc(#loc31)
    %136 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc32)
    %137 = arith.cmpi slt, %124, %136 : tensor<64x1xi32, #mma> loc(#loc32)
    %138 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc33)
    %139 = arith.cmpi slt, %130, %138 : tensor<1x64xi32, #mma> loc(#loc33)
    %140 = tt.broadcast %137 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %141 = tt.broadcast %139 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc34)
    %142 = arith.andi %140, %141 : tensor<64x64xi1, #mma> loc(#loc34)
    %143 = tt.splat %134 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    %144 = tt.addptr %143, %135 : tensor<64x64x!tt.ptr<f32>, #mma>, tensor<64x64xi32, #mma> loc(#loc35)
    tt.store %144, %123, %142 : tensor<64x64x!tt.ptr<f32>, #mma> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
#mma = #ttg.amd_mfma<{versionMajor = 4, versionMinor = 0, warpsPerCTA = [2, 2], tilesPerWarp = [1, 1], instrShape = [32, 32], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %1 = llvm.bitcast %0 : f32 to f32 loc(#loc1)
    %2 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %5 = llvm.insertvalue %1, %4[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %6 = llvm.insertvalue %1, %5[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %7 = llvm.insertvalue %1, %6[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %8 = llvm.insertvalue %1, %7[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %9 = llvm.insertvalue %1, %8[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %10 = llvm.insertvalue %1, %9[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %11 = llvm.insertvalue %1, %10[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %12 = llvm.insertvalue %1, %11[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %13 = llvm.insertvalue %1, %12[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %14 = llvm.insertvalue %1, %13[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %15 = llvm.insertvalue %1, %14[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %16 = llvm.insertvalue %1, %15[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %17 = llvm.insertvalue %1, %16[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %18 = llvm.insertvalue %1, %17[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %19 = builtin.unrealized_conversion_cast %18 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x64xf32, #mma> loc(#loc1)
    %20 = builtin.unrealized_conversion_cast %19 : tensor<64x64xf32, #mma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %21 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %26 = llvm.bitcast %25 : i32 to i32 loc(#loc1)
    %27 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc1)
    %28 = llvm.insertvalue %26, %27[0] : !llvm.struct<(i32)>  loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.bitcast %29 : bf16 to bf16 loc(#loc1)
    %31 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %32 = llvm.insertvalue %30, %31[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %33 = llvm.insertvalue %30, %32[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %34 = llvm.insertvalue %30, %33[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %35 = llvm.insertvalue %30, %34[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %36 = llvm.insertvalue %30, %35[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %37 = llvm.insertvalue %30, %36[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %38 = llvm.insertvalue %30, %37[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %39 = llvm.insertvalue %30, %38[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc1)
    %40 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %41 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %42 = rocdl.workgroup.id.x : i32 loc(#loc3)
    %43 = llvm.mul %42, %40 : i32 loc(#loc4)
    %44 = llvm.bitcast %43 : i32 to i32 loc(#loc5)
    %45 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %46 = llvm.insertvalue %44, %45[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %47 = llvm.insertvalue %44, %46[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %48 = llvm.insertvalue %44, %47[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %49 = llvm.insertvalue %44, %48[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %50 = llvm.insertvalue %44, %49[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %51 = llvm.insertvalue %44, %50[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %52 = llvm.insertvalue %44, %51[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %53 = llvm.insertvalue %44, %52[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %54 = llvm.mlir.constant(0 : index) : i32 loc(#loc6)
    %55 = rocdl.workitem.id.x : i32 loc(#loc6)
    %56 = llvm.mlir.constant(64 : i32) : i32 loc(#loc6)
    %57 = llvm.urem %55, %56 : i32 loc(#loc6)
    %58 = llvm.udiv %55, %56 : i32 loc(#loc6)
    %59 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %60 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %61 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %62 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %63 = llvm.and %57, %62 : i32 loc(#loc6)
    %64 = llvm.icmp "eq" %63, %61 : i32 loc(#loc6)
    %65 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %66 = llvm.and %57, %65 : i32 loc(#loc6)
    %67 = llvm.icmp "eq" %66, %61 : i32 loc(#loc6)
    %68 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %69 = llvm.and %57, %68 : i32 loc(#loc6)
    %70 = llvm.icmp "eq" %69, %61 : i32 loc(#loc6)
    %71 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %72 = llvm.and %57, %71 : i32 loc(#loc6)
    %73 = llvm.icmp "eq" %72, %61 : i32 loc(#loc6)
    %74 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %75 = llvm.and %57, %74 : i32 loc(#loc6)
    %76 = llvm.icmp "eq" %75, %61 : i32 loc(#loc6)
    %77 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %78 = llvm.and %57, %77 : i32 loc(#loc6)
    %79 = llvm.icmp "eq" %78, %61 : i32 loc(#loc6)
    %80 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %81 = llvm.select %79, %61, %80 : i1, i32 loc(#loc6)
    %82 = llvm.xor %61, %81 : i32 loc(#loc6)
    %83 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %84 = llvm.and %58, %83 : i32 loc(#loc6)
    %85 = llvm.icmp "eq" %84, %61 : i32 loc(#loc6)
    %86 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %87 = llvm.select %85, %61, %86 : i1, i32 loc(#loc6)
    %88 = llvm.xor %82, %87 : i32 loc(#loc6)
    %89 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %90 = llvm.and %58, %89 : i32 loc(#loc6)
    %91 = llvm.icmp "eq" %90, %61 : i32 loc(#loc6)
    %92 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %93 = llvm.select %91, %61, %92 : i1, i32 loc(#loc6)
    %94 = llvm.xor %88, %93 : i32 loc(#loc6)
    %95 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %96 = llvm.xor %94, %95 : i32 loc(#loc6)
    %97 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %98 = llvm.xor %94, %97 : i32 loc(#loc6)
    %99 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %100 = llvm.xor %94, %99 : i32 loc(#loc6)
    %101 = llvm.mlir.constant(24 : i32) : i32 loc(#loc6)
    %102 = llvm.xor %94, %101 : i32 loc(#loc6)
    %103 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %104 = llvm.xor %94, %103 : i32 loc(#loc6)
    %105 = llvm.mlir.constant(40 : i32) : i32 loc(#loc6)
    %106 = llvm.xor %94, %105 : i32 loc(#loc6)
    %107 = llvm.mlir.constant(48 : i32) : i32 loc(#loc6)
    %108 = llvm.xor %94, %107 : i32 loc(#loc6)
    %109 = llvm.mlir.constant(56 : i32) : i32 loc(#loc6)
    %110 = llvm.xor %94, %109 : i32 loc(#loc6)
    %111 = llvm.add %96, %54 : i32 loc(#loc6)
    %112 = llvm.add %98, %54 : i32 loc(#loc6)
    %113 = llvm.add %100, %54 : i32 loc(#loc6)
    %114 = llvm.add %102, %54 : i32 loc(#loc6)
    %115 = llvm.add %104, %54 : i32 loc(#loc6)
    %116 = llvm.add %106, %54 : i32 loc(#loc6)
    %117 = llvm.add %108, %54 : i32 loc(#loc6)
    %118 = llvm.add %110, %54 : i32 loc(#loc6)
    %119 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %120 = llvm.insertvalue %111, %119[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %121 = llvm.insertvalue %112, %120[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %122 = llvm.insertvalue %113, %121[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %123 = llvm.insertvalue %114, %122[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %124 = llvm.insertvalue %115, %123[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %125 = llvm.insertvalue %116, %124[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %126 = llvm.insertvalue %117, %125[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %127 = llvm.insertvalue %118, %126[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %128 = llvm.extractvalue %53[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %129 = llvm.extractvalue %53[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %130 = llvm.extractvalue %53[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %131 = llvm.extractvalue %53[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %132 = llvm.extractvalue %53[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %133 = llvm.extractvalue %53[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %134 = llvm.extractvalue %53[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %135 = llvm.extractvalue %53[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %136 = llvm.extractvalue %127[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %137 = llvm.extractvalue %127[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %138 = llvm.extractvalue %127[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %139 = llvm.extractvalue %127[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %140 = llvm.extractvalue %127[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %141 = llvm.extractvalue %127[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %142 = llvm.extractvalue %127[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %143 = llvm.extractvalue %127[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %144 = llvm.add %128, %136 : i32 loc(#loc5)
    %145 = llvm.add %129, %137 : i32 loc(#loc5)
    %146 = llvm.add %130, %138 : i32 loc(#loc5)
    %147 = llvm.add %131, %139 : i32 loc(#loc5)
    %148 = llvm.add %132, %140 : i32 loc(#loc5)
    %149 = llvm.add %133, %141 : i32 loc(#loc5)
    %150 = llvm.add %134, %142 : i32 loc(#loc5)
    %151 = llvm.add %135, %143 : i32 loc(#loc5)
    %152 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc5)
    %153 = llvm.insertvalue %144, %152[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %154 = llvm.insertvalue %145, %153[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %155 = llvm.insertvalue %146, %154[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %156 = llvm.insertvalue %147, %155[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %157 = llvm.insertvalue %148, %156[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %158 = llvm.insertvalue %149, %157[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %159 = llvm.insertvalue %150, %158[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %160 = llvm.insertvalue %151, %159[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc5)
    %161 = llvm.extractvalue %160[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %162 = llvm.extractvalue %160[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %163 = llvm.extractvalue %160[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %164 = llvm.extractvalue %160[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %165 = llvm.extractvalue %160[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %166 = llvm.extractvalue %160[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %167 = llvm.extractvalue %160[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %168 = llvm.extractvalue %160[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %169 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc7)
    %170 = llvm.insertvalue %161, %169[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %171 = llvm.insertvalue %162, %170[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %172 = llvm.insertvalue %163, %171[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %173 = llvm.insertvalue %164, %172[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %174 = llvm.insertvalue %165, %173[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %175 = llvm.insertvalue %166, %174[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %176 = llvm.insertvalue %167, %175[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %177 = llvm.insertvalue %168, %176[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc7)
    %178 = llvm.extractvalue %127[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %179 = llvm.extractvalue %127[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %180 = llvm.extractvalue %127[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %181 = llvm.extractvalue %127[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %182 = llvm.extractvalue %127[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %183 = llvm.extractvalue %127[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %184 = llvm.extractvalue %127[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %185 = llvm.extractvalue %127[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %186 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc8)
    %187 = llvm.insertvalue %178, %186[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %188 = llvm.insertvalue %179, %187[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %189 = llvm.insertvalue %180, %188[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %190 = llvm.insertvalue %181, %189[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %191 = llvm.insertvalue %182, %190[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %192 = llvm.insertvalue %183, %191[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %193 = llvm.insertvalue %184, %192[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %194 = llvm.insertvalue %185, %193[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %195 = llvm.mul %43, %arg6 : i32 loc(#loc8)
    %196 = llvm.bitcast %arg6 : i32 to i32 loc(#loc8)
    %197 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc8)
    %198 = llvm.insertvalue %196, %197[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %199 = llvm.insertvalue %196, %198[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %200 = llvm.insertvalue %196, %199[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %201 = llvm.insertvalue %196, %200[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %202 = llvm.insertvalue %196, %201[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %203 = llvm.insertvalue %196, %202[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %204 = llvm.insertvalue %196, %203[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %205 = llvm.insertvalue %196, %204[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %206 = llvm.extractvalue %194[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %207 = llvm.extractvalue %194[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %208 = llvm.extractvalue %194[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %209 = llvm.extractvalue %194[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %210 = llvm.extractvalue %194[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %211 = llvm.extractvalue %194[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %212 = llvm.extractvalue %194[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %213 = llvm.extractvalue %194[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %214 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %215 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %216 = llvm.extractvalue %205[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %217 = llvm.extractvalue %205[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %218 = llvm.extractvalue %205[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %219 = llvm.extractvalue %205[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %220 = llvm.extractvalue %205[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %221 = llvm.extractvalue %205[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %222 = llvm.mul %206, %214 : i32 loc(#loc8)
    %223 = llvm.mul %207, %215 : i32 loc(#loc8)
    %224 = llvm.mul %208, %216 : i32 loc(#loc8)
    %225 = llvm.mul %209, %217 : i32 loc(#loc8)
    %226 = llvm.mul %210, %218 : i32 loc(#loc8)
    %227 = llvm.mul %211, %219 : i32 loc(#loc8)
    %228 = llvm.mul %212, %220 : i32 loc(#loc8)
    %229 = llvm.mul %213, %221 : i32 loc(#loc8)
    %230 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc8)
    %231 = llvm.insertvalue %222, %230[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %232 = llvm.insertvalue %223, %231[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %233 = llvm.insertvalue %224, %232[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %234 = llvm.insertvalue %225, %233[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %235 = llvm.insertvalue %226, %234[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %236 = llvm.insertvalue %227, %235[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %237 = llvm.insertvalue %228, %236[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %238 = llvm.insertvalue %229, %237[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %239 = llvm.getelementptr %arg1[%195] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %240 = llvm.extractvalue %238[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %241 = llvm.extractvalue %238[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %242 = llvm.extractvalue %238[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %243 = llvm.extractvalue %238[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %244 = llvm.extractvalue %238[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %245 = llvm.extractvalue %238[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %246 = llvm.extractvalue %238[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %247 = llvm.extractvalue %238[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %248 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc9)
    %249 = llvm.insertvalue %240, %248[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %250 = llvm.insertvalue %241, %249[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %251 = llvm.insertvalue %242, %250[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %252 = llvm.insertvalue %243, %251[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %253 = llvm.insertvalue %244, %252[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %254 = llvm.insertvalue %245, %253[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %255 = llvm.insertvalue %246, %254[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %256 = llvm.insertvalue %247, %255[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %257 = llvm.mlir.constant(0 : index) : i32 loc(#loc10)
    %258 = rocdl.workitem.id.x : i32 loc(#loc10)
    %259 = llvm.mlir.constant(64 : i32) : i32 loc(#loc10)
    %260 = llvm.urem %258, %259 : i32 loc(#loc10)
    %261 = llvm.udiv %258, %259 : i32 loc(#loc10)
    %262 = llvm.mlir.constant(0 : i32) : i32 loc(#loc10)
    %263 = llvm.mlir.constant(0 : i32) : i32 loc(#loc10)
    %264 = llvm.mlir.constant(0 : i32) : i32 loc(#loc10)
    %265 = llvm.mlir.constant(1 : i32) : i32 loc(#loc10)
    %266 = llvm.and %260, %265 : i32 loc(#loc10)
    %267 = llvm.icmp "eq" %266, %264 : i32 loc(#loc10)
    %268 = llvm.mlir.constant(1 : i32) : i32 loc(#loc10)
    %269 = llvm.select %267, %264, %268 : i1, i32 loc(#loc10)
    %270 = llvm.xor %264, %269 : i32 loc(#loc10)
    %271 = llvm.mlir.constant(2 : i32) : i32 loc(#loc10)
    %272 = llvm.and %260, %271 : i32 loc(#loc10)
    %273 = llvm.icmp "eq" %272, %264 : i32 loc(#loc10)
    %274 = llvm.mlir.constant(2 : i32) : i32 loc(#loc10)
    %275 = llvm.select %273, %264, %274 : i1, i32 loc(#loc10)
    %276 = llvm.xor %270, %275 : i32 loc(#loc10)
    %277 = llvm.mlir.constant(4 : i32) : i32 loc(#loc10)
    %278 = llvm.and %260, %277 : i32 loc(#loc10)
    %279 = llvm.icmp "eq" %278, %264 : i32 loc(#loc10)
    %280 = llvm.mlir.constant(4 : i32) : i32 loc(#loc10)
    %281 = llvm.select %279, %264, %280 : i1, i32 loc(#loc10)
    %282 = llvm.xor %276, %281 : i32 loc(#loc10)
    %283 = llvm.mlir.constant(8 : i32) : i32 loc(#loc10)
    %284 = llvm.and %260, %283 : i32 loc(#loc10)
    %285 = llvm.icmp "eq" %284, %264 : i32 loc(#loc10)
    %286 = llvm.mlir.constant(8 : i32) : i32 loc(#loc10)
    %287 = llvm.select %285, %264, %286 : i1, i32 loc(#loc10)
    %288 = llvm.xor %282, %287 : i32 loc(#loc10)
    %289 = llvm.mlir.constant(16 : i32) : i32 loc(#loc10)
    %290 = llvm.and %260, %289 : i32 loc(#loc10)
    %291 = llvm.icmp "eq" %290, %264 : i32 loc(#loc10)
    %292 = llvm.mlir.constant(16 : i32) : i32 loc(#loc10)
    %293 = llvm.select %291, %264, %292 : i1, i32 loc(#loc10)
    %294 = llvm.xor %288, %293 : i32 loc(#loc10)
    %295 = llvm.mlir.constant(32 : i32) : i32 loc(#loc10)
    %296 = llvm.and %260, %295 : i32 loc(#loc10)
    %297 = llvm.icmp "eq" %296, %264 : i32 loc(#loc10)
    %298 = llvm.mlir.constant(1 : i32) : i32 loc(#loc10)
    %299 = llvm.and %261, %298 : i32 loc(#loc10)
    %300 = llvm.icmp "eq" %299, %264 : i32 loc(#loc10)
    %301 = llvm.mlir.constant(2 : i32) : i32 loc(#loc10)
    %302 = llvm.and %261, %301 : i32 loc(#loc10)
    %303 = llvm.icmp "eq" %302, %264 : i32 loc(#loc10)
    %304 = llvm.mlir.constant(0 : i32) : i32 loc(#loc10)
    %305 = llvm.xor %294, %304 : i32 loc(#loc10)
    %306 = llvm.add %305, %257 : i32 loc(#loc10)
    %307 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc10)
    %308 = llvm.insertvalue %306, %307[0] : !llvm.struct<(i32)>  loc(#loc10)
    %309 = llvm.extractvalue %308[0] : !llvm.struct<(i32)>  loc(#loc9)
    %310 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc9)
    %311 = llvm.insertvalue %309, %310[0] : !llvm.struct<(i32)>  loc(#loc9)
    %312 = llvm.extractvalue %311[0] : !llvm.struct<(i32)>  loc(#loc9)
    %313 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc9)
    %314 = llvm.insertvalue %312, %313[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %315 = llvm.insertvalue %312, %314[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %316 = llvm.insertvalue %312, %315[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %317 = llvm.insertvalue %312, %316[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %318 = llvm.insertvalue %312, %317[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %319 = llvm.insertvalue %312, %318[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %320 = llvm.insertvalue %312, %319[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %321 = llvm.insertvalue %312, %320[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %322 = llvm.extractvalue %321[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %323 = llvm.extractvalue %321[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %324 = llvm.extractvalue %321[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %325 = llvm.extractvalue %321[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %326 = llvm.extractvalue %321[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %327 = llvm.extractvalue %321[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %328 = llvm.extractvalue %321[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %329 = llvm.extractvalue %321[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %330 = llvm.extractvalue %256[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %331 = llvm.extractvalue %256[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %332 = llvm.extractvalue %256[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %333 = llvm.extractvalue %256[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %334 = llvm.extractvalue %256[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %335 = llvm.extractvalue %256[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %336 = llvm.extractvalue %256[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %337 = llvm.extractvalue %256[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %338 = llvm.add %322, %330 : i32 loc(#loc9)
    %339 = llvm.add %323, %331 : i32 loc(#loc9)
    %340 = llvm.add %324, %332 : i32 loc(#loc9)
    %341 = llvm.add %325, %333 : i32 loc(#loc9)
    %342 = llvm.add %326, %334 : i32 loc(#loc9)
    %343 = llvm.add %327, %335 : i32 loc(#loc9)
    %344 = llvm.add %328, %336 : i32 loc(#loc9)
    %345 = llvm.add %329, %337 : i32 loc(#loc9)
    %346 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc9)
    %347 = llvm.insertvalue %338, %346[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %348 = llvm.insertvalue %339, %347[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %349 = llvm.insertvalue %340, %348[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %350 = llvm.insertvalue %341, %349[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %351 = llvm.insertvalue %342, %350[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %352 = llvm.insertvalue %343, %351[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %353 = llvm.insertvalue %344, %352[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %354 = llvm.insertvalue %345, %353[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %355 = llvm.icmp "sgt" %arg5, %41 : i32 loc(#loc2)
    %356 = llvm.bitcast %355 : i1 to i1 loc(#loc2)
    %357 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc2)
    %358 = llvm.insertvalue %356, %357[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %359 = llvm.insertvalue %356, %358[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %360 = llvm.insertvalue %356, %359[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %361 = llvm.insertvalue %356, %360[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %362 = llvm.insertvalue %356, %361[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %363 = llvm.insertvalue %356, %362[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %364 = llvm.insertvalue %356, %363[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %365 = llvm.insertvalue %356, %364[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %366 = llvm.bitcast %arg3 : i32 to i32 loc(#loc11)
    %367 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc11)
    %368 = llvm.insertvalue %366, %367[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %369 = llvm.insertvalue %366, %368[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %370 = llvm.insertvalue %366, %369[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %371 = llvm.insertvalue %366, %370[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %372 = llvm.insertvalue %366, %371[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %373 = llvm.insertvalue %366, %372[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %374 = llvm.insertvalue %366, %373[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %375 = llvm.insertvalue %366, %374[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %376 = llvm.extractvalue %177[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %377 = llvm.extractvalue %177[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %378 = llvm.extractvalue %177[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %379 = llvm.extractvalue %177[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %380 = llvm.extractvalue %177[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %381 = llvm.extractvalue %177[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %382 = llvm.extractvalue %177[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %383 = llvm.extractvalue %177[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %384 = llvm.extractvalue %375[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %385 = llvm.extractvalue %375[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %386 = llvm.extractvalue %375[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %387 = llvm.extractvalue %375[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %388 = llvm.extractvalue %375[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %389 = llvm.extractvalue %375[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %390 = llvm.extractvalue %375[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %391 = llvm.extractvalue %375[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %392 = llvm.icmp "slt" %376, %384 : i32 loc(#loc11)
    %393 = llvm.icmp "slt" %377, %385 : i32 loc(#loc11)
    %394 = llvm.icmp "slt" %378, %386 : i32 loc(#loc11)
    %395 = llvm.icmp "slt" %379, %387 : i32 loc(#loc11)
    %396 = llvm.icmp "slt" %380, %388 : i32 loc(#loc11)
    %397 = llvm.icmp "slt" %381, %389 : i32 loc(#loc11)
    %398 = llvm.icmp "slt" %382, %390 : i32 loc(#loc11)
    %399 = llvm.icmp "slt" %383, %391 : i32 loc(#loc11)
    %400 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc11)
    %401 = llvm.insertvalue %392, %400[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %402 = llvm.insertvalue %393, %401[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %403 = llvm.insertvalue %394, %402[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %404 = llvm.insertvalue %395, %403[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %405 = llvm.insertvalue %396, %404[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %406 = llvm.insertvalue %397, %405[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %407 = llvm.insertvalue %398, %406[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %408 = llvm.insertvalue %399, %407[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc11)
    %409 = llvm.extractvalue %408[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %410 = llvm.extractvalue %408[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %411 = llvm.extractvalue %408[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %412 = llvm.extractvalue %408[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %413 = llvm.extractvalue %408[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %414 = llvm.extractvalue %408[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %415 = llvm.extractvalue %408[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %416 = llvm.extractvalue %408[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %417 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %418 = llvm.insertvalue %409, %417[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %419 = llvm.insertvalue %410, %418[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %420 = llvm.insertvalue %411, %419[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %421 = llvm.insertvalue %412, %420[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %422 = llvm.insertvalue %413, %421[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %423 = llvm.insertvalue %414, %422[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %424 = llvm.insertvalue %415, %423[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %425 = llvm.insertvalue %416, %424[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %426 = llvm.bitcast %arg5 : i32 to i32 loc(#loc13)
    %427 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc13)
    %428 = llvm.insertvalue %426, %427[0] : !llvm.struct<(i32)>  loc(#loc13)
    %429 = llvm.extractvalue %308[0] : !llvm.struct<(i32)>  loc(#loc13)
    %430 = llvm.extractvalue %428[0] : !llvm.struct<(i32)>  loc(#loc13)
    %431 = llvm.icmp "slt" %429, %430 : i32 loc(#loc13)
    %432 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc13)
    %433 = llvm.insertvalue %431, %432[0] : !llvm.struct<(i1)>  loc(#loc13)
    %434 = llvm.extractvalue %433[0] : !llvm.struct<(i1)>  loc(#loc14)
    %435 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc14)
    %436 = llvm.insertvalue %434, %435[0] : !llvm.struct<(i1)>  loc(#loc14)
    %437 = llvm.extractvalue %436[0] : !llvm.struct<(i1)>  loc(#loc12)
    %438 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %439 = llvm.insertvalue %437, %438[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %440 = llvm.insertvalue %437, %439[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %441 = llvm.insertvalue %437, %440[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %442 = llvm.insertvalue %437, %441[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %443 = llvm.insertvalue %437, %442[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %444 = llvm.insertvalue %437, %443[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %445 = llvm.insertvalue %437, %444[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %446 = llvm.insertvalue %437, %445[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %447 = llvm.extractvalue %425[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %448 = llvm.extractvalue %425[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %449 = llvm.extractvalue %425[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %450 = llvm.extractvalue %425[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %451 = llvm.extractvalue %425[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %452 = llvm.extractvalue %425[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %453 = llvm.extractvalue %425[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %454 = llvm.extractvalue %425[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %455 = llvm.extractvalue %446[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %456 = llvm.extractvalue %446[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %457 = llvm.extractvalue %446[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %458 = llvm.extractvalue %446[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %459 = llvm.extractvalue %446[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %460 = llvm.extractvalue %446[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %461 = llvm.extractvalue %446[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %462 = llvm.extractvalue %446[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %463 = llvm.and %447, %455 : i1 loc(#loc12)
    %464 = llvm.and %448, %456 : i1 loc(#loc12)
    %465 = llvm.and %449, %457 : i1 loc(#loc12)
    %466 = llvm.and %450, %458 : i1 loc(#loc12)
    %467 = llvm.and %451, %459 : i1 loc(#loc12)
    %468 = llvm.and %452, %460 : i1 loc(#loc12)
    %469 = llvm.and %453, %461 : i1 loc(#loc12)
    %470 = llvm.and %454, %462 : i1 loc(#loc12)
    %471 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %472 = llvm.insertvalue %463, %471[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %473 = llvm.insertvalue %464, %472[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %474 = llvm.insertvalue %465, %473[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %475 = llvm.insertvalue %466, %474[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %476 = llvm.insertvalue %467, %475[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %477 = llvm.insertvalue %468, %476[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %478 = llvm.insertvalue %469, %477[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %479 = llvm.insertvalue %470, %478[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %480 = llvm.extractvalue %365[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %481 = llvm.extractvalue %365[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %482 = llvm.extractvalue %365[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %483 = llvm.extractvalue %365[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %484 = llvm.extractvalue %365[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %485 = llvm.extractvalue %365[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %486 = llvm.extractvalue %365[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %487 = llvm.extractvalue %365[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %488 = llvm.extractvalue %479[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %489 = llvm.extractvalue %479[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %490 = llvm.extractvalue %479[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %491 = llvm.extractvalue %479[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %492 = llvm.extractvalue %479[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %493 = llvm.extractvalue %479[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %494 = llvm.extractvalue %479[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %495 = llvm.extractvalue %479[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %496 = llvm.and %480, %488 : i1 loc(#loc2)
    %497 = llvm.and %481, %489 : i1 loc(#loc2)
    %498 = llvm.and %482, %490 : i1 loc(#loc2)
    %499 = llvm.and %483, %491 : i1 loc(#loc2)
    %500 = llvm.and %484, %492 : i1 loc(#loc2)
    %501 = llvm.and %485, %493 : i1 loc(#loc2)
    %502 = llvm.and %486, %494 : i1 loc(#loc2)
    %503 = llvm.and %487, %495 : i1 loc(#loc2)
    %504 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc2)
    %505 = llvm.insertvalue %496, %504[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %506 = llvm.insertvalue %497, %505[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %507 = llvm.insertvalue %498, %506[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %508 = llvm.insertvalue %499, %507[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %509 = llvm.insertvalue %500, %508[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %510 = llvm.insertvalue %501, %509[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %511 = llvm.insertvalue %502, %510[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %512 = llvm.insertvalue %503, %511[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %513 = llvm.bitcast %239 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc15)
    %514 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc15)
    %515 = llvm.insertvalue %513, %514[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %516 = llvm.insertvalue %513, %515[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %517 = llvm.insertvalue %513, %516[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %518 = llvm.insertvalue %513, %517[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %519 = llvm.insertvalue %513, %518[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %520 = llvm.insertvalue %513, %519[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %521 = llvm.insertvalue %513, %520[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %522 = llvm.insertvalue %513, %521[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %523 = llvm.extractvalue %522[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %524 = llvm.extractvalue %522[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %525 = llvm.extractvalue %522[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %526 = llvm.extractvalue %522[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %527 = llvm.extractvalue %522[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %528 = llvm.extractvalue %522[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %529 = llvm.extractvalue %522[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %530 = llvm.extractvalue %522[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %531 = llvm.extractvalue %354[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %532 = llvm.extractvalue %354[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %533 = llvm.extractvalue %354[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %534 = llvm.extractvalue %354[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %535 = llvm.extractvalue %354[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %536 = llvm.extractvalue %354[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %537 = llvm.extractvalue %354[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %538 = llvm.extractvalue %354[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %539 = llvm.getelementptr %523[%531] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %540 = llvm.getelementptr %524[%532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %541 = llvm.getelementptr %525[%533] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %542 = llvm.getelementptr %526[%534] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %543 = llvm.getelementptr %527[%535] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %544 = llvm.getelementptr %528[%536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %545 = llvm.getelementptr %529[%537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %546 = llvm.getelementptr %530[%538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %547 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc15)
    %548 = llvm.insertvalue %539, %547[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %549 = llvm.insertvalue %540, %548[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %550 = llvm.insertvalue %541, %549[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %551 = llvm.insertvalue %542, %550[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %552 = llvm.insertvalue %543, %551[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %553 = llvm.insertvalue %544, %552[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %554 = llvm.insertvalue %545, %553[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %555 = llvm.insertvalue %546, %554[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %556 = llvm.extractvalue %555[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %557 = llvm.extractvalue %555[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %558 = llvm.extractvalue %555[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %559 = llvm.extractvalue %555[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %560 = llvm.extractvalue %555[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %561 = llvm.extractvalue %555[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %562 = llvm.extractvalue %555[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %563 = llvm.extractvalue %555[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %564 = llvm.extractvalue %512[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %565 = llvm.extractvalue %512[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %566 = llvm.extractvalue %512[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %567 = llvm.extractvalue %512[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %568 = llvm.extractvalue %512[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %569 = llvm.extractvalue %512[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %570 = llvm.extractvalue %512[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %571 = llvm.extractvalue %512[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %572 = llvm.extractvalue %39[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %573 = llvm.extractvalue %39[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %574 = llvm.extractvalue %39[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %575 = llvm.extractvalue %39[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %576 = llvm.extractvalue %39[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %577 = llvm.extractvalue %39[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %578 = llvm.extractvalue %39[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %579 = llvm.extractvalue %39[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %580 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %581 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %582 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %583 = llvm.insertelement %572, %581[%582 : i32] : vector<1xbf16> loc(#loc15)
    %584 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%556, %564, %583) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %585 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %586 = llvm.extractelement %584[%585 : i32] : vector<1xbf16> loc(#loc15)
    %587 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %588 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %589 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %590 = llvm.insertelement %573, %588[%589 : i32] : vector<1xbf16> loc(#loc15)
    %591 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%557, %565, %590) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %592 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %593 = llvm.extractelement %591[%592 : i32] : vector<1xbf16> loc(#loc15)
    %594 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %595 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %596 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %597 = llvm.insertelement %574, %595[%596 : i32] : vector<1xbf16> loc(#loc15)
    %598 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%558, %566, %597) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %599 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %600 = llvm.extractelement %598[%599 : i32] : vector<1xbf16> loc(#loc15)
    %601 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %602 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %603 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %604 = llvm.insertelement %575, %602[%603 : i32] : vector<1xbf16> loc(#loc15)
    %605 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%559, %567, %604) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %606 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %607 = llvm.extractelement %605[%606 : i32] : vector<1xbf16> loc(#loc15)
    %608 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %609 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %610 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %611 = llvm.insertelement %576, %609[%610 : i32] : vector<1xbf16> loc(#loc15)
    %612 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%560, %568, %611) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %613 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %614 = llvm.extractelement %612[%613 : i32] : vector<1xbf16> loc(#loc15)
    %615 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %616 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %617 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %618 = llvm.insertelement %577, %616[%617 : i32] : vector<1xbf16> loc(#loc15)
    %619 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%561, %569, %618) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %620 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %621 = llvm.extractelement %619[%620 : i32] : vector<1xbf16> loc(#loc15)
    %622 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %623 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %624 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %625 = llvm.insertelement %578, %623[%624 : i32] : vector<1xbf16> loc(#loc15)
    %626 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%562, %570, %625) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %627 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %628 = llvm.extractelement %626[%627 : i32] : vector<1xbf16> loc(#loc15)
    %629 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %630 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %631 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %632 = llvm.insertelement %579, %630[%631 : i32] : vector<1xbf16> loc(#loc15)
    %633 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%563, %571, %632) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %634 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %635 = llvm.extractelement %633[%634 : i32] : vector<1xbf16> loc(#loc15)
    %636 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc15)
    %637 = llvm.insertvalue %586, %636[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %638 = llvm.insertvalue %593, %637[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %639 = llvm.insertvalue %600, %638[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %640 = llvm.insertvalue %607, %639[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %641 = llvm.insertvalue %614, %640[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %642 = llvm.insertvalue %621, %641[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %643 = llvm.insertvalue %628, %642[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %644 = llvm.insertvalue %635, %643[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %645 = builtin.unrealized_conversion_cast %644 : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> to tensor<64x32xbf16, #blocked> loc(#loc15)
    %646 = builtin.unrealized_conversion_cast %645 : tensor<64x32xbf16, #blocked> to !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc2)
    %647 = rocdl.workgroup.id.y : i32 loc(#loc16)
    %648 = llvm.mul %647, %40 : i32 loc(#loc17)
    %649 = llvm.bitcast %648 : i32 to i32 loc(#loc18)
    %650 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc18)
    %651 = llvm.insertvalue %649, %650[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %652 = llvm.insertvalue %649, %651[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %653 = llvm.insertvalue %649, %652[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %654 = llvm.insertvalue %649, %653[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %655 = llvm.insertvalue %649, %654[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %656 = llvm.insertvalue %649, %655[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %657 = llvm.insertvalue %649, %656[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %658 = llvm.insertvalue %649, %657[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %659 = llvm.extractvalue %658[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %660 = llvm.extractvalue %658[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %661 = llvm.extractvalue %658[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %662 = llvm.extractvalue %658[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %663 = llvm.extractvalue %658[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %664 = llvm.extractvalue %658[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %665 = llvm.extractvalue %658[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %666 = llvm.extractvalue %658[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %667 = llvm.extractvalue %127[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %668 = llvm.extractvalue %127[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %669 = llvm.extractvalue %127[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %670 = llvm.extractvalue %127[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %671 = llvm.extractvalue %127[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %672 = llvm.extractvalue %127[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %673 = llvm.extractvalue %127[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %674 = llvm.extractvalue %127[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %675 = llvm.add %659, %667 : i32 loc(#loc18)
    %676 = llvm.add %660, %668 : i32 loc(#loc18)
    %677 = llvm.add %661, %669 : i32 loc(#loc18)
    %678 = llvm.add %662, %670 : i32 loc(#loc18)
    %679 = llvm.add %663, %671 : i32 loc(#loc18)
    %680 = llvm.add %664, %672 : i32 loc(#loc18)
    %681 = llvm.add %665, %673 : i32 loc(#loc18)
    %682 = llvm.add %666, %674 : i32 loc(#loc18)
    %683 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc18)
    %684 = llvm.insertvalue %675, %683[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %685 = llvm.insertvalue %676, %684[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %686 = llvm.insertvalue %677, %685[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %687 = llvm.insertvalue %678, %686[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %688 = llvm.insertvalue %679, %687[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %689 = llvm.insertvalue %680, %688[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %690 = llvm.insertvalue %681, %689[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %691 = llvm.insertvalue %682, %690[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %692 = llvm.extractvalue %691[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %693 = llvm.extractvalue %691[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %694 = llvm.extractvalue %691[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %695 = llvm.extractvalue %691[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %696 = llvm.extractvalue %691[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %697 = llvm.extractvalue %691[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %698 = llvm.extractvalue %691[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %699 = llvm.extractvalue %691[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %700 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc19)
    %701 = llvm.insertvalue %692, %700[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %702 = llvm.insertvalue %693, %701[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %703 = llvm.insertvalue %694, %702[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %704 = llvm.insertvalue %695, %703[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %705 = llvm.insertvalue %696, %704[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %706 = llvm.insertvalue %697, %705[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %707 = llvm.insertvalue %698, %706[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %708 = llvm.insertvalue %699, %707[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc19)
    %709 = llvm.mul %648, %arg7 : i32 loc(#loc20)
    %710 = llvm.bitcast %arg7 : i32 to i32 loc(#loc20)
    %711 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc20)
    %712 = llvm.insertvalue %710, %711[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %713 = llvm.insertvalue %710, %712[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %714 = llvm.insertvalue %710, %713[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %715 = llvm.insertvalue %710, %714[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %716 = llvm.insertvalue %710, %715[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %717 = llvm.insertvalue %710, %716[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %718 = llvm.insertvalue %710, %717[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %719 = llvm.insertvalue %710, %718[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %720 = llvm.extractvalue %194[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %721 = llvm.extractvalue %194[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %722 = llvm.extractvalue %194[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %723 = llvm.extractvalue %194[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %724 = llvm.extractvalue %194[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %725 = llvm.extractvalue %194[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %726 = llvm.extractvalue %194[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %727 = llvm.extractvalue %194[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %728 = llvm.extractvalue %719[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %729 = llvm.extractvalue %719[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %730 = llvm.extractvalue %719[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %731 = llvm.extractvalue %719[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %732 = llvm.extractvalue %719[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %733 = llvm.extractvalue %719[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %734 = llvm.extractvalue %719[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %735 = llvm.extractvalue %719[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %736 = llvm.mul %720, %728 : i32 loc(#loc20)
    %737 = llvm.mul %721, %729 : i32 loc(#loc20)
    %738 = llvm.mul %722, %730 : i32 loc(#loc20)
    %739 = llvm.mul %723, %731 : i32 loc(#loc20)
    %740 = llvm.mul %724, %732 : i32 loc(#loc20)
    %741 = llvm.mul %725, %733 : i32 loc(#loc20)
    %742 = llvm.mul %726, %734 : i32 loc(#loc20)
    %743 = llvm.mul %727, %735 : i32 loc(#loc20)
    %744 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc20)
    %745 = llvm.insertvalue %736, %744[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %746 = llvm.insertvalue %737, %745[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %747 = llvm.insertvalue %738, %746[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %748 = llvm.insertvalue %739, %747[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %749 = llvm.insertvalue %740, %748[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %750 = llvm.insertvalue %741, %749[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %751 = llvm.insertvalue %742, %750[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %752 = llvm.insertvalue %743, %751[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc20)
    %753 = llvm.getelementptr %arg2[%709] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc20)
    %754 = llvm.extractvalue %752[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %755 = llvm.extractvalue %752[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %756 = llvm.extractvalue %752[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %757 = llvm.extractvalue %752[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %758 = llvm.extractvalue %752[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %759 = llvm.extractvalue %752[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %760 = llvm.extractvalue %752[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %761 = llvm.extractvalue %752[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %762 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc21)
    %763 = llvm.insertvalue %754, %762[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %764 = llvm.insertvalue %755, %763[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %765 = llvm.insertvalue %756, %764[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %766 = llvm.insertvalue %757, %765[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %767 = llvm.insertvalue %758, %766[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %768 = llvm.insertvalue %759, %767[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %769 = llvm.insertvalue %760, %768[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %770 = llvm.insertvalue %761, %769[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %771 = llvm.extractvalue %321[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %772 = llvm.extractvalue %321[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %773 = llvm.extractvalue %321[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %774 = llvm.extractvalue %321[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %775 = llvm.extractvalue %321[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %776 = llvm.extractvalue %321[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %777 = llvm.extractvalue %321[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %778 = llvm.extractvalue %321[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %779 = llvm.extractvalue %770[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %780 = llvm.extractvalue %770[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %781 = llvm.extractvalue %770[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %782 = llvm.extractvalue %770[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %783 = llvm.extractvalue %770[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %784 = llvm.extractvalue %770[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %785 = llvm.extractvalue %770[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %786 = llvm.extractvalue %770[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %787 = llvm.add %771, %779 : i32 loc(#loc21)
    %788 = llvm.add %772, %780 : i32 loc(#loc21)
    %789 = llvm.add %773, %781 : i32 loc(#loc21)
    %790 = llvm.add %774, %782 : i32 loc(#loc21)
    %791 = llvm.add %775, %783 : i32 loc(#loc21)
    %792 = llvm.add %776, %784 : i32 loc(#loc21)
    %793 = llvm.add %777, %785 : i32 loc(#loc21)
    %794 = llvm.add %778, %786 : i32 loc(#loc21)
    %795 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc21)
    %796 = llvm.insertvalue %787, %795[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %797 = llvm.insertvalue %788, %796[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %798 = llvm.insertvalue %789, %797[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %799 = llvm.insertvalue %790, %798[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %800 = llvm.insertvalue %791, %799[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %801 = llvm.insertvalue %792, %800[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %802 = llvm.insertvalue %793, %801[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %803 = llvm.insertvalue %794, %802[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc21)
    %804 = llvm.bitcast %arg4 : i32 to i32 loc(#loc22)
    %805 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc22)
    %806 = llvm.insertvalue %804, %805[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %807 = llvm.insertvalue %804, %806[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %808 = llvm.insertvalue %804, %807[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %809 = llvm.insertvalue %804, %808[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %810 = llvm.insertvalue %804, %809[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %811 = llvm.insertvalue %804, %810[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %812 = llvm.insertvalue %804, %811[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %813 = llvm.insertvalue %804, %812[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %814 = llvm.extractvalue %708[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %815 = llvm.extractvalue %708[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %816 = llvm.extractvalue %708[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %817 = llvm.extractvalue %708[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %818 = llvm.extractvalue %708[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %819 = llvm.extractvalue %708[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %820 = llvm.extractvalue %708[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %821 = llvm.extractvalue %708[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %822 = llvm.extractvalue %813[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %823 = llvm.extractvalue %813[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %824 = llvm.extractvalue %813[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %825 = llvm.extractvalue %813[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %826 = llvm.extractvalue %813[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %827 = llvm.extractvalue %813[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %828 = llvm.extractvalue %813[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %829 = llvm.extractvalue %813[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc22)
    %830 = llvm.icmp "slt" %814, %822 : i32 loc(#loc22)
    %831 = llvm.icmp "slt" %815, %823 : i32 loc(#loc22)
    %832 = llvm.icmp "slt" %816, %824 : i32 loc(#loc22)
    %833 = llvm.icmp "slt" %817, %825 : i32 loc(#loc22)
    %834 = llvm.icmp "slt" %818, %826 : i32 loc(#loc22)
    %835 = llvm.icmp "slt" %819, %827 : i32 loc(#loc22)
    %836 = llvm.icmp "slt" %820, %828 : i32 loc(#loc22)
    %837 = llvm.icmp "slt" %821, %829 : i32 loc(#loc22)
    %838 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc22)
    %839 = llvm.insertvalue %830, %838[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %840 = llvm.insertvalue %831, %839[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %841 = llvm.insertvalue %832, %840[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %842 = llvm.insertvalue %833, %841[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %843 = llvm.insertvalue %834, %842[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %844 = llvm.insertvalue %835, %843[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %845 = llvm.insertvalue %836, %844[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %846 = llvm.insertvalue %837, %845[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc22)
    %847 = llvm.extractvalue %846[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %848 = llvm.extractvalue %846[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %849 = llvm.extractvalue %846[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %850 = llvm.extractvalue %846[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %851 = llvm.extractvalue %846[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %852 = llvm.extractvalue %846[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %853 = llvm.extractvalue %846[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %854 = llvm.extractvalue %846[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %855 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc23)
    %856 = llvm.insertvalue %847, %855[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %857 = llvm.insertvalue %848, %856[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %858 = llvm.insertvalue %849, %857[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %859 = llvm.insertvalue %850, %858[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %860 = llvm.insertvalue %851, %859[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %861 = llvm.insertvalue %852, %860[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %862 = llvm.insertvalue %853, %861[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %863 = llvm.insertvalue %854, %862[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %864 = llvm.extractvalue %863[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %865 = llvm.extractvalue %863[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %866 = llvm.extractvalue %863[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %867 = llvm.extractvalue %863[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %868 = llvm.extractvalue %863[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %869 = llvm.extractvalue %863[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %870 = llvm.extractvalue %863[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %871 = llvm.extractvalue %863[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %872 = llvm.extractvalue %446[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %873 = llvm.extractvalue %446[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %874 = llvm.extractvalue %446[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %875 = llvm.extractvalue %446[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %876 = llvm.extractvalue %446[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %877 = llvm.extractvalue %446[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %878 = llvm.extractvalue %446[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %879 = llvm.extractvalue %446[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %880 = llvm.and %864, %872 : i1 loc(#loc23)
    %881 = llvm.and %865, %873 : i1 loc(#loc23)
    %882 = llvm.and %866, %874 : i1 loc(#loc23)
    %883 = llvm.and %867, %875 : i1 loc(#loc23)
    %884 = llvm.and %868, %876 : i1 loc(#loc23)
    %885 = llvm.and %869, %877 : i1 loc(#loc23)
    %886 = llvm.and %870, %878 : i1 loc(#loc23)
    %887 = llvm.and %871, %879 : i1 loc(#loc23)
    %888 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc23)
    %889 = llvm.insertvalue %880, %888[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %890 = llvm.insertvalue %881, %889[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %891 = llvm.insertvalue %882, %890[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %892 = llvm.insertvalue %883, %891[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %893 = llvm.insertvalue %884, %892[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %894 = llvm.insertvalue %885, %893[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %895 = llvm.insertvalue %886, %894[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %896 = llvm.insertvalue %887, %895[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %897 = llvm.extractvalue %365[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %898 = llvm.extractvalue %365[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %899 = llvm.extractvalue %365[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %900 = llvm.extractvalue %365[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %901 = llvm.extractvalue %365[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %902 = llvm.extractvalue %365[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %903 = llvm.extractvalue %365[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %904 = llvm.extractvalue %365[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %905 = llvm.extractvalue %896[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %906 = llvm.extractvalue %896[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %907 = llvm.extractvalue %896[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %908 = llvm.extractvalue %896[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %909 = llvm.extractvalue %896[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %910 = llvm.extractvalue %896[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %911 = llvm.extractvalue %896[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %912 = llvm.extractvalue %896[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %913 = llvm.and %897, %905 : i1 loc(#loc2)
    %914 = llvm.and %898, %906 : i1 loc(#loc2)
    %915 = llvm.and %899, %907 : i1 loc(#loc2)
    %916 = llvm.and %900, %908 : i1 loc(#loc2)
    %917 = llvm.and %901, %909 : i1 loc(#loc2)
    %918 = llvm.and %902, %910 : i1 loc(#loc2)
    %919 = llvm.and %903, %911 : i1 loc(#loc2)
    %920 = llvm.and %904, %912 : i1 loc(#loc2)
    %921 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc2)
    %922 = llvm.insertvalue %913, %921[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %923 = llvm.insertvalue %914, %922[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %924 = llvm.insertvalue %915, %923[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %925 = llvm.insertvalue %916, %924[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %926 = llvm.insertvalue %917, %925[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %927 = llvm.insertvalue %918, %926[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %928 = llvm.insertvalue %919, %927[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %929 = llvm.insertvalue %920, %928[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %930 = llvm.bitcast %753 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc24)
    %931 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc24)
    %932 = llvm.insertvalue %930, %931[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %933 = llvm.insertvalue %930, %932[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %934 = llvm.insertvalue %930, %933[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %935 = llvm.insertvalue %930, %934[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %936 = llvm.insertvalue %930, %935[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %937 = llvm.insertvalue %930, %936[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %938 = llvm.insertvalue %930, %937[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %939 = llvm.insertvalue %930, %938[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %940 = llvm.extractvalue %939[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %941 = llvm.extractvalue %939[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %942 = llvm.extractvalue %939[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %943 = llvm.extractvalue %939[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %944 = llvm.extractvalue %939[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %945 = llvm.extractvalue %939[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %946 = llvm.extractvalue %939[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %947 = llvm.extractvalue %939[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %948 = llvm.extractvalue %803[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %949 = llvm.extractvalue %803[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %950 = llvm.extractvalue %803[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %951 = llvm.extractvalue %803[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %952 = llvm.extractvalue %803[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %953 = llvm.extractvalue %803[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %954 = llvm.extractvalue %803[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %955 = llvm.extractvalue %803[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %956 = llvm.getelementptr %940[%948] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %957 = llvm.getelementptr %941[%949] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %958 = llvm.getelementptr %942[%950] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %959 = llvm.getelementptr %943[%951] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %960 = llvm.getelementptr %944[%952] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %961 = llvm.getelementptr %945[%953] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %962 = llvm.getelementptr %946[%954] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %963 = llvm.getelementptr %947[%955] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %964 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc24)
    %965 = llvm.insertvalue %956, %964[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %966 = llvm.insertvalue %957, %965[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %967 = llvm.insertvalue %958, %966[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %968 = llvm.insertvalue %959, %967[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %969 = llvm.insertvalue %960, %968[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %970 = llvm.insertvalue %961, %969[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %971 = llvm.insertvalue %962, %970[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %972 = llvm.insertvalue %963, %971[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %973 = llvm.extractvalue %972[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %974 = llvm.extractvalue %972[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %975 = llvm.extractvalue %972[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %976 = llvm.extractvalue %972[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %977 = llvm.extractvalue %972[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %978 = llvm.extractvalue %972[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %979 = llvm.extractvalue %972[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %980 = llvm.extractvalue %972[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %981 = llvm.extractvalue %929[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %982 = llvm.extractvalue %929[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %983 = llvm.extractvalue %929[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %984 = llvm.extractvalue %929[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %985 = llvm.extractvalue %929[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %986 = llvm.extractvalue %929[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %987 = llvm.extractvalue %929[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %988 = llvm.extractvalue %929[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %989 = llvm.extractvalue %39[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %990 = llvm.extractvalue %39[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %991 = llvm.extractvalue %39[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %992 = llvm.extractvalue %39[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %993 = llvm.extractvalue %39[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %994 = llvm.extractvalue %39[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %995 = llvm.extractvalue %39[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %996 = llvm.extractvalue %39[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %997 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %998 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %999 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1000 = llvm.insertelement %989, %998[%999 : i32] : vector<1xbf16> loc(#loc24)
    %1001 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%973, %981, %1000) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1002 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1003 = llvm.extractelement %1001[%1002 : i32] : vector<1xbf16> loc(#loc24)
    %1004 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1005 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1006 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1007 = llvm.insertelement %990, %1005[%1006 : i32] : vector<1xbf16> loc(#loc24)
    %1008 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%974, %982, %1007) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1009 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1010 = llvm.extractelement %1008[%1009 : i32] : vector<1xbf16> loc(#loc24)
    %1011 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1012 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1013 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1014 = llvm.insertelement %991, %1012[%1013 : i32] : vector<1xbf16> loc(#loc24)
    %1015 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%975, %983, %1014) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1016 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1017 = llvm.extractelement %1015[%1016 : i32] : vector<1xbf16> loc(#loc24)
    %1018 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1019 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1020 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1021 = llvm.insertelement %992, %1019[%1020 : i32] : vector<1xbf16> loc(#loc24)
    %1022 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%976, %984, %1021) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1023 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1024 = llvm.extractelement %1022[%1023 : i32] : vector<1xbf16> loc(#loc24)
    %1025 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1026 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1027 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1028 = llvm.insertelement %993, %1026[%1027 : i32] : vector<1xbf16> loc(#loc24)
    %1029 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%977, %985, %1028) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1030 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1031 = llvm.extractelement %1029[%1030 : i32] : vector<1xbf16> loc(#loc24)
    %1032 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1033 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1034 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1035 = llvm.insertelement %994, %1033[%1034 : i32] : vector<1xbf16> loc(#loc24)
    %1036 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%978, %986, %1035) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1037 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1038 = llvm.extractelement %1036[%1037 : i32] : vector<1xbf16> loc(#loc24)
    %1039 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1040 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1041 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1042 = llvm.insertelement %995, %1040[%1041 : i32] : vector<1xbf16> loc(#loc24)
    %1043 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%979, %987, %1042) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1044 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1045 = llvm.extractelement %1043[%1044 : i32] : vector<1xbf16> loc(#loc24)
    %1046 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1047 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1048 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1049 = llvm.insertelement %996, %1047[%1048 : i32] : vector<1xbf16> loc(#loc24)
    %1050 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%980, %988, %1049) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1051 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1052 = llvm.extractelement %1050[%1051 : i32] : vector<1xbf16> loc(#loc24)
    %1053 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc24)
    %1054 = llvm.insertvalue %1003, %1053[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1055 = llvm.insertvalue %1010, %1054[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1056 = llvm.insertvalue %1017, %1055[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1057 = llvm.insertvalue %1024, %1056[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1058 = llvm.insertvalue %1031, %1057[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1059 = llvm.insertvalue %1038, %1058[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1060 = llvm.insertvalue %1045, %1059[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1061 = llvm.insertvalue %1052, %1060[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1062 = builtin.unrealized_conversion_cast %1061 : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> to tensor<64x32xbf16, #blocked> loc(#loc24)
    %1063 = builtin.unrealized_conversion_cast %1062 : tensor<64x32xbf16, #blocked> to !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc2)
    %1064 = llvm.extractvalue %308[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1065 = llvm.extractvalue %28[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1066 = llvm.add %1064, %1065 : i32 loc(#loc25)
    %1067 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc25)
    %1068 = llvm.insertvalue %1066, %1067[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1069 = llvm.getelementptr %239[%24] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc9)
    %1070 = llvm.icmp "sgt" %arg5, %24 : i32 loc(#loc2)
    %1071 = llvm.bitcast %1070 : i1 to i1 loc(#loc2)
    %1072 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc2)
    %1073 = llvm.insertvalue %1071, %1072[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1074 = llvm.insertvalue %1071, %1073[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1075 = llvm.insertvalue %1071, %1074[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1076 = llvm.insertvalue %1071, %1075[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1077 = llvm.insertvalue %1071, %1076[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1078 = llvm.insertvalue %1071, %1077[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1079 = llvm.insertvalue %1071, %1078[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1080 = llvm.insertvalue %1071, %1079[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1081 = llvm.extractvalue %1068[0] : !llvm.struct<(i32)>  loc(#loc13)
    %1082 = llvm.extractvalue %428[0] : !llvm.struct<(i32)>  loc(#loc13)
    %1083 = llvm.icmp "slt" %1081, %1082 : i32 loc(#loc13)
    %1084 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc13)
    %1085 = llvm.insertvalue %1083, %1084[0] : !llvm.struct<(i1)>  loc(#loc13)
    %1086 = llvm.extractvalue %1085[0] : !llvm.struct<(i1)>  loc(#loc14)
    %1087 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc14)
    %1088 = llvm.insertvalue %1086, %1087[0] : !llvm.struct<(i1)>  loc(#loc14)
    %1089 = llvm.extractvalue %1088[0] : !llvm.struct<(i1)>  loc(#loc12)
    %1090 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %1091 = llvm.insertvalue %1089, %1090[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1092 = llvm.insertvalue %1089, %1091[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1093 = llvm.insertvalue %1089, %1092[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1094 = llvm.insertvalue %1089, %1093[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1095 = llvm.insertvalue %1089, %1094[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1096 = llvm.insertvalue %1089, %1095[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1097 = llvm.insertvalue %1089, %1096[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1098 = llvm.insertvalue %1089, %1097[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1099 = llvm.extractvalue %425[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1100 = llvm.extractvalue %425[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1101 = llvm.extractvalue %425[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1102 = llvm.extractvalue %425[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1103 = llvm.extractvalue %425[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1104 = llvm.extractvalue %425[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1105 = llvm.extractvalue %425[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1106 = llvm.extractvalue %425[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1107 = llvm.extractvalue %1098[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1108 = llvm.extractvalue %1098[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1109 = llvm.extractvalue %1098[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1110 = llvm.extractvalue %1098[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1111 = llvm.extractvalue %1098[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1112 = llvm.extractvalue %1098[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1113 = llvm.extractvalue %1098[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1114 = llvm.extractvalue %1098[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1115 = llvm.and %1099, %1107 : i1 loc(#loc12)
    %1116 = llvm.and %1100, %1108 : i1 loc(#loc12)
    %1117 = llvm.and %1101, %1109 : i1 loc(#loc12)
    %1118 = llvm.and %1102, %1110 : i1 loc(#loc12)
    %1119 = llvm.and %1103, %1111 : i1 loc(#loc12)
    %1120 = llvm.and %1104, %1112 : i1 loc(#loc12)
    %1121 = llvm.and %1105, %1113 : i1 loc(#loc12)
    %1122 = llvm.and %1106, %1114 : i1 loc(#loc12)
    %1123 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %1124 = llvm.insertvalue %1115, %1123[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1125 = llvm.insertvalue %1116, %1124[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1126 = llvm.insertvalue %1117, %1125[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1127 = llvm.insertvalue %1118, %1126[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1128 = llvm.insertvalue %1119, %1127[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1129 = llvm.insertvalue %1120, %1128[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1130 = llvm.insertvalue %1121, %1129[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1131 = llvm.insertvalue %1122, %1130[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1132 = llvm.extractvalue %1080[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1133 = llvm.extractvalue %1080[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1134 = llvm.extractvalue %1080[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1135 = llvm.extractvalue %1080[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1136 = llvm.extractvalue %1080[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1137 = llvm.extractvalue %1080[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1138 = llvm.extractvalue %1080[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1139 = llvm.extractvalue %1080[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1140 = llvm.extractvalue %1131[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1141 = llvm.extractvalue %1131[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1142 = llvm.extractvalue %1131[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1143 = llvm.extractvalue %1131[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1144 = llvm.extractvalue %1131[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1145 = llvm.extractvalue %1131[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1146 = llvm.extractvalue %1131[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1147 = llvm.extractvalue %1131[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1148 = llvm.and %1132, %1140 : i1 loc(#loc2)
    %1149 = llvm.and %1133, %1141 : i1 loc(#loc2)
    %1150 = llvm.and %1134, %1142 : i1 loc(#loc2)
    %1151 = llvm.and %1135, %1143 : i1 loc(#loc2)
    %1152 = llvm.and %1136, %1144 : i1 loc(#loc2)
    %1153 = llvm.and %1137, %1145 : i1 loc(#loc2)
    %1154 = llvm.and %1138, %1146 : i1 loc(#loc2)
    %1155 = llvm.and %1139, %1147 : i1 loc(#loc2)
    %1156 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc2)
    %1157 = llvm.insertvalue %1148, %1156[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1158 = llvm.insertvalue %1149, %1157[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1159 = llvm.insertvalue %1150, %1158[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1160 = llvm.insertvalue %1151, %1159[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1161 = llvm.insertvalue %1152, %1160[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1162 = llvm.insertvalue %1153, %1161[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1163 = llvm.insertvalue %1154, %1162[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1164 = llvm.insertvalue %1155, %1163[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1165 = llvm.bitcast %1069 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc15)
    %1166 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc15)
    %1167 = llvm.insertvalue %1165, %1166[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1168 = llvm.insertvalue %1165, %1167[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1169 = llvm.insertvalue %1165, %1168[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1170 = llvm.insertvalue %1165, %1169[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1171 = llvm.insertvalue %1165, %1170[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1172 = llvm.insertvalue %1165, %1171[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1173 = llvm.insertvalue %1165, %1172[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1174 = llvm.insertvalue %1165, %1173[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1175 = llvm.extractvalue %1174[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1176 = llvm.extractvalue %1174[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1177 = llvm.extractvalue %1174[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1178 = llvm.extractvalue %1174[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1179 = llvm.extractvalue %1174[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1180 = llvm.extractvalue %1174[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1181 = llvm.extractvalue %1174[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1182 = llvm.extractvalue %1174[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1183 = llvm.extractvalue %354[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1184 = llvm.extractvalue %354[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1185 = llvm.extractvalue %354[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1186 = llvm.extractvalue %354[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1187 = llvm.extractvalue %354[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1188 = llvm.extractvalue %354[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1189 = llvm.extractvalue %354[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1190 = llvm.extractvalue %354[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1191 = llvm.getelementptr %1175[%1183] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1192 = llvm.getelementptr %1176[%1184] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1193 = llvm.getelementptr %1177[%1185] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1194 = llvm.getelementptr %1178[%1186] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1195 = llvm.getelementptr %1179[%1187] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1196 = llvm.getelementptr %1180[%1188] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1197 = llvm.getelementptr %1181[%1189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1198 = llvm.getelementptr %1182[%1190] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1199 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc15)
    %1200 = llvm.insertvalue %1191, %1199[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1201 = llvm.insertvalue %1192, %1200[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1202 = llvm.insertvalue %1193, %1201[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1203 = llvm.insertvalue %1194, %1202[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1204 = llvm.insertvalue %1195, %1203[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1205 = llvm.insertvalue %1196, %1204[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1206 = llvm.insertvalue %1197, %1205[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1207 = llvm.insertvalue %1198, %1206[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1208 = llvm.extractvalue %1207[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1209 = llvm.extractvalue %1207[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1210 = llvm.extractvalue %1207[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1211 = llvm.extractvalue %1207[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1212 = llvm.extractvalue %1207[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1213 = llvm.extractvalue %1207[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1214 = llvm.extractvalue %1207[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1215 = llvm.extractvalue %1207[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1216 = llvm.extractvalue %1164[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1217 = llvm.extractvalue %1164[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1218 = llvm.extractvalue %1164[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1219 = llvm.extractvalue %1164[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1220 = llvm.extractvalue %1164[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1221 = llvm.extractvalue %1164[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1222 = llvm.extractvalue %1164[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1223 = llvm.extractvalue %1164[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1224 = llvm.extractvalue %39[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1225 = llvm.extractvalue %39[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1226 = llvm.extractvalue %39[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1227 = llvm.extractvalue %39[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1228 = llvm.extractvalue %39[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1229 = llvm.extractvalue %39[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1230 = llvm.extractvalue %39[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1231 = llvm.extractvalue %39[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1232 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1233 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1234 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1235 = llvm.insertelement %1224, %1233[%1234 : i32] : vector<1xbf16> loc(#loc15)
    %1236 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1208, %1216, %1235) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1237 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1238 = llvm.extractelement %1236[%1237 : i32] : vector<1xbf16> loc(#loc15)
    %1239 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1240 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1241 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1242 = llvm.insertelement %1225, %1240[%1241 : i32] : vector<1xbf16> loc(#loc15)
    %1243 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1209, %1217, %1242) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1244 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1245 = llvm.extractelement %1243[%1244 : i32] : vector<1xbf16> loc(#loc15)
    %1246 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1247 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1248 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1249 = llvm.insertelement %1226, %1247[%1248 : i32] : vector<1xbf16> loc(#loc15)
    %1250 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1210, %1218, %1249) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1251 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1252 = llvm.extractelement %1250[%1251 : i32] : vector<1xbf16> loc(#loc15)
    %1253 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1254 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1255 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1256 = llvm.insertelement %1227, %1254[%1255 : i32] : vector<1xbf16> loc(#loc15)
    %1257 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1211, %1219, %1256) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1258 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1259 = llvm.extractelement %1257[%1258 : i32] : vector<1xbf16> loc(#loc15)
    %1260 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1261 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1262 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1263 = llvm.insertelement %1228, %1261[%1262 : i32] : vector<1xbf16> loc(#loc15)
    %1264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1212, %1220, %1263) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1265 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1266 = llvm.extractelement %1264[%1265 : i32] : vector<1xbf16> loc(#loc15)
    %1267 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1268 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1269 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1270 = llvm.insertelement %1229, %1268[%1269 : i32] : vector<1xbf16> loc(#loc15)
    %1271 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1213, %1221, %1270) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1272 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1273 = llvm.extractelement %1271[%1272 : i32] : vector<1xbf16> loc(#loc15)
    %1274 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1275 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1276 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1277 = llvm.insertelement %1230, %1275[%1276 : i32] : vector<1xbf16> loc(#loc15)
    %1278 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1214, %1222, %1277) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1279 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1280 = llvm.extractelement %1278[%1279 : i32] : vector<1xbf16> loc(#loc15)
    %1281 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1282 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1283 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1284 = llvm.insertelement %1231, %1282[%1283 : i32] : vector<1xbf16> loc(#loc15)
    %1285 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1215, %1223, %1284) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1286 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1287 = llvm.extractelement %1285[%1286 : i32] : vector<1xbf16> loc(#loc15)
    %1288 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc15)
    %1289 = llvm.insertvalue %1238, %1288[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1290 = llvm.insertvalue %1245, %1289[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1291 = llvm.insertvalue %1252, %1290[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1292 = llvm.insertvalue %1259, %1291[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1293 = llvm.insertvalue %1266, %1292[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1294 = llvm.insertvalue %1273, %1293[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1295 = llvm.insertvalue %1280, %1294[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1296 = llvm.insertvalue %1287, %1295[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1297 = builtin.unrealized_conversion_cast %1296 : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> to tensor<64x32xbf16, #blocked> loc(#loc15)
    %1298 = builtin.unrealized_conversion_cast %1297 : tensor<64x32xbf16, #blocked> to !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc2)
    %1299 = llvm.getelementptr %753[%24] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %1300 = llvm.extractvalue %863[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1301 = llvm.extractvalue %863[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1302 = llvm.extractvalue %863[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1303 = llvm.extractvalue %863[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1304 = llvm.extractvalue %863[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1305 = llvm.extractvalue %863[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1306 = llvm.extractvalue %863[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1307 = llvm.extractvalue %863[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1308 = llvm.extractvalue %1098[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1309 = llvm.extractvalue %1098[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1310 = llvm.extractvalue %1098[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1311 = llvm.extractvalue %1098[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1312 = llvm.extractvalue %1098[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1313 = llvm.extractvalue %1098[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1314 = llvm.extractvalue %1098[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1315 = llvm.extractvalue %1098[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1316 = llvm.and %1300, %1308 : i1 loc(#loc23)
    %1317 = llvm.and %1301, %1309 : i1 loc(#loc23)
    %1318 = llvm.and %1302, %1310 : i1 loc(#loc23)
    %1319 = llvm.and %1303, %1311 : i1 loc(#loc23)
    %1320 = llvm.and %1304, %1312 : i1 loc(#loc23)
    %1321 = llvm.and %1305, %1313 : i1 loc(#loc23)
    %1322 = llvm.and %1306, %1314 : i1 loc(#loc23)
    %1323 = llvm.and %1307, %1315 : i1 loc(#loc23)
    %1324 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc23)
    %1325 = llvm.insertvalue %1316, %1324[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1326 = llvm.insertvalue %1317, %1325[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1327 = llvm.insertvalue %1318, %1326[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1328 = llvm.insertvalue %1319, %1327[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1329 = llvm.insertvalue %1320, %1328[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1330 = llvm.insertvalue %1321, %1329[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1331 = llvm.insertvalue %1322, %1330[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1332 = llvm.insertvalue %1323, %1331[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1333 = llvm.extractvalue %1080[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1334 = llvm.extractvalue %1080[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1335 = llvm.extractvalue %1080[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1336 = llvm.extractvalue %1080[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1337 = llvm.extractvalue %1080[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1338 = llvm.extractvalue %1080[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1339 = llvm.extractvalue %1080[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1340 = llvm.extractvalue %1080[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1341 = llvm.extractvalue %1332[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1342 = llvm.extractvalue %1332[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1343 = llvm.extractvalue %1332[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1344 = llvm.extractvalue %1332[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1345 = llvm.extractvalue %1332[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1346 = llvm.extractvalue %1332[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1347 = llvm.extractvalue %1332[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1348 = llvm.extractvalue %1332[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1349 = llvm.and %1333, %1341 : i1 loc(#loc2)
    %1350 = llvm.and %1334, %1342 : i1 loc(#loc2)
    %1351 = llvm.and %1335, %1343 : i1 loc(#loc2)
    %1352 = llvm.and %1336, %1344 : i1 loc(#loc2)
    %1353 = llvm.and %1337, %1345 : i1 loc(#loc2)
    %1354 = llvm.and %1338, %1346 : i1 loc(#loc2)
    %1355 = llvm.and %1339, %1347 : i1 loc(#loc2)
    %1356 = llvm.and %1340, %1348 : i1 loc(#loc2)
    %1357 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc2)
    %1358 = llvm.insertvalue %1349, %1357[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1359 = llvm.insertvalue %1350, %1358[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1360 = llvm.insertvalue %1351, %1359[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1361 = llvm.insertvalue %1352, %1360[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1362 = llvm.insertvalue %1353, %1361[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1363 = llvm.insertvalue %1354, %1362[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1364 = llvm.insertvalue %1355, %1363[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1365 = llvm.insertvalue %1356, %1364[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc2)
    %1366 = llvm.bitcast %1299 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc24)
    %1367 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc24)
    %1368 = llvm.insertvalue %1366, %1367[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1369 = llvm.insertvalue %1366, %1368[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1370 = llvm.insertvalue %1366, %1369[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1371 = llvm.insertvalue %1366, %1370[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1372 = llvm.insertvalue %1366, %1371[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1373 = llvm.insertvalue %1366, %1372[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1374 = llvm.insertvalue %1366, %1373[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1375 = llvm.insertvalue %1366, %1374[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1376 = llvm.extractvalue %1375[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1377 = llvm.extractvalue %1375[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1378 = llvm.extractvalue %1375[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1379 = llvm.extractvalue %1375[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1380 = llvm.extractvalue %1375[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1381 = llvm.extractvalue %1375[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1382 = llvm.extractvalue %1375[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1383 = llvm.extractvalue %1375[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1384 = llvm.extractvalue %803[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1385 = llvm.extractvalue %803[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1386 = llvm.extractvalue %803[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1387 = llvm.extractvalue %803[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1388 = llvm.extractvalue %803[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1389 = llvm.extractvalue %803[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1390 = llvm.extractvalue %803[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1391 = llvm.extractvalue %803[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %1392 = llvm.getelementptr %1376[%1384] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1393 = llvm.getelementptr %1377[%1385] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1394 = llvm.getelementptr %1378[%1386] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1395 = llvm.getelementptr %1379[%1387] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1396 = llvm.getelementptr %1380[%1388] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1397 = llvm.getelementptr %1381[%1389] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1398 = llvm.getelementptr %1382[%1390] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1399 = llvm.getelementptr %1383[%1391] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %1400 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc24)
    %1401 = llvm.insertvalue %1392, %1400[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1402 = llvm.insertvalue %1393, %1401[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1403 = llvm.insertvalue %1394, %1402[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1404 = llvm.insertvalue %1395, %1403[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1405 = llvm.insertvalue %1396, %1404[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1406 = llvm.insertvalue %1397, %1405[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1407 = llvm.insertvalue %1398, %1406[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1408 = llvm.insertvalue %1399, %1407[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1409 = llvm.extractvalue %1408[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1410 = llvm.extractvalue %1408[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1411 = llvm.extractvalue %1408[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1412 = llvm.extractvalue %1408[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1413 = llvm.extractvalue %1408[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1414 = llvm.extractvalue %1408[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1415 = llvm.extractvalue %1408[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1416 = llvm.extractvalue %1408[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1417 = llvm.extractvalue %1365[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1418 = llvm.extractvalue %1365[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1419 = llvm.extractvalue %1365[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1420 = llvm.extractvalue %1365[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1421 = llvm.extractvalue %1365[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1422 = llvm.extractvalue %1365[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1423 = llvm.extractvalue %1365[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1424 = llvm.extractvalue %1365[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %1425 = llvm.extractvalue %39[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1426 = llvm.extractvalue %39[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1427 = llvm.extractvalue %39[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1428 = llvm.extractvalue %39[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1429 = llvm.extractvalue %39[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1430 = llvm.extractvalue %39[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1431 = llvm.extractvalue %39[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1432 = llvm.extractvalue %39[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1433 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1434 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1435 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1436 = llvm.insertelement %1425, %1434[%1435 : i32] : vector<1xbf16> loc(#loc24)
    %1437 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1409, %1417, %1436) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1438 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1439 = llvm.extractelement %1437[%1438 : i32] : vector<1xbf16> loc(#loc24)
    %1440 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1441 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1442 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1443 = llvm.insertelement %1426, %1441[%1442 : i32] : vector<1xbf16> loc(#loc24)
    %1444 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1410, %1418, %1443) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1445 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1446 = llvm.extractelement %1444[%1445 : i32] : vector<1xbf16> loc(#loc24)
    %1447 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1448 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1449 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1450 = llvm.insertelement %1427, %1448[%1449 : i32] : vector<1xbf16> loc(#loc24)
    %1451 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1411, %1419, %1450) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1452 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1453 = llvm.extractelement %1451[%1452 : i32] : vector<1xbf16> loc(#loc24)
    %1454 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1455 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1456 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1457 = llvm.insertelement %1428, %1455[%1456 : i32] : vector<1xbf16> loc(#loc24)
    %1458 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1412, %1420, %1457) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1459 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1460 = llvm.extractelement %1458[%1459 : i32] : vector<1xbf16> loc(#loc24)
    %1461 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1462 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1463 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1464 = llvm.insertelement %1429, %1462[%1463 : i32] : vector<1xbf16> loc(#loc24)
    %1465 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1413, %1421, %1464) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1466 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1467 = llvm.extractelement %1465[%1466 : i32] : vector<1xbf16> loc(#loc24)
    %1468 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1469 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1470 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1471 = llvm.insertelement %1430, %1469[%1470 : i32] : vector<1xbf16> loc(#loc24)
    %1472 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1414, %1422, %1471) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1473 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1474 = llvm.extractelement %1472[%1473 : i32] : vector<1xbf16> loc(#loc24)
    %1475 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1476 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1477 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1478 = llvm.insertelement %1431, %1476[%1477 : i32] : vector<1xbf16> loc(#loc24)
    %1479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1415, %1423, %1478) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1480 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1481 = llvm.extractelement %1479[%1480 : i32] : vector<1xbf16> loc(#loc24)
    %1482 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %1483 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %1484 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %1485 = llvm.insertelement %1432, %1483[%1484 : i32] : vector<1xbf16> loc(#loc24)
    %1486 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1416, %1424, %1485) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %1487 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %1488 = llvm.extractelement %1486[%1487 : i32] : vector<1xbf16> loc(#loc24)
    %1489 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc24)
    %1490 = llvm.insertvalue %1439, %1489[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1491 = llvm.insertvalue %1446, %1490[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1492 = llvm.insertvalue %1453, %1491[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1493 = llvm.insertvalue %1460, %1492[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1494 = llvm.insertvalue %1467, %1493[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1495 = llvm.insertvalue %1474, %1494[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1496 = llvm.insertvalue %1481, %1495[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1497 = llvm.insertvalue %1488, %1496[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %1498 = builtin.unrealized_conversion_cast %1497 : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> to tensor<64x32xbf16, #blocked> loc(#loc24)
    %1499 = builtin.unrealized_conversion_cast %1498 : tensor<64x32xbf16, #blocked> to !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc2)
    %1500 = llvm.mlir.constant(0 : index) : i32 loc(#loc6)
    %1501 = rocdl.workitem.id.x : i32 loc(#loc6)
    %1502 = llvm.mlir.constant(64 : i32) : i32 loc(#loc6)
    %1503 = llvm.urem %1501, %1502 : i32 loc(#loc6)
    %1504 = llvm.udiv %1501, %1502 : i32 loc(#loc6)
    %1505 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1506 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1507 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1508 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %1509 = llvm.and %1503, %1508 : i32 loc(#loc6)
    %1510 = llvm.icmp "eq" %1509, %1507 : i32 loc(#loc6)
    %1511 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %1512 = llvm.select %1510, %1507, %1511 : i1, i32 loc(#loc6)
    %1513 = llvm.xor %1507, %1512 : i32 loc(#loc6)
    %1514 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %1515 = llvm.and %1503, %1514 : i32 loc(#loc6)
    %1516 = llvm.icmp "eq" %1515, %1507 : i32 loc(#loc6)
    %1517 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %1518 = llvm.select %1516, %1507, %1517 : i1, i32 loc(#loc6)
    %1519 = llvm.xor %1513, %1518 : i32 loc(#loc6)
    %1520 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %1521 = llvm.and %1503, %1520 : i32 loc(#loc6)
    %1522 = llvm.icmp "eq" %1521, %1507 : i32 loc(#loc6)
    %1523 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %1524 = llvm.select %1522, %1507, %1523 : i1, i32 loc(#loc6)
    %1525 = llvm.xor %1519, %1524 : i32 loc(#loc6)
    %1526 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %1527 = llvm.and %1503, %1526 : i32 loc(#loc6)
    %1528 = llvm.icmp "eq" %1527, %1507 : i32 loc(#loc6)
    %1529 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %1530 = llvm.select %1528, %1507, %1529 : i1, i32 loc(#loc6)
    %1531 = llvm.xor %1525, %1530 : i32 loc(#loc6)
    %1532 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %1533 = llvm.and %1503, %1532 : i32 loc(#loc6)
    %1534 = llvm.icmp "eq" %1533, %1507 : i32 loc(#loc6)
    %1535 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %1536 = llvm.select %1534, %1507, %1535 : i1, i32 loc(#loc6)
    %1537 = llvm.xor %1531, %1536 : i32 loc(#loc6)
    %1538 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %1539 = llvm.and %1503, %1538 : i32 loc(#loc6)
    %1540 = llvm.icmp "eq" %1539, %1507 : i32 loc(#loc6)
    %1541 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %1542 = llvm.and %1504, %1541 : i32 loc(#loc6)
    %1543 = llvm.icmp "eq" %1542, %1507 : i32 loc(#loc6)
    %1544 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %1545 = llvm.and %1504, %1544 : i32 loc(#loc6)
    %1546 = llvm.icmp "eq" %1545, %1507 : i32 loc(#loc6)
    %1547 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %1548 = llvm.select %1546, %1507, %1547 : i1, i32 loc(#loc6)
    %1549 = llvm.xor %1537, %1548 : i32 loc(#loc6)
    %1550 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1551 = llvm.xor %1549, %1550 : i32 loc(#loc6)
    %1552 = llvm.add %1551, %1500 : i32 loc(#loc6)
    %1553 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc6)
    %1554 = llvm.insertvalue %1552, %1553[0] : !llvm.struct<(i32)>  loc(#loc6)
    %1555 = llvm.mlir.constant(0 : index) : i32 loc(#loc6)
    %1556 = rocdl.workitem.id.x : i32 loc(#loc6)
    %1557 = llvm.mlir.constant(64 : i32) : i32 loc(#loc6)
    %1558 = llvm.urem %1556, %1557 : i32 loc(#loc6)
    %1559 = llvm.udiv %1556, %1557 : i32 loc(#loc6)
    %1560 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1561 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1562 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1563 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %1564 = llvm.and %1558, %1563 : i32 loc(#loc6)
    %1565 = llvm.icmp "eq" %1564, %1562 : i32 loc(#loc6)
    %1566 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %1567 = llvm.and %1558, %1566 : i32 loc(#loc6)
    %1568 = llvm.icmp "eq" %1567, %1562 : i32 loc(#loc6)
    %1569 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %1570 = llvm.and %1558, %1569 : i32 loc(#loc6)
    %1571 = llvm.icmp "eq" %1570, %1562 : i32 loc(#loc6)
    %1572 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %1573 = llvm.and %1558, %1572 : i32 loc(#loc6)
    %1574 = llvm.icmp "eq" %1573, %1562 : i32 loc(#loc6)
    %1575 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %1576 = llvm.and %1558, %1575 : i32 loc(#loc6)
    %1577 = llvm.icmp "eq" %1576, %1562 : i32 loc(#loc6)
    %1578 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %1579 = llvm.and %1558, %1578 : i32 loc(#loc6)
    %1580 = llvm.icmp "eq" %1579, %1562 : i32 loc(#loc6)
    %1581 = llvm.mlir.constant(4 : i32) : i32 loc(#loc6)
    %1582 = llvm.select %1580, %1562, %1581 : i1, i32 loc(#loc6)
    %1583 = llvm.xor %1562, %1582 : i32 loc(#loc6)
    %1584 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %1585 = llvm.and %1559, %1584 : i32 loc(#loc6)
    %1586 = llvm.icmp "eq" %1585, %1562 : i32 loc(#loc6)
    %1587 = llvm.mlir.constant(32 : i32) : i32 loc(#loc6)
    %1588 = llvm.select %1586, %1562, %1587 : i1, i32 loc(#loc6)
    %1589 = llvm.xor %1583, %1588 : i32 loc(#loc6)
    %1590 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %1591 = llvm.and %1559, %1590 : i32 loc(#loc6)
    %1592 = llvm.icmp "eq" %1591, %1562 : i32 loc(#loc6)
    %1593 = llvm.mlir.constant(0 : i32) : i32 loc(#loc6)
    %1594 = llvm.xor %1589, %1593 : i32 loc(#loc6)
    %1595 = llvm.mlir.constant(1 : i32) : i32 loc(#loc6)
    %1596 = llvm.xor %1589, %1595 : i32 loc(#loc6)
    %1597 = llvm.mlir.constant(2 : i32) : i32 loc(#loc6)
    %1598 = llvm.xor %1589, %1597 : i32 loc(#loc6)
    %1599 = llvm.mlir.constant(3 : i32) : i32 loc(#loc6)
    %1600 = llvm.xor %1589, %1599 : i32 loc(#loc6)
    %1601 = llvm.mlir.constant(8 : i32) : i32 loc(#loc6)
    %1602 = llvm.xor %1589, %1601 : i32 loc(#loc6)
    %1603 = llvm.mlir.constant(9 : i32) : i32 loc(#loc6)
    %1604 = llvm.xor %1589, %1603 : i32 loc(#loc6)
    %1605 = llvm.mlir.constant(10 : i32) : i32 loc(#loc6)
    %1606 = llvm.xor %1589, %1605 : i32 loc(#loc6)
    %1607 = llvm.mlir.constant(11 : i32) : i32 loc(#loc6)
    %1608 = llvm.xor %1589, %1607 : i32 loc(#loc6)
    %1609 = llvm.mlir.constant(16 : i32) : i32 loc(#loc6)
    %1610 = llvm.xor %1589, %1609 : i32 loc(#loc6)
    %1611 = llvm.mlir.constant(17 : i32) : i32 loc(#loc6)
    %1612 = llvm.xor %1589, %1611 : i32 loc(#loc6)
    %1613 = llvm.mlir.constant(18 : i32) : i32 loc(#loc6)
    %1614 = llvm.xor %1589, %1613 : i32 loc(#loc6)
    %1615 = llvm.mlir.constant(19 : i32) : i32 loc(#loc6)
    %1616 = llvm.xor %1589, %1615 : i32 loc(#loc6)
    %1617 = llvm.mlir.constant(24 : i32) : i32 loc(#loc6)
    %1618 = llvm.xor %1589, %1617 : i32 loc(#loc6)
    %1619 = llvm.mlir.constant(25 : i32) : i32 loc(#loc6)
    %1620 = llvm.xor %1589, %1619 : i32 loc(#loc6)
    %1621 = llvm.mlir.constant(26 : i32) : i32 loc(#loc6)
    %1622 = llvm.xor %1589, %1621 : i32 loc(#loc6)
    %1623 = llvm.mlir.constant(27 : i32) : i32 loc(#loc6)
    %1624 = llvm.xor %1589, %1623 : i32 loc(#loc6)
    %1625 = llvm.add %1594, %1555 : i32 loc(#loc6)
    %1626 = llvm.add %1596, %1555 : i32 loc(#loc6)
    %1627 = llvm.add %1598, %1555 : i32 loc(#loc6)
    %1628 = llvm.add %1600, %1555 : i32 loc(#loc6)
    %1629 = llvm.add %1602, %1555 : i32 loc(#loc6)
    %1630 = llvm.add %1604, %1555 : i32 loc(#loc6)
    %1631 = llvm.add %1606, %1555 : i32 loc(#loc6)
    %1632 = llvm.add %1608, %1555 : i32 loc(#loc6)
    %1633 = llvm.add %1610, %1555 : i32 loc(#loc6)
    %1634 = llvm.add %1612, %1555 : i32 loc(#loc6)
    %1635 = llvm.add %1614, %1555 : i32 loc(#loc6)
    %1636 = llvm.add %1616, %1555 : i32 loc(#loc6)
    %1637 = llvm.add %1618, %1555 : i32 loc(#loc6)
    %1638 = llvm.add %1620, %1555 : i32 loc(#loc6)
    %1639 = llvm.add %1622, %1555 : i32 loc(#loc6)
    %1640 = llvm.add %1624, %1555 : i32 loc(#loc6)
    %1641 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc6)
    %1642 = llvm.insertvalue %1625, %1641[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1643 = llvm.insertvalue %1626, %1642[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1644 = llvm.insertvalue %1627, %1643[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1645 = llvm.insertvalue %1628, %1644[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1646 = llvm.insertvalue %1629, %1645[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1647 = llvm.insertvalue %1630, %1646[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1648 = llvm.insertvalue %1631, %1647[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1649 = llvm.insertvalue %1632, %1648[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1650 = llvm.insertvalue %1633, %1649[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1651 = llvm.insertvalue %1634, %1650[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1652 = llvm.insertvalue %1635, %1651[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1653 = llvm.insertvalue %1636, %1652[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1654 = llvm.insertvalue %1637, %1653[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1655 = llvm.insertvalue %1638, %1654[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1656 = llvm.insertvalue %1639, %1655[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1657 = llvm.insertvalue %1640, %1656[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc6)
    %1658 = llvm.bitcast %43 : i32 to i32 loc(#loc5)
    %1659 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %1660 = llvm.insertvalue %1658, %1659[0] : !llvm.struct<(i32)>  loc(#loc5)
    %1661 = llvm.extractvalue %1660[0] : !llvm.struct<(i32)>  loc(#loc5)
    %1662 = llvm.extractvalue %1554[0] : !llvm.struct<(i32)>  loc(#loc5)
    %1663 = llvm.add %1661, %1662 : i32 loc(#loc5)
    %1664 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc5)
    %1665 = llvm.insertvalue %1663, %1664[0] : !llvm.struct<(i32)>  loc(#loc5)
    %1666 = llvm.bitcast %648 : i32 to i32 loc(#loc18)
    %1667 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc18)
    %1668 = llvm.insertvalue %1666, %1667[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1669 = llvm.insertvalue %1666, %1668[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1670 = llvm.insertvalue %1666, %1669[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1671 = llvm.insertvalue %1666, %1670[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1672 = llvm.insertvalue %1666, %1671[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1673 = llvm.insertvalue %1666, %1672[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1674 = llvm.insertvalue %1666, %1673[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1675 = llvm.insertvalue %1666, %1674[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1676 = llvm.insertvalue %1666, %1675[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1677 = llvm.insertvalue %1666, %1676[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1678 = llvm.insertvalue %1666, %1677[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1679 = llvm.insertvalue %1666, %1678[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1680 = llvm.insertvalue %1666, %1679[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1681 = llvm.insertvalue %1666, %1680[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1682 = llvm.insertvalue %1666, %1681[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1683 = llvm.insertvalue %1666, %1682[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1684 = llvm.extractvalue %1683[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1685 = llvm.extractvalue %1683[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1686 = llvm.extractvalue %1683[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1687 = llvm.extractvalue %1683[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1688 = llvm.extractvalue %1683[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1689 = llvm.extractvalue %1683[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1690 = llvm.extractvalue %1683[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1691 = llvm.extractvalue %1683[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1692 = llvm.extractvalue %1683[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1693 = llvm.extractvalue %1683[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1694 = llvm.extractvalue %1683[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1695 = llvm.extractvalue %1683[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1696 = llvm.extractvalue %1683[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1697 = llvm.extractvalue %1683[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1698 = llvm.extractvalue %1683[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1699 = llvm.extractvalue %1683[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1700 = llvm.extractvalue %1657[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1701 = llvm.extractvalue %1657[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1702 = llvm.extractvalue %1657[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1703 = llvm.extractvalue %1657[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1704 = llvm.extractvalue %1657[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1705 = llvm.extractvalue %1657[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1706 = llvm.extractvalue %1657[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1707 = llvm.extractvalue %1657[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1708 = llvm.extractvalue %1657[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1709 = llvm.extractvalue %1657[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1710 = llvm.extractvalue %1657[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1711 = llvm.extractvalue %1657[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1712 = llvm.extractvalue %1657[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1713 = llvm.extractvalue %1657[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1714 = llvm.extractvalue %1657[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1715 = llvm.extractvalue %1657[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1716 = llvm.add %1684, %1700 : i32 loc(#loc18)
    %1717 = llvm.add %1685, %1701 : i32 loc(#loc18)
    %1718 = llvm.add %1686, %1702 : i32 loc(#loc18)
    %1719 = llvm.add %1687, %1703 : i32 loc(#loc18)
    %1720 = llvm.add %1688, %1704 : i32 loc(#loc18)
    %1721 = llvm.add %1689, %1705 : i32 loc(#loc18)
    %1722 = llvm.add %1690, %1706 : i32 loc(#loc18)
    %1723 = llvm.add %1691, %1707 : i32 loc(#loc18)
    %1724 = llvm.add %1692, %1708 : i32 loc(#loc18)
    %1725 = llvm.add %1693, %1709 : i32 loc(#loc18)
    %1726 = llvm.add %1694, %1710 : i32 loc(#loc18)
    %1727 = llvm.add %1695, %1711 : i32 loc(#loc18)
    %1728 = llvm.add %1696, %1712 : i32 loc(#loc18)
    %1729 = llvm.add %1697, %1713 : i32 loc(#loc18)
    %1730 = llvm.add %1698, %1714 : i32 loc(#loc18)
    %1731 = llvm.add %1699, %1715 : i32 loc(#loc18)
    %1732 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc18)
    %1733 = llvm.insertvalue %1716, %1732[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1734 = llvm.insertvalue %1717, %1733[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1735 = llvm.insertvalue %1718, %1734[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1736 = llvm.insertvalue %1719, %1735[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1737 = llvm.insertvalue %1720, %1736[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1738 = llvm.insertvalue %1721, %1737[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1739 = llvm.insertvalue %1722, %1738[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1740 = llvm.insertvalue %1723, %1739[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1741 = llvm.insertvalue %1724, %1740[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1742 = llvm.insertvalue %1725, %1741[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1743 = llvm.insertvalue %1726, %1742[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1744 = llvm.insertvalue %1727, %1743[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1745 = llvm.insertvalue %1728, %1744[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1746 = llvm.insertvalue %1729, %1745[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1747 = llvm.insertvalue %1730, %1746[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1748 = llvm.insertvalue %1731, %1747[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc18)
    %1749 = llvm.sub %arg5, %40 : i32 loc(#loc2)
    llvm.br ^bb1(%41, %20, %1063, %1499, %646, %1298 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc2)
  ^bb1(%1750: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %1751: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %1752: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %1753: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %1754: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %1755: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %1756 = llvm.icmp "slt" %1750, %1749 : i32 loc(#loc2)
    llvm.cond_br %1756, ^bb2, ^bb3 loc(#loc2)
  ^bb2:  // pred: ^bb1
    %1757 = llvm.add %1750, %40 : i32 loc(#loc2)
    %1758 = llvm.bitcast %1757 : i32 to i32 loc(#loc25)
    %1759 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc25)
    %1760 = llvm.insertvalue %1758, %1759[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1761 = llvm.extractvalue %1760[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1762 = llvm.extractvalue %308[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1763 = llvm.add %1761, %1762 : i32 loc(#loc25)
    %1764 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc25)
    %1765 = llvm.insertvalue %1763, %1764[0] : !llvm.struct<(i32)>  loc(#loc25)
    %1766 = llvm.getelementptr %239[%1757] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc9)
    %1767 = llvm.extractvalue %1765[0] : !llvm.struct<(i32)>  loc(#loc13)
    %1768 = llvm.extractvalue %428[0] : !llvm.struct<(i32)>  loc(#loc13)
    %1769 = llvm.icmp "slt" %1767, %1768 : i32 loc(#loc13)
    %1770 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc13)
    %1771 = llvm.insertvalue %1769, %1770[0] : !llvm.struct<(i1)>  loc(#loc13)
    %1772 = llvm.extractvalue %1771[0] : !llvm.struct<(i1)>  loc(#loc14)
    %1773 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc14)
    %1774 = llvm.insertvalue %1772, %1773[0] : !llvm.struct<(i1)>  loc(#loc14)
    %1775 = llvm.extractvalue %1774[0] : !llvm.struct<(i1)>  loc(#loc12)
    %1776 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %1777 = llvm.insertvalue %1775, %1776[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1778 = llvm.insertvalue %1775, %1777[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1779 = llvm.insertvalue %1775, %1778[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1780 = llvm.insertvalue %1775, %1779[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1781 = llvm.insertvalue %1775, %1780[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1782 = llvm.insertvalue %1775, %1781[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1783 = llvm.insertvalue %1775, %1782[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1784 = llvm.insertvalue %1775, %1783[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1785 = llvm.extractvalue %425[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1786 = llvm.extractvalue %425[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1787 = llvm.extractvalue %425[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1788 = llvm.extractvalue %425[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1789 = llvm.extractvalue %425[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1790 = llvm.extractvalue %425[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1791 = llvm.extractvalue %425[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1792 = llvm.extractvalue %425[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1793 = llvm.extractvalue %1784[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1794 = llvm.extractvalue %1784[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1795 = llvm.extractvalue %1784[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1796 = llvm.extractvalue %1784[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1797 = llvm.extractvalue %1784[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1798 = llvm.extractvalue %1784[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1799 = llvm.extractvalue %1784[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1800 = llvm.extractvalue %1784[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1801 = llvm.and %1785, %1793 : i1 loc(#loc12)
    %1802 = llvm.and %1786, %1794 : i1 loc(#loc12)
    %1803 = llvm.and %1787, %1795 : i1 loc(#loc12)
    %1804 = llvm.and %1788, %1796 : i1 loc(#loc12)
    %1805 = llvm.and %1789, %1797 : i1 loc(#loc12)
    %1806 = llvm.and %1790, %1798 : i1 loc(#loc12)
    %1807 = llvm.and %1791, %1799 : i1 loc(#loc12)
    %1808 = llvm.and %1792, %1800 : i1 loc(#loc12)
    %1809 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc12)
    %1810 = llvm.insertvalue %1801, %1809[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1811 = llvm.insertvalue %1802, %1810[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1812 = llvm.insertvalue %1803, %1811[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1813 = llvm.insertvalue %1804, %1812[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1814 = llvm.insertvalue %1805, %1813[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1815 = llvm.insertvalue %1806, %1814[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1816 = llvm.insertvalue %1807, %1815[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1817 = llvm.insertvalue %1808, %1816[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc12)
    %1818 = llvm.bitcast %1766 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc15)
    %1819 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc15)
    %1820 = llvm.insertvalue %1818, %1819[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1821 = llvm.insertvalue %1818, %1820[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1822 = llvm.insertvalue %1818, %1821[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1823 = llvm.insertvalue %1818, %1822[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1824 = llvm.insertvalue %1818, %1823[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1825 = llvm.insertvalue %1818, %1824[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1826 = llvm.insertvalue %1818, %1825[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1827 = llvm.insertvalue %1818, %1826[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1828 = llvm.extractvalue %1827[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1829 = llvm.extractvalue %1827[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1830 = llvm.extractvalue %1827[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1831 = llvm.extractvalue %1827[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1832 = llvm.extractvalue %1827[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1833 = llvm.extractvalue %1827[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1834 = llvm.extractvalue %1827[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1835 = llvm.extractvalue %1827[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1836 = llvm.extractvalue %354[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1837 = llvm.extractvalue %354[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1838 = llvm.extractvalue %354[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1839 = llvm.extractvalue %354[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1840 = llvm.extractvalue %354[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1841 = llvm.extractvalue %354[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1842 = llvm.extractvalue %354[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1843 = llvm.extractvalue %354[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %1844 = llvm.getelementptr %1828[%1836] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1845 = llvm.getelementptr %1829[%1837] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1846 = llvm.getelementptr %1830[%1838] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1847 = llvm.getelementptr %1831[%1839] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1848 = llvm.getelementptr %1832[%1840] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1849 = llvm.getelementptr %1833[%1841] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1850 = llvm.getelementptr %1834[%1842] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1851 = llvm.getelementptr %1835[%1843] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc15)
    %1852 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc15)
    %1853 = llvm.insertvalue %1844, %1852[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1854 = llvm.insertvalue %1845, %1853[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1855 = llvm.insertvalue %1846, %1854[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1856 = llvm.insertvalue %1847, %1855[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1857 = llvm.insertvalue %1848, %1856[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1858 = llvm.insertvalue %1849, %1857[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1859 = llvm.insertvalue %1850, %1858[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1860 = llvm.insertvalue %1851, %1859[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1861 = llvm.extractvalue %1860[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1862 = llvm.extractvalue %1860[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1863 = llvm.extractvalue %1860[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1864 = llvm.extractvalue %1860[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1865 = llvm.extractvalue %1860[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1866 = llvm.extractvalue %1860[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1867 = llvm.extractvalue %1860[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1868 = llvm.extractvalue %1860[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc15)
    %1869 = llvm.extractvalue %1817[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1870 = llvm.extractvalue %1817[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1871 = llvm.extractvalue %1817[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1872 = llvm.extractvalue %1817[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1873 = llvm.extractvalue %1817[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1874 = llvm.extractvalue %1817[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1875 = llvm.extractvalue %1817[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1876 = llvm.extractvalue %1817[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc15)
    %1877 = llvm.extractvalue %39[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1878 = llvm.extractvalue %39[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1879 = llvm.extractvalue %39[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1880 = llvm.extractvalue %39[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1881 = llvm.extractvalue %39[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1882 = llvm.extractvalue %39[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1883 = llvm.extractvalue %39[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1884 = llvm.extractvalue %39[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1885 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1886 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1887 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1888 = llvm.insertelement %1877, %1886[%1887 : i32] : vector<1xbf16> loc(#loc15)
    %1889 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1861, %1869, %1888) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1890 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1891 = llvm.extractelement %1889[%1890 : i32] : vector<1xbf16> loc(#loc15)
    %1892 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1893 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1894 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1895 = llvm.insertelement %1878, %1893[%1894 : i32] : vector<1xbf16> loc(#loc15)
    %1896 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1862, %1870, %1895) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1897 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1898 = llvm.extractelement %1896[%1897 : i32] : vector<1xbf16> loc(#loc15)
    %1899 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1900 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1901 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1902 = llvm.insertelement %1879, %1900[%1901 : i32] : vector<1xbf16> loc(#loc15)
    %1903 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1863, %1871, %1902) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1904 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1905 = llvm.extractelement %1903[%1904 : i32] : vector<1xbf16> loc(#loc15)
    %1906 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1907 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1908 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1909 = llvm.insertelement %1880, %1907[%1908 : i32] : vector<1xbf16> loc(#loc15)
    %1910 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1864, %1872, %1909) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1911 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1912 = llvm.extractelement %1910[%1911 : i32] : vector<1xbf16> loc(#loc15)
    %1913 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1914 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1915 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1916 = llvm.insertelement %1881, %1914[%1915 : i32] : vector<1xbf16> loc(#loc15)
    %1917 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1865, %1873, %1916) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1918 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1919 = llvm.extractelement %1917[%1918 : i32] : vector<1xbf16> loc(#loc15)
    %1920 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1921 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1922 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1923 = llvm.insertelement %1882, %1921[%1922 : i32] : vector<1xbf16> loc(#loc15)
    %1924 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1866, %1874, %1923) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1925 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1926 = llvm.extractelement %1924[%1925 : i32] : vector<1xbf16> loc(#loc15)
    %1927 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1928 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1929 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1930 = llvm.insertelement %1883, %1928[%1929 : i32] : vector<1xbf16> loc(#loc15)
    %1931 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1867, %1875, %1930) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1932 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1933 = llvm.extractelement %1931[%1932 : i32] : vector<1xbf16> loc(#loc15)
    %1934 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc15)
    %1935 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %1936 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %1937 = llvm.insertelement %1884, %1935[%1936 : i32] : vector<1xbf16> loc(#loc15)
    %1938 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%1868, %1876, %1937) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc15)
    %1939 = llvm.mlir.constant(0 : index) : i32 loc(#loc15)
    %1940 = llvm.extractelement %1938[%1939 : i32] : vector<1xbf16> loc(#loc15)
    %1941 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc15)
    %1942 = llvm.insertvalue %1891, %1941[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1943 = llvm.insertvalue %1898, %1942[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1944 = llvm.insertvalue %1905, %1943[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1945 = llvm.insertvalue %1912, %1944[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1946 = llvm.insertvalue %1919, %1945[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1947 = llvm.insertvalue %1926, %1946[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1948 = llvm.insertvalue %1933, %1947[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1949 = llvm.insertvalue %1940, %1948[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %1950 = builtin.unrealized_conversion_cast %1949 : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> to tensor<64x32xbf16, #blocked> loc(#loc15)
    %1951 = builtin.unrealized_conversion_cast %1950 : tensor<64x32xbf16, #blocked> to !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc2)
    %1952 = llvm.getelementptr %753[%1757] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %1953 = llvm.extractvalue %863[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1954 = llvm.extractvalue %863[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1955 = llvm.extractvalue %863[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1956 = llvm.extractvalue %863[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1957 = llvm.extractvalue %863[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1958 = llvm.extractvalue %863[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1959 = llvm.extractvalue %863[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1960 = llvm.extractvalue %863[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1961 = llvm.extractvalue %1784[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1962 = llvm.extractvalue %1784[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1963 = llvm.extractvalue %1784[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1964 = llvm.extractvalue %1784[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1965 = llvm.extractvalue %1784[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1966 = llvm.extractvalue %1784[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1967 = llvm.extractvalue %1784[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1968 = llvm.extractvalue %1784[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1969 = llvm.and %1953, %1961 : i1 loc(#loc23)
    %1970 = llvm.and %1954, %1962 : i1 loc(#loc23)
    %1971 = llvm.and %1955, %1963 : i1 loc(#loc23)
    %1972 = llvm.and %1956, %1964 : i1 loc(#loc23)
    %1973 = llvm.and %1957, %1965 : i1 loc(#loc23)
    %1974 = llvm.and %1958, %1966 : i1 loc(#loc23)
    %1975 = llvm.and %1959, %1967 : i1 loc(#loc23)
    %1976 = llvm.and %1960, %1968 : i1 loc(#loc23)
    %1977 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc23)
    %1978 = llvm.insertvalue %1969, %1977[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1979 = llvm.insertvalue %1970, %1978[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1980 = llvm.insertvalue %1971, %1979[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1981 = llvm.insertvalue %1972, %1980[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1982 = llvm.insertvalue %1973, %1981[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1983 = llvm.insertvalue %1974, %1982[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1984 = llvm.insertvalue %1975, %1983[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1985 = llvm.insertvalue %1976, %1984[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc23)
    %1986 = llvm.bitcast %1952 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc24)
    %1987 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc24)
    %1988 = llvm.insertvalue %1986, %1987[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1989 = llvm.insertvalue %1986, %1988[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1990 = llvm.insertvalue %1986, %1989[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1991 = llvm.insertvalue %1986, %1990[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1992 = llvm.insertvalue %1986, %1991[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1993 = llvm.insertvalue %1986, %1992[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1994 = llvm.insertvalue %1986, %1993[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1995 = llvm.insertvalue %1986, %1994[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1996 = llvm.extractvalue %1995[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1997 = llvm.extractvalue %1995[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1998 = llvm.extractvalue %1995[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %1999 = llvm.extractvalue %1995[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2000 = llvm.extractvalue %1995[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2001 = llvm.extractvalue %1995[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2002 = llvm.extractvalue %1995[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2003 = llvm.extractvalue %1995[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2004 = llvm.extractvalue %803[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2005 = llvm.extractvalue %803[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2006 = llvm.extractvalue %803[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2007 = llvm.extractvalue %803[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2008 = llvm.extractvalue %803[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2009 = llvm.extractvalue %803[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2010 = llvm.extractvalue %803[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2011 = llvm.extractvalue %803[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc24)
    %2012 = llvm.getelementptr %1996[%2004] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2013 = llvm.getelementptr %1997[%2005] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2014 = llvm.getelementptr %1998[%2006] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2015 = llvm.getelementptr %1999[%2007] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2016 = llvm.getelementptr %2000[%2008] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2017 = llvm.getelementptr %2001[%2009] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2018 = llvm.getelementptr %2002[%2010] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2019 = llvm.getelementptr %2003[%2011] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc24)
    %2020 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc24)
    %2021 = llvm.insertvalue %2012, %2020[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2022 = llvm.insertvalue %2013, %2021[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2023 = llvm.insertvalue %2014, %2022[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2024 = llvm.insertvalue %2015, %2023[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2025 = llvm.insertvalue %2016, %2024[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2026 = llvm.insertvalue %2017, %2025[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2027 = llvm.insertvalue %2018, %2026[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2028 = llvm.insertvalue %2019, %2027[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2029 = llvm.extractvalue %2028[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2030 = llvm.extractvalue %2028[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2031 = llvm.extractvalue %2028[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2032 = llvm.extractvalue %2028[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2033 = llvm.extractvalue %2028[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2034 = llvm.extractvalue %2028[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2035 = llvm.extractvalue %2028[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2036 = llvm.extractvalue %2028[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc24)
    %2037 = llvm.extractvalue %1985[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2038 = llvm.extractvalue %1985[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2039 = llvm.extractvalue %1985[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2040 = llvm.extractvalue %1985[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2041 = llvm.extractvalue %1985[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2042 = llvm.extractvalue %1985[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2043 = llvm.extractvalue %1985[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2044 = llvm.extractvalue %1985[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc24)
    %2045 = llvm.extractvalue %39[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2046 = llvm.extractvalue %39[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2047 = llvm.extractvalue %39[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2048 = llvm.extractvalue %39[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2049 = llvm.extractvalue %39[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2050 = llvm.extractvalue %39[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2051 = llvm.extractvalue %39[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2052 = llvm.extractvalue %39[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2053 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2054 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2055 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2056 = llvm.insertelement %2045, %2054[%2055 : i32] : vector<1xbf16> loc(#loc24)
    %2057 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2029, %2037, %2056) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2058 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2059 = llvm.extractelement %2057[%2058 : i32] : vector<1xbf16> loc(#loc24)
    %2060 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2061 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2062 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2063 = llvm.insertelement %2046, %2061[%2062 : i32] : vector<1xbf16> loc(#loc24)
    %2064 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2030, %2038, %2063) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2065 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2066 = llvm.extractelement %2064[%2065 : i32] : vector<1xbf16> loc(#loc24)
    %2067 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2068 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2069 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2070 = llvm.insertelement %2047, %2068[%2069 : i32] : vector<1xbf16> loc(#loc24)
    %2071 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2031, %2039, %2070) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2072 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2073 = llvm.extractelement %2071[%2072 : i32] : vector<1xbf16> loc(#loc24)
    %2074 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2075 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2076 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2077 = llvm.insertelement %2048, %2075[%2076 : i32] : vector<1xbf16> loc(#loc24)
    %2078 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2032, %2040, %2077) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2079 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2080 = llvm.extractelement %2078[%2079 : i32] : vector<1xbf16> loc(#loc24)
    %2081 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2082 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2083 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2084 = llvm.insertelement %2049, %2082[%2083 : i32] : vector<1xbf16> loc(#loc24)
    %2085 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2033, %2041, %2084) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2086 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2087 = llvm.extractelement %2085[%2086 : i32] : vector<1xbf16> loc(#loc24)
    %2088 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2089 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2090 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2091 = llvm.insertelement %2050, %2089[%2090 : i32] : vector<1xbf16> loc(#loc24)
    %2092 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2034, %2042, %2091) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2093 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2094 = llvm.extractelement %2092[%2093 : i32] : vector<1xbf16> loc(#loc24)
    %2095 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2096 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2097 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2098 = llvm.insertelement %2051, %2096[%2097 : i32] : vector<1xbf16> loc(#loc24)
    %2099 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2035, %2043, %2098) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2100 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2101 = llvm.extractelement %2099[%2100 : i32] : vector<1xbf16> loc(#loc24)
    %2102 = llvm.mlir.constant(dense<0.000000e+00> : vector<1xbf16>) : vector<1xbf16> loc(#loc24)
    %2103 = llvm.mlir.undef : vector<1xbf16> loc(#loc24)
    %2104 = llvm.mlir.constant(0 : i32) : i32 loc(#loc24)
    %2105 = llvm.insertelement %2052, %2103[%2104 : i32] : vector<1xbf16> loc(#loc24)
    %2106 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%2036, %2044, %2105) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc24)
    %2107 = llvm.mlir.constant(0 : index) : i32 loc(#loc24)
    %2108 = llvm.extractelement %2106[%2107 : i32] : vector<1xbf16> loc(#loc24)
    %2109 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc24)
    %2110 = llvm.insertvalue %2059, %2109[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2111 = llvm.insertvalue %2066, %2110[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2112 = llvm.insertvalue %2073, %2111[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2113 = llvm.insertvalue %2080, %2112[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2114 = llvm.insertvalue %2087, %2113[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2115 = llvm.insertvalue %2094, %2114[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2116 = llvm.insertvalue %2101, %2115[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2117 = llvm.insertvalue %2108, %2116[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc24)
    %2118 = builtin.unrealized_conversion_cast %2117 : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> to tensor<64x32xbf16, #blocked> loc(#loc24)
    %2119 = builtin.unrealized_conversion_cast %2118 : tensor<64x32xbf16, #blocked> to !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc2)
    rocdl.barrier loc(#loc26)
    %2120 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2121 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %2122 = llvm.getelementptr %2121[%2120] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc26)
    %2123 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2124 = llvm.extractvalue %1752[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2125 = llvm.extractvalue %1752[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2126 = llvm.extractvalue %1752[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2127 = llvm.extractvalue %1752[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2128 = llvm.extractvalue %1752[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2129 = llvm.extractvalue %1752[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2130 = llvm.extractvalue %1752[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2131 = llvm.extractvalue %1752[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %2132 = rocdl.workitem.id.x : i32 loc(#loc26)
    %2133 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2134 = llvm.urem %2132, %2133 : i32 loc(#loc26)
    %2135 = llvm.udiv %2132, %2133 : i32 loc(#loc26)
    %2136 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2137 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2138 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2139 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2140 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2141 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2142 = llvm.and %2134, %2141 : i32 loc(#loc26)
    %2143 = llvm.icmp "eq" %2142, %2140 : i32 loc(#loc26)
    %2144 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2145 = llvm.select %2143, %2140, %2144 : i1, i32 loc(#loc26)
    %2146 = llvm.xor %2140, %2145 : i32 loc(#loc26)
    %2147 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2148 = llvm.and %2134, %2147 : i32 loc(#loc26)
    %2149 = llvm.icmp "eq" %2148, %2140 : i32 loc(#loc26)
    %2150 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2151 = llvm.select %2149, %2140, %2150 : i1, i32 loc(#loc26)
    %2152 = llvm.xor %2146, %2151 : i32 loc(#loc26)
    %2153 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2154 = llvm.and %2134, %2153 : i32 loc(#loc26)
    %2155 = llvm.icmp "eq" %2154, %2140 : i32 loc(#loc26)
    %2156 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2157 = llvm.select %2155, %2140, %2156 : i1, i32 loc(#loc26)
    %2158 = llvm.xor %2152, %2157 : i32 loc(#loc26)
    %2159 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2160 = llvm.and %2134, %2159 : i32 loc(#loc26)
    %2161 = llvm.icmp "eq" %2160, %2140 : i32 loc(#loc26)
    %2162 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2163 = llvm.select %2161, %2140, %2162 : i1, i32 loc(#loc26)
    %2164 = llvm.xor %2158, %2163 : i32 loc(#loc26)
    %2165 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2166 = llvm.and %2134, %2165 : i32 loc(#loc26)
    %2167 = llvm.icmp "eq" %2166, %2140 : i32 loc(#loc26)
    %2168 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2169 = llvm.select %2167, %2140, %2168 : i1, i32 loc(#loc26)
    %2170 = llvm.xor %2164, %2169 : i32 loc(#loc26)
    %2171 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2172 = llvm.and %2134, %2171 : i32 loc(#loc26)
    %2173 = llvm.icmp "eq" %2172, %2140 : i32 loc(#loc26)
    %2174 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2175 = llvm.select %2173, %2140, %2174 : i1, i32 loc(#loc26)
    %2176 = llvm.xor %2170, %2175 : i32 loc(#loc26)
    %2177 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2178 = llvm.and %2135, %2177 : i32 loc(#loc26)
    %2179 = llvm.icmp "eq" %2178, %2140 : i32 loc(#loc26)
    %2180 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2181 = llvm.select %2179, %2140, %2180 : i1, i32 loc(#loc26)
    %2182 = llvm.xor %2176, %2181 : i32 loc(#loc26)
    %2183 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2184 = llvm.and %2135, %2183 : i32 loc(#loc26)
    %2185 = llvm.icmp "eq" %2184, %2140 : i32 loc(#loc26)
    %2186 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2187 = llvm.select %2185, %2140, %2186 : i1, i32 loc(#loc26)
    %2188 = llvm.xor %2182, %2187 : i32 loc(#loc26)
    %2189 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2190 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2191 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2192 = llvm.and %2134, %2191 : i32 loc(#loc26)
    %2193 = llvm.icmp "eq" %2192, %2190 : i32 loc(#loc26)
    %2194 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2195 = llvm.select %2193, %2190, %2194 : i1, i32 loc(#loc26)
    %2196 = llvm.xor %2190, %2195 : i32 loc(#loc26)
    %2197 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2198 = llvm.and %2134, %2197 : i32 loc(#loc26)
    %2199 = llvm.icmp "eq" %2198, %2190 : i32 loc(#loc26)
    %2200 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2201 = llvm.select %2199, %2190, %2200 : i1, i32 loc(#loc26)
    %2202 = llvm.xor %2196, %2201 : i32 loc(#loc26)
    %2203 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2204 = llvm.and %2134, %2203 : i32 loc(#loc26)
    %2205 = llvm.icmp "eq" %2204, %2190 : i32 loc(#loc26)
    %2206 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2207 = llvm.select %2205, %2190, %2206 : i1, i32 loc(#loc26)
    %2208 = llvm.xor %2202, %2207 : i32 loc(#loc26)
    %2209 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2210 = llvm.and %2134, %2209 : i32 loc(#loc26)
    %2211 = llvm.icmp "eq" %2210, %2190 : i32 loc(#loc26)
    %2212 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2213 = llvm.select %2211, %2190, %2212 : i1, i32 loc(#loc26)
    %2214 = llvm.xor %2208, %2213 : i32 loc(#loc26)
    %2215 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2216 = llvm.and %2134, %2215 : i32 loc(#loc26)
    %2217 = llvm.icmp "eq" %2216, %2190 : i32 loc(#loc26)
    %2218 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2219 = llvm.select %2217, %2190, %2218 : i1, i32 loc(#loc26)
    %2220 = llvm.xor %2214, %2219 : i32 loc(#loc26)
    %2221 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2222 = llvm.and %2134, %2221 : i32 loc(#loc26)
    %2223 = llvm.icmp "eq" %2222, %2190 : i32 loc(#loc26)
    %2224 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2225 = llvm.select %2223, %2190, %2224 : i1, i32 loc(#loc26)
    %2226 = llvm.xor %2190, %2225 : i32 loc(#loc26)
    %2227 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2228 = llvm.and %2135, %2227 : i32 loc(#loc26)
    %2229 = llvm.icmp "eq" %2228, %2190 : i32 loc(#loc26)
    %2230 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2231 = llvm.select %2229, %2190, %2230 : i1, i32 loc(#loc26)
    %2232 = llvm.xor %2226, %2231 : i32 loc(#loc26)
    %2233 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2234 = llvm.and %2135, %2233 : i32 loc(#loc26)
    %2235 = llvm.icmp "eq" %2234, %2190 : i32 loc(#loc26)
    %2236 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2237 = llvm.select %2235, %2190, %2236 : i1, i32 loc(#loc26)
    %2238 = llvm.xor %2220, %2237 : i32 loc(#loc26)
    %2239 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2240 = llvm.select %2235, %2190, %2239 : i1, i32 loc(#loc26)
    %2241 = llvm.xor %2232, %2240 : i32 loc(#loc26)
    %2242 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2243 = llvm.mul %2238, %2138 : i32 loc(#loc26)
    %2244 = llvm.add %2242, %2243 : i32 loc(#loc26)
    %2245 = llvm.mul %2241, %2139 : i32 loc(#loc26)
    %2246 = llvm.add %2244, %2245 : i32 loc(#loc26)
    %2247 = llvm.getelementptr inbounds %2122[%2246] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2248 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2249 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2250 = llvm.insertelement %2124, %2248[%2249 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2250, %2247 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2251 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2252 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2253 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2254 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2255 = llvm.mlir.constant(272 : i32) : i32 loc(#loc26)
    %2256 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2257 = llvm.and %2134, %2256 : i32 loc(#loc26)
    %2258 = llvm.icmp "eq" %2257, %2254 : i32 loc(#loc26)
    %2259 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2260 = llvm.select %2258, %2254, %2259 : i1, i32 loc(#loc26)
    %2261 = llvm.xor %2255, %2260 : i32 loc(#loc26)
    %2262 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2263 = llvm.and %2134, %2262 : i32 loc(#loc26)
    %2264 = llvm.icmp "eq" %2263, %2254 : i32 loc(#loc26)
    %2265 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2266 = llvm.select %2264, %2254, %2265 : i1, i32 loc(#loc26)
    %2267 = llvm.xor %2261, %2266 : i32 loc(#loc26)
    %2268 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2269 = llvm.and %2134, %2268 : i32 loc(#loc26)
    %2270 = llvm.icmp "eq" %2269, %2254 : i32 loc(#loc26)
    %2271 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2272 = llvm.select %2270, %2254, %2271 : i1, i32 loc(#loc26)
    %2273 = llvm.xor %2267, %2272 : i32 loc(#loc26)
    %2274 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2275 = llvm.and %2134, %2274 : i32 loc(#loc26)
    %2276 = llvm.icmp "eq" %2275, %2254 : i32 loc(#loc26)
    %2277 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2278 = llvm.select %2276, %2254, %2277 : i1, i32 loc(#loc26)
    %2279 = llvm.xor %2273, %2278 : i32 loc(#loc26)
    %2280 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2281 = llvm.and %2134, %2280 : i32 loc(#loc26)
    %2282 = llvm.icmp "eq" %2281, %2254 : i32 loc(#loc26)
    %2283 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2284 = llvm.select %2282, %2254, %2283 : i1, i32 loc(#loc26)
    %2285 = llvm.xor %2279, %2284 : i32 loc(#loc26)
    %2286 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2287 = llvm.and %2134, %2286 : i32 loc(#loc26)
    %2288 = llvm.icmp "eq" %2287, %2254 : i32 loc(#loc26)
    %2289 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2290 = llvm.select %2288, %2254, %2289 : i1, i32 loc(#loc26)
    %2291 = llvm.xor %2285, %2290 : i32 loc(#loc26)
    %2292 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2293 = llvm.and %2135, %2292 : i32 loc(#loc26)
    %2294 = llvm.icmp "eq" %2293, %2254 : i32 loc(#loc26)
    %2295 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2296 = llvm.select %2294, %2254, %2295 : i1, i32 loc(#loc26)
    %2297 = llvm.xor %2291, %2296 : i32 loc(#loc26)
    %2298 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2299 = llvm.and %2135, %2298 : i32 loc(#loc26)
    %2300 = llvm.icmp "eq" %2299, %2254 : i32 loc(#loc26)
    %2301 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2302 = llvm.select %2300, %2254, %2301 : i1, i32 loc(#loc26)
    %2303 = llvm.xor %2297, %2302 : i32 loc(#loc26)
    %2304 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2305 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2306 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2307 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2308 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2309 = llvm.and %2134, %2308 : i32 loc(#loc26)
    %2310 = llvm.icmp "eq" %2309, %2305 : i32 loc(#loc26)
    %2311 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2312 = llvm.select %2310, %2305, %2311 : i1, i32 loc(#loc26)
    %2313 = llvm.xor %2306, %2312 : i32 loc(#loc26)
    %2314 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2315 = llvm.and %2134, %2314 : i32 loc(#loc26)
    %2316 = llvm.icmp "eq" %2315, %2305 : i32 loc(#loc26)
    %2317 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2318 = llvm.select %2316, %2305, %2317 : i1, i32 loc(#loc26)
    %2319 = llvm.xor %2313, %2318 : i32 loc(#loc26)
    %2320 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2321 = llvm.and %2134, %2320 : i32 loc(#loc26)
    %2322 = llvm.icmp "eq" %2321, %2305 : i32 loc(#loc26)
    %2323 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2324 = llvm.select %2322, %2305, %2323 : i1, i32 loc(#loc26)
    %2325 = llvm.xor %2319, %2324 : i32 loc(#loc26)
    %2326 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2327 = llvm.and %2134, %2326 : i32 loc(#loc26)
    %2328 = llvm.icmp "eq" %2327, %2305 : i32 loc(#loc26)
    %2329 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2330 = llvm.select %2328, %2305, %2329 : i1, i32 loc(#loc26)
    %2331 = llvm.xor %2325, %2330 : i32 loc(#loc26)
    %2332 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2333 = llvm.and %2134, %2332 : i32 loc(#loc26)
    %2334 = llvm.icmp "eq" %2333, %2305 : i32 loc(#loc26)
    %2335 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2336 = llvm.select %2334, %2305, %2335 : i1, i32 loc(#loc26)
    %2337 = llvm.xor %2331, %2336 : i32 loc(#loc26)
    %2338 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2339 = llvm.and %2134, %2338 : i32 loc(#loc26)
    %2340 = llvm.icmp "eq" %2339, %2305 : i32 loc(#loc26)
    %2341 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2342 = llvm.select %2340, %2305, %2341 : i1, i32 loc(#loc26)
    %2343 = llvm.xor %2307, %2342 : i32 loc(#loc26)
    %2344 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2345 = llvm.and %2135, %2344 : i32 loc(#loc26)
    %2346 = llvm.icmp "eq" %2345, %2305 : i32 loc(#loc26)
    %2347 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2348 = llvm.select %2346, %2305, %2347 : i1, i32 loc(#loc26)
    %2349 = llvm.xor %2343, %2348 : i32 loc(#loc26)
    %2350 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2351 = llvm.and %2135, %2350 : i32 loc(#loc26)
    %2352 = llvm.icmp "eq" %2351, %2305 : i32 loc(#loc26)
    %2353 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2354 = llvm.select %2352, %2305, %2353 : i1, i32 loc(#loc26)
    %2355 = llvm.xor %2337, %2354 : i32 loc(#loc26)
    %2356 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2357 = llvm.select %2352, %2305, %2356 : i1, i32 loc(#loc26)
    %2358 = llvm.xor %2349, %2357 : i32 loc(#loc26)
    %2359 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2360 = llvm.mul %2355, %2252 : i32 loc(#loc26)
    %2361 = llvm.add %2359, %2360 : i32 loc(#loc26)
    %2362 = llvm.mul %2358, %2253 : i32 loc(#loc26)
    %2363 = llvm.add %2361, %2362 : i32 loc(#loc26)
    %2364 = llvm.getelementptr inbounds %2122[%2363] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2365 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2366 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2367 = llvm.insertelement %2125, %2365[%2366 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2367, %2364 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2368 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2369 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2370 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2371 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2372 = llvm.mlir.constant(512 : i32) : i32 loc(#loc26)
    %2373 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2374 = llvm.and %2134, %2373 : i32 loc(#loc26)
    %2375 = llvm.icmp "eq" %2374, %2371 : i32 loc(#loc26)
    %2376 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2377 = llvm.select %2375, %2371, %2376 : i1, i32 loc(#loc26)
    %2378 = llvm.xor %2372, %2377 : i32 loc(#loc26)
    %2379 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2380 = llvm.and %2134, %2379 : i32 loc(#loc26)
    %2381 = llvm.icmp "eq" %2380, %2371 : i32 loc(#loc26)
    %2382 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2383 = llvm.select %2381, %2371, %2382 : i1, i32 loc(#loc26)
    %2384 = llvm.xor %2378, %2383 : i32 loc(#loc26)
    %2385 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2386 = llvm.and %2134, %2385 : i32 loc(#loc26)
    %2387 = llvm.icmp "eq" %2386, %2371 : i32 loc(#loc26)
    %2388 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2389 = llvm.select %2387, %2371, %2388 : i1, i32 loc(#loc26)
    %2390 = llvm.xor %2384, %2389 : i32 loc(#loc26)
    %2391 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2392 = llvm.and %2134, %2391 : i32 loc(#loc26)
    %2393 = llvm.icmp "eq" %2392, %2371 : i32 loc(#loc26)
    %2394 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2395 = llvm.select %2393, %2371, %2394 : i1, i32 loc(#loc26)
    %2396 = llvm.xor %2390, %2395 : i32 loc(#loc26)
    %2397 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2398 = llvm.and %2134, %2397 : i32 loc(#loc26)
    %2399 = llvm.icmp "eq" %2398, %2371 : i32 loc(#loc26)
    %2400 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2401 = llvm.select %2399, %2371, %2400 : i1, i32 loc(#loc26)
    %2402 = llvm.xor %2396, %2401 : i32 loc(#loc26)
    %2403 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2404 = llvm.and %2134, %2403 : i32 loc(#loc26)
    %2405 = llvm.icmp "eq" %2404, %2371 : i32 loc(#loc26)
    %2406 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2407 = llvm.select %2405, %2371, %2406 : i1, i32 loc(#loc26)
    %2408 = llvm.xor %2402, %2407 : i32 loc(#loc26)
    %2409 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2410 = llvm.and %2135, %2409 : i32 loc(#loc26)
    %2411 = llvm.icmp "eq" %2410, %2371 : i32 loc(#loc26)
    %2412 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2413 = llvm.select %2411, %2371, %2412 : i1, i32 loc(#loc26)
    %2414 = llvm.xor %2408, %2413 : i32 loc(#loc26)
    %2415 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2416 = llvm.and %2135, %2415 : i32 loc(#loc26)
    %2417 = llvm.icmp "eq" %2416, %2371 : i32 loc(#loc26)
    %2418 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2419 = llvm.select %2417, %2371, %2418 : i1, i32 loc(#loc26)
    %2420 = llvm.xor %2414, %2419 : i32 loc(#loc26)
    %2421 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2422 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2423 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2424 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2425 = llvm.and %2134, %2424 : i32 loc(#loc26)
    %2426 = llvm.icmp "eq" %2425, %2422 : i32 loc(#loc26)
    %2427 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2428 = llvm.select %2426, %2422, %2427 : i1, i32 loc(#loc26)
    %2429 = llvm.xor %2422, %2428 : i32 loc(#loc26)
    %2430 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2431 = llvm.and %2134, %2430 : i32 loc(#loc26)
    %2432 = llvm.icmp "eq" %2431, %2422 : i32 loc(#loc26)
    %2433 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2434 = llvm.select %2432, %2422, %2433 : i1, i32 loc(#loc26)
    %2435 = llvm.xor %2429, %2434 : i32 loc(#loc26)
    %2436 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2437 = llvm.and %2134, %2436 : i32 loc(#loc26)
    %2438 = llvm.icmp "eq" %2437, %2422 : i32 loc(#loc26)
    %2439 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2440 = llvm.select %2438, %2422, %2439 : i1, i32 loc(#loc26)
    %2441 = llvm.xor %2435, %2440 : i32 loc(#loc26)
    %2442 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2443 = llvm.and %2134, %2442 : i32 loc(#loc26)
    %2444 = llvm.icmp "eq" %2443, %2422 : i32 loc(#loc26)
    %2445 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2446 = llvm.select %2444, %2422, %2445 : i1, i32 loc(#loc26)
    %2447 = llvm.xor %2441, %2446 : i32 loc(#loc26)
    %2448 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2449 = llvm.and %2134, %2448 : i32 loc(#loc26)
    %2450 = llvm.icmp "eq" %2449, %2422 : i32 loc(#loc26)
    %2451 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2452 = llvm.select %2450, %2422, %2451 : i1, i32 loc(#loc26)
    %2453 = llvm.xor %2447, %2452 : i32 loc(#loc26)
    %2454 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2455 = llvm.and %2134, %2454 : i32 loc(#loc26)
    %2456 = llvm.icmp "eq" %2455, %2422 : i32 loc(#loc26)
    %2457 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2458 = llvm.select %2456, %2422, %2457 : i1, i32 loc(#loc26)
    %2459 = llvm.xor %2423, %2458 : i32 loc(#loc26)
    %2460 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2461 = llvm.and %2135, %2460 : i32 loc(#loc26)
    %2462 = llvm.icmp "eq" %2461, %2422 : i32 loc(#loc26)
    %2463 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2464 = llvm.select %2462, %2422, %2463 : i1, i32 loc(#loc26)
    %2465 = llvm.xor %2459, %2464 : i32 loc(#loc26)
    %2466 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2467 = llvm.and %2135, %2466 : i32 loc(#loc26)
    %2468 = llvm.icmp "eq" %2467, %2422 : i32 loc(#loc26)
    %2469 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2470 = llvm.select %2468, %2422, %2469 : i1, i32 loc(#loc26)
    %2471 = llvm.xor %2453, %2470 : i32 loc(#loc26)
    %2472 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2473 = llvm.select %2468, %2422, %2472 : i1, i32 loc(#loc26)
    %2474 = llvm.xor %2465, %2473 : i32 loc(#loc26)
    %2475 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2476 = llvm.mul %2471, %2369 : i32 loc(#loc26)
    %2477 = llvm.add %2475, %2476 : i32 loc(#loc26)
    %2478 = llvm.mul %2474, %2370 : i32 loc(#loc26)
    %2479 = llvm.add %2477, %2478 : i32 loc(#loc26)
    %2480 = llvm.getelementptr inbounds %2122[%2479] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2481 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2482 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2483 = llvm.insertelement %2126, %2481[%2482 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2483, %2480 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2484 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %2485 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2486 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2487 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2488 = llvm.mlir.constant(784 : i32) : i32 loc(#loc26)
    %2489 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2490 = llvm.and %2134, %2489 : i32 loc(#loc26)
    %2491 = llvm.icmp "eq" %2490, %2487 : i32 loc(#loc26)
    %2492 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2493 = llvm.select %2491, %2487, %2492 : i1, i32 loc(#loc26)
    %2494 = llvm.xor %2488, %2493 : i32 loc(#loc26)
    %2495 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2496 = llvm.and %2134, %2495 : i32 loc(#loc26)
    %2497 = llvm.icmp "eq" %2496, %2487 : i32 loc(#loc26)
    %2498 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2499 = llvm.select %2497, %2487, %2498 : i1, i32 loc(#loc26)
    %2500 = llvm.xor %2494, %2499 : i32 loc(#loc26)
    %2501 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2502 = llvm.and %2134, %2501 : i32 loc(#loc26)
    %2503 = llvm.icmp "eq" %2502, %2487 : i32 loc(#loc26)
    %2504 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2505 = llvm.select %2503, %2487, %2504 : i1, i32 loc(#loc26)
    %2506 = llvm.xor %2500, %2505 : i32 loc(#loc26)
    %2507 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2508 = llvm.and %2134, %2507 : i32 loc(#loc26)
    %2509 = llvm.icmp "eq" %2508, %2487 : i32 loc(#loc26)
    %2510 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2511 = llvm.select %2509, %2487, %2510 : i1, i32 loc(#loc26)
    %2512 = llvm.xor %2506, %2511 : i32 loc(#loc26)
    %2513 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2514 = llvm.and %2134, %2513 : i32 loc(#loc26)
    %2515 = llvm.icmp "eq" %2514, %2487 : i32 loc(#loc26)
    %2516 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2517 = llvm.select %2515, %2487, %2516 : i1, i32 loc(#loc26)
    %2518 = llvm.xor %2512, %2517 : i32 loc(#loc26)
    %2519 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2520 = llvm.and %2134, %2519 : i32 loc(#loc26)
    %2521 = llvm.icmp "eq" %2520, %2487 : i32 loc(#loc26)
    %2522 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2523 = llvm.select %2521, %2487, %2522 : i1, i32 loc(#loc26)
    %2524 = llvm.xor %2518, %2523 : i32 loc(#loc26)
    %2525 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2526 = llvm.and %2135, %2525 : i32 loc(#loc26)
    %2527 = llvm.icmp "eq" %2526, %2487 : i32 loc(#loc26)
    %2528 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2529 = llvm.select %2527, %2487, %2528 : i1, i32 loc(#loc26)
    %2530 = llvm.xor %2524, %2529 : i32 loc(#loc26)
    %2531 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2532 = llvm.and %2135, %2531 : i32 loc(#loc26)
    %2533 = llvm.icmp "eq" %2532, %2487 : i32 loc(#loc26)
    %2534 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2535 = llvm.select %2533, %2487, %2534 : i1, i32 loc(#loc26)
    %2536 = llvm.xor %2530, %2535 : i32 loc(#loc26)
    %2537 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2538 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2539 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2540 = llvm.mlir.constant(24 : i32) : i32 loc(#loc26)
    %2541 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2542 = llvm.and %2134, %2541 : i32 loc(#loc26)
    %2543 = llvm.icmp "eq" %2542, %2538 : i32 loc(#loc26)
    %2544 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2545 = llvm.select %2543, %2538, %2544 : i1, i32 loc(#loc26)
    %2546 = llvm.xor %2539, %2545 : i32 loc(#loc26)
    %2547 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2548 = llvm.and %2134, %2547 : i32 loc(#loc26)
    %2549 = llvm.icmp "eq" %2548, %2538 : i32 loc(#loc26)
    %2550 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2551 = llvm.select %2549, %2538, %2550 : i1, i32 loc(#loc26)
    %2552 = llvm.xor %2546, %2551 : i32 loc(#loc26)
    %2553 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2554 = llvm.and %2134, %2553 : i32 loc(#loc26)
    %2555 = llvm.icmp "eq" %2554, %2538 : i32 loc(#loc26)
    %2556 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2557 = llvm.select %2555, %2538, %2556 : i1, i32 loc(#loc26)
    %2558 = llvm.xor %2552, %2557 : i32 loc(#loc26)
    %2559 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2560 = llvm.and %2134, %2559 : i32 loc(#loc26)
    %2561 = llvm.icmp "eq" %2560, %2538 : i32 loc(#loc26)
    %2562 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2563 = llvm.select %2561, %2538, %2562 : i1, i32 loc(#loc26)
    %2564 = llvm.xor %2558, %2563 : i32 loc(#loc26)
    %2565 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2566 = llvm.and %2134, %2565 : i32 loc(#loc26)
    %2567 = llvm.icmp "eq" %2566, %2538 : i32 loc(#loc26)
    %2568 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2569 = llvm.select %2567, %2538, %2568 : i1, i32 loc(#loc26)
    %2570 = llvm.xor %2564, %2569 : i32 loc(#loc26)
    %2571 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2572 = llvm.and %2134, %2571 : i32 loc(#loc26)
    %2573 = llvm.icmp "eq" %2572, %2538 : i32 loc(#loc26)
    %2574 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2575 = llvm.select %2573, %2538, %2574 : i1, i32 loc(#loc26)
    %2576 = llvm.xor %2540, %2575 : i32 loc(#loc26)
    %2577 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2578 = llvm.and %2135, %2577 : i32 loc(#loc26)
    %2579 = llvm.icmp "eq" %2578, %2538 : i32 loc(#loc26)
    %2580 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2581 = llvm.select %2579, %2538, %2580 : i1, i32 loc(#loc26)
    %2582 = llvm.xor %2576, %2581 : i32 loc(#loc26)
    %2583 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2584 = llvm.and %2135, %2583 : i32 loc(#loc26)
    %2585 = llvm.icmp "eq" %2584, %2538 : i32 loc(#loc26)
    %2586 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2587 = llvm.select %2585, %2538, %2586 : i1, i32 loc(#loc26)
    %2588 = llvm.xor %2570, %2587 : i32 loc(#loc26)
    %2589 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2590 = llvm.select %2585, %2538, %2589 : i1, i32 loc(#loc26)
    %2591 = llvm.xor %2582, %2590 : i32 loc(#loc26)
    %2592 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2593 = llvm.mul %2588, %2485 : i32 loc(#loc26)
    %2594 = llvm.add %2592, %2593 : i32 loc(#loc26)
    %2595 = llvm.mul %2591, %2486 : i32 loc(#loc26)
    %2596 = llvm.add %2594, %2595 : i32 loc(#loc26)
    %2597 = llvm.getelementptr inbounds %2122[%2596] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2598 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2599 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2600 = llvm.insertelement %2127, %2598[%2599 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2600, %2597 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2601 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2602 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2603 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2604 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2605 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc26)
    %2606 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2607 = llvm.and %2134, %2606 : i32 loc(#loc26)
    %2608 = llvm.icmp "eq" %2607, %2604 : i32 loc(#loc26)
    %2609 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2610 = llvm.select %2608, %2604, %2609 : i1, i32 loc(#loc26)
    %2611 = llvm.xor %2605, %2610 : i32 loc(#loc26)
    %2612 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2613 = llvm.and %2134, %2612 : i32 loc(#loc26)
    %2614 = llvm.icmp "eq" %2613, %2604 : i32 loc(#loc26)
    %2615 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2616 = llvm.select %2614, %2604, %2615 : i1, i32 loc(#loc26)
    %2617 = llvm.xor %2611, %2616 : i32 loc(#loc26)
    %2618 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2619 = llvm.and %2134, %2618 : i32 loc(#loc26)
    %2620 = llvm.icmp "eq" %2619, %2604 : i32 loc(#loc26)
    %2621 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2622 = llvm.select %2620, %2604, %2621 : i1, i32 loc(#loc26)
    %2623 = llvm.xor %2617, %2622 : i32 loc(#loc26)
    %2624 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2625 = llvm.and %2134, %2624 : i32 loc(#loc26)
    %2626 = llvm.icmp "eq" %2625, %2604 : i32 loc(#loc26)
    %2627 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2628 = llvm.select %2626, %2604, %2627 : i1, i32 loc(#loc26)
    %2629 = llvm.xor %2623, %2628 : i32 loc(#loc26)
    %2630 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2631 = llvm.and %2134, %2630 : i32 loc(#loc26)
    %2632 = llvm.icmp "eq" %2631, %2604 : i32 loc(#loc26)
    %2633 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2634 = llvm.select %2632, %2604, %2633 : i1, i32 loc(#loc26)
    %2635 = llvm.xor %2629, %2634 : i32 loc(#loc26)
    %2636 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2637 = llvm.and %2134, %2636 : i32 loc(#loc26)
    %2638 = llvm.icmp "eq" %2637, %2604 : i32 loc(#loc26)
    %2639 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2640 = llvm.select %2638, %2604, %2639 : i1, i32 loc(#loc26)
    %2641 = llvm.xor %2635, %2640 : i32 loc(#loc26)
    %2642 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2643 = llvm.and %2135, %2642 : i32 loc(#loc26)
    %2644 = llvm.icmp "eq" %2643, %2604 : i32 loc(#loc26)
    %2645 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2646 = llvm.select %2644, %2604, %2645 : i1, i32 loc(#loc26)
    %2647 = llvm.xor %2641, %2646 : i32 loc(#loc26)
    %2648 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2649 = llvm.and %2135, %2648 : i32 loc(#loc26)
    %2650 = llvm.icmp "eq" %2649, %2604 : i32 loc(#loc26)
    %2651 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2652 = llvm.select %2650, %2604, %2651 : i1, i32 loc(#loc26)
    %2653 = llvm.xor %2647, %2652 : i32 loc(#loc26)
    %2654 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2655 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2656 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2657 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2658 = llvm.and %2134, %2657 : i32 loc(#loc26)
    %2659 = llvm.icmp "eq" %2658, %2655 : i32 loc(#loc26)
    %2660 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2661 = llvm.select %2659, %2655, %2660 : i1, i32 loc(#loc26)
    %2662 = llvm.xor %2655, %2661 : i32 loc(#loc26)
    %2663 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2664 = llvm.and %2134, %2663 : i32 loc(#loc26)
    %2665 = llvm.icmp "eq" %2664, %2655 : i32 loc(#loc26)
    %2666 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2667 = llvm.select %2665, %2655, %2666 : i1, i32 loc(#loc26)
    %2668 = llvm.xor %2662, %2667 : i32 loc(#loc26)
    %2669 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2670 = llvm.and %2134, %2669 : i32 loc(#loc26)
    %2671 = llvm.icmp "eq" %2670, %2655 : i32 loc(#loc26)
    %2672 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2673 = llvm.select %2671, %2655, %2672 : i1, i32 loc(#loc26)
    %2674 = llvm.xor %2668, %2673 : i32 loc(#loc26)
    %2675 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2676 = llvm.and %2134, %2675 : i32 loc(#loc26)
    %2677 = llvm.icmp "eq" %2676, %2655 : i32 loc(#loc26)
    %2678 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2679 = llvm.select %2677, %2655, %2678 : i1, i32 loc(#loc26)
    %2680 = llvm.xor %2674, %2679 : i32 loc(#loc26)
    %2681 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2682 = llvm.and %2134, %2681 : i32 loc(#loc26)
    %2683 = llvm.icmp "eq" %2682, %2655 : i32 loc(#loc26)
    %2684 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2685 = llvm.select %2683, %2655, %2684 : i1, i32 loc(#loc26)
    %2686 = llvm.xor %2680, %2685 : i32 loc(#loc26)
    %2687 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2688 = llvm.and %2134, %2687 : i32 loc(#loc26)
    %2689 = llvm.icmp "eq" %2688, %2655 : i32 loc(#loc26)
    %2690 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2691 = llvm.select %2689, %2655, %2690 : i1, i32 loc(#loc26)
    %2692 = llvm.xor %2656, %2691 : i32 loc(#loc26)
    %2693 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2694 = llvm.and %2135, %2693 : i32 loc(#loc26)
    %2695 = llvm.icmp "eq" %2694, %2655 : i32 loc(#loc26)
    %2696 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2697 = llvm.select %2695, %2655, %2696 : i1, i32 loc(#loc26)
    %2698 = llvm.xor %2692, %2697 : i32 loc(#loc26)
    %2699 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2700 = llvm.and %2135, %2699 : i32 loc(#loc26)
    %2701 = llvm.icmp "eq" %2700, %2655 : i32 loc(#loc26)
    %2702 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2703 = llvm.select %2701, %2655, %2702 : i1, i32 loc(#loc26)
    %2704 = llvm.xor %2686, %2703 : i32 loc(#loc26)
    %2705 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2706 = llvm.select %2701, %2655, %2705 : i1, i32 loc(#loc26)
    %2707 = llvm.xor %2698, %2706 : i32 loc(#loc26)
    %2708 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2709 = llvm.mul %2704, %2602 : i32 loc(#loc26)
    %2710 = llvm.add %2708, %2709 : i32 loc(#loc26)
    %2711 = llvm.mul %2707, %2603 : i32 loc(#loc26)
    %2712 = llvm.add %2710, %2711 : i32 loc(#loc26)
    %2713 = llvm.getelementptr inbounds %2122[%2712] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2714 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2715 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2716 = llvm.insertelement %2128, %2714[%2715 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2716, %2713 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2717 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %2718 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2719 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2720 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2721 = llvm.mlir.constant(1296 : i32) : i32 loc(#loc26)
    %2722 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2723 = llvm.and %2134, %2722 : i32 loc(#loc26)
    %2724 = llvm.icmp "eq" %2723, %2720 : i32 loc(#loc26)
    %2725 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2726 = llvm.select %2724, %2720, %2725 : i1, i32 loc(#loc26)
    %2727 = llvm.xor %2721, %2726 : i32 loc(#loc26)
    %2728 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2729 = llvm.and %2134, %2728 : i32 loc(#loc26)
    %2730 = llvm.icmp "eq" %2729, %2720 : i32 loc(#loc26)
    %2731 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2732 = llvm.select %2730, %2720, %2731 : i1, i32 loc(#loc26)
    %2733 = llvm.xor %2727, %2732 : i32 loc(#loc26)
    %2734 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2735 = llvm.and %2134, %2734 : i32 loc(#loc26)
    %2736 = llvm.icmp "eq" %2735, %2720 : i32 loc(#loc26)
    %2737 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2738 = llvm.select %2736, %2720, %2737 : i1, i32 loc(#loc26)
    %2739 = llvm.xor %2733, %2738 : i32 loc(#loc26)
    %2740 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2741 = llvm.and %2134, %2740 : i32 loc(#loc26)
    %2742 = llvm.icmp "eq" %2741, %2720 : i32 loc(#loc26)
    %2743 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2744 = llvm.select %2742, %2720, %2743 : i1, i32 loc(#loc26)
    %2745 = llvm.xor %2739, %2744 : i32 loc(#loc26)
    %2746 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2747 = llvm.and %2134, %2746 : i32 loc(#loc26)
    %2748 = llvm.icmp "eq" %2747, %2720 : i32 loc(#loc26)
    %2749 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2750 = llvm.select %2748, %2720, %2749 : i1, i32 loc(#loc26)
    %2751 = llvm.xor %2745, %2750 : i32 loc(#loc26)
    %2752 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2753 = llvm.and %2134, %2752 : i32 loc(#loc26)
    %2754 = llvm.icmp "eq" %2753, %2720 : i32 loc(#loc26)
    %2755 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2756 = llvm.select %2754, %2720, %2755 : i1, i32 loc(#loc26)
    %2757 = llvm.xor %2751, %2756 : i32 loc(#loc26)
    %2758 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2759 = llvm.and %2135, %2758 : i32 loc(#loc26)
    %2760 = llvm.icmp "eq" %2759, %2720 : i32 loc(#loc26)
    %2761 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2762 = llvm.select %2760, %2720, %2761 : i1, i32 loc(#loc26)
    %2763 = llvm.xor %2757, %2762 : i32 loc(#loc26)
    %2764 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2765 = llvm.and %2135, %2764 : i32 loc(#loc26)
    %2766 = llvm.icmp "eq" %2765, %2720 : i32 loc(#loc26)
    %2767 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2768 = llvm.select %2766, %2720, %2767 : i1, i32 loc(#loc26)
    %2769 = llvm.xor %2763, %2768 : i32 loc(#loc26)
    %2770 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2771 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2772 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2773 = llvm.mlir.constant(40 : i32) : i32 loc(#loc26)
    %2774 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2775 = llvm.and %2134, %2774 : i32 loc(#loc26)
    %2776 = llvm.icmp "eq" %2775, %2771 : i32 loc(#loc26)
    %2777 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2778 = llvm.select %2776, %2771, %2777 : i1, i32 loc(#loc26)
    %2779 = llvm.xor %2772, %2778 : i32 loc(#loc26)
    %2780 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2781 = llvm.and %2134, %2780 : i32 loc(#loc26)
    %2782 = llvm.icmp "eq" %2781, %2771 : i32 loc(#loc26)
    %2783 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2784 = llvm.select %2782, %2771, %2783 : i1, i32 loc(#loc26)
    %2785 = llvm.xor %2779, %2784 : i32 loc(#loc26)
    %2786 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2787 = llvm.and %2134, %2786 : i32 loc(#loc26)
    %2788 = llvm.icmp "eq" %2787, %2771 : i32 loc(#loc26)
    %2789 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2790 = llvm.select %2788, %2771, %2789 : i1, i32 loc(#loc26)
    %2791 = llvm.xor %2785, %2790 : i32 loc(#loc26)
    %2792 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2793 = llvm.and %2134, %2792 : i32 loc(#loc26)
    %2794 = llvm.icmp "eq" %2793, %2771 : i32 loc(#loc26)
    %2795 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2796 = llvm.select %2794, %2771, %2795 : i1, i32 loc(#loc26)
    %2797 = llvm.xor %2791, %2796 : i32 loc(#loc26)
    %2798 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2799 = llvm.and %2134, %2798 : i32 loc(#loc26)
    %2800 = llvm.icmp "eq" %2799, %2771 : i32 loc(#loc26)
    %2801 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2802 = llvm.select %2800, %2771, %2801 : i1, i32 loc(#loc26)
    %2803 = llvm.xor %2797, %2802 : i32 loc(#loc26)
    %2804 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2805 = llvm.and %2134, %2804 : i32 loc(#loc26)
    %2806 = llvm.icmp "eq" %2805, %2771 : i32 loc(#loc26)
    %2807 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2808 = llvm.select %2806, %2771, %2807 : i1, i32 loc(#loc26)
    %2809 = llvm.xor %2773, %2808 : i32 loc(#loc26)
    %2810 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2811 = llvm.and %2135, %2810 : i32 loc(#loc26)
    %2812 = llvm.icmp "eq" %2811, %2771 : i32 loc(#loc26)
    %2813 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2814 = llvm.select %2812, %2771, %2813 : i1, i32 loc(#loc26)
    %2815 = llvm.xor %2809, %2814 : i32 loc(#loc26)
    %2816 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2817 = llvm.and %2135, %2816 : i32 loc(#loc26)
    %2818 = llvm.icmp "eq" %2817, %2771 : i32 loc(#loc26)
    %2819 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2820 = llvm.select %2818, %2771, %2819 : i1, i32 loc(#loc26)
    %2821 = llvm.xor %2803, %2820 : i32 loc(#loc26)
    %2822 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2823 = llvm.select %2818, %2771, %2822 : i1, i32 loc(#loc26)
    %2824 = llvm.xor %2815, %2823 : i32 loc(#loc26)
    %2825 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2826 = llvm.mul %2821, %2718 : i32 loc(#loc26)
    %2827 = llvm.add %2825, %2826 : i32 loc(#loc26)
    %2828 = llvm.mul %2824, %2719 : i32 loc(#loc26)
    %2829 = llvm.add %2827, %2828 : i32 loc(#loc26)
    %2830 = llvm.getelementptr inbounds %2122[%2829] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2831 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2832 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2833 = llvm.insertelement %2129, %2831[%2832 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2833, %2830 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2834 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %2835 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2836 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2837 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2838 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc26)
    %2839 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2840 = llvm.and %2134, %2839 : i32 loc(#loc26)
    %2841 = llvm.icmp "eq" %2840, %2837 : i32 loc(#loc26)
    %2842 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2843 = llvm.select %2841, %2837, %2842 : i1, i32 loc(#loc26)
    %2844 = llvm.xor %2838, %2843 : i32 loc(#loc26)
    %2845 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2846 = llvm.and %2134, %2845 : i32 loc(#loc26)
    %2847 = llvm.icmp "eq" %2846, %2837 : i32 loc(#loc26)
    %2848 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2849 = llvm.select %2847, %2837, %2848 : i1, i32 loc(#loc26)
    %2850 = llvm.xor %2844, %2849 : i32 loc(#loc26)
    %2851 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2852 = llvm.and %2134, %2851 : i32 loc(#loc26)
    %2853 = llvm.icmp "eq" %2852, %2837 : i32 loc(#loc26)
    %2854 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2855 = llvm.select %2853, %2837, %2854 : i1, i32 loc(#loc26)
    %2856 = llvm.xor %2850, %2855 : i32 loc(#loc26)
    %2857 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2858 = llvm.and %2134, %2857 : i32 loc(#loc26)
    %2859 = llvm.icmp "eq" %2858, %2837 : i32 loc(#loc26)
    %2860 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2861 = llvm.select %2859, %2837, %2860 : i1, i32 loc(#loc26)
    %2862 = llvm.xor %2856, %2861 : i32 loc(#loc26)
    %2863 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2864 = llvm.and %2134, %2863 : i32 loc(#loc26)
    %2865 = llvm.icmp "eq" %2864, %2837 : i32 loc(#loc26)
    %2866 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2867 = llvm.select %2865, %2837, %2866 : i1, i32 loc(#loc26)
    %2868 = llvm.xor %2862, %2867 : i32 loc(#loc26)
    %2869 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2870 = llvm.and %2134, %2869 : i32 loc(#loc26)
    %2871 = llvm.icmp "eq" %2870, %2837 : i32 loc(#loc26)
    %2872 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2873 = llvm.select %2871, %2837, %2872 : i1, i32 loc(#loc26)
    %2874 = llvm.xor %2868, %2873 : i32 loc(#loc26)
    %2875 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2876 = llvm.and %2135, %2875 : i32 loc(#loc26)
    %2877 = llvm.icmp "eq" %2876, %2837 : i32 loc(#loc26)
    %2878 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2879 = llvm.select %2877, %2837, %2878 : i1, i32 loc(#loc26)
    %2880 = llvm.xor %2874, %2879 : i32 loc(#loc26)
    %2881 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2882 = llvm.and %2135, %2881 : i32 loc(#loc26)
    %2883 = llvm.icmp "eq" %2882, %2837 : i32 loc(#loc26)
    %2884 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %2885 = llvm.select %2883, %2837, %2884 : i1, i32 loc(#loc26)
    %2886 = llvm.xor %2880, %2885 : i32 loc(#loc26)
    %2887 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2888 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2889 = llvm.mlir.constant(48 : i32) : i32 loc(#loc26)
    %2890 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2891 = llvm.and %2134, %2890 : i32 loc(#loc26)
    %2892 = llvm.icmp "eq" %2891, %2888 : i32 loc(#loc26)
    %2893 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2894 = llvm.select %2892, %2888, %2893 : i1, i32 loc(#loc26)
    %2895 = llvm.xor %2888, %2894 : i32 loc(#loc26)
    %2896 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2897 = llvm.and %2134, %2896 : i32 loc(#loc26)
    %2898 = llvm.icmp "eq" %2897, %2888 : i32 loc(#loc26)
    %2899 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2900 = llvm.select %2898, %2888, %2899 : i1, i32 loc(#loc26)
    %2901 = llvm.xor %2895, %2900 : i32 loc(#loc26)
    %2902 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2903 = llvm.and %2134, %2902 : i32 loc(#loc26)
    %2904 = llvm.icmp "eq" %2903, %2888 : i32 loc(#loc26)
    %2905 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2906 = llvm.select %2904, %2888, %2905 : i1, i32 loc(#loc26)
    %2907 = llvm.xor %2901, %2906 : i32 loc(#loc26)
    %2908 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2909 = llvm.and %2134, %2908 : i32 loc(#loc26)
    %2910 = llvm.icmp "eq" %2909, %2888 : i32 loc(#loc26)
    %2911 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2912 = llvm.select %2910, %2888, %2911 : i1, i32 loc(#loc26)
    %2913 = llvm.xor %2907, %2912 : i32 loc(#loc26)
    %2914 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2915 = llvm.and %2134, %2914 : i32 loc(#loc26)
    %2916 = llvm.icmp "eq" %2915, %2888 : i32 loc(#loc26)
    %2917 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2918 = llvm.select %2916, %2888, %2917 : i1, i32 loc(#loc26)
    %2919 = llvm.xor %2913, %2918 : i32 loc(#loc26)
    %2920 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2921 = llvm.and %2134, %2920 : i32 loc(#loc26)
    %2922 = llvm.icmp "eq" %2921, %2888 : i32 loc(#loc26)
    %2923 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2924 = llvm.select %2922, %2888, %2923 : i1, i32 loc(#loc26)
    %2925 = llvm.xor %2889, %2924 : i32 loc(#loc26)
    %2926 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2927 = llvm.and %2135, %2926 : i32 loc(#loc26)
    %2928 = llvm.icmp "eq" %2927, %2888 : i32 loc(#loc26)
    %2929 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2930 = llvm.select %2928, %2888, %2929 : i1, i32 loc(#loc26)
    %2931 = llvm.xor %2925, %2930 : i32 loc(#loc26)
    %2932 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2933 = llvm.and %2135, %2932 : i32 loc(#loc26)
    %2934 = llvm.icmp "eq" %2933, %2888 : i32 loc(#loc26)
    %2935 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2936 = llvm.select %2934, %2888, %2935 : i1, i32 loc(#loc26)
    %2937 = llvm.xor %2919, %2936 : i32 loc(#loc26)
    %2938 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2939 = llvm.select %2934, %2888, %2938 : i1, i32 loc(#loc26)
    %2940 = llvm.xor %2931, %2939 : i32 loc(#loc26)
    %2941 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2942 = llvm.mul %2937, %2835 : i32 loc(#loc26)
    %2943 = llvm.add %2941, %2942 : i32 loc(#loc26)
    %2944 = llvm.mul %2940, %2836 : i32 loc(#loc26)
    %2945 = llvm.add %2943, %2944 : i32 loc(#loc26)
    %2946 = llvm.getelementptr inbounds %2122[%2945] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %2947 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %2948 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2949 = llvm.insertelement %2130, %2947[%2948 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %2949, %2946 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %2950 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %2951 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2952 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2953 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %2954 = llvm.mlir.constant(1808 : i32) : i32 loc(#loc26)
    %2955 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2956 = llvm.and %2134, %2955 : i32 loc(#loc26)
    %2957 = llvm.icmp "eq" %2956, %2953 : i32 loc(#loc26)
    %2958 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2959 = llvm.select %2957, %2953, %2958 : i1, i32 loc(#loc26)
    %2960 = llvm.xor %2954, %2959 : i32 loc(#loc26)
    %2961 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2962 = llvm.and %2134, %2961 : i32 loc(#loc26)
    %2963 = llvm.icmp "eq" %2962, %2953 : i32 loc(#loc26)
    %2964 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2965 = llvm.select %2963, %2953, %2964 : i1, i32 loc(#loc26)
    %2966 = llvm.xor %2960, %2965 : i32 loc(#loc26)
    %2967 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2968 = llvm.and %2134, %2967 : i32 loc(#loc26)
    %2969 = llvm.icmp "eq" %2968, %2953 : i32 loc(#loc26)
    %2970 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %2971 = llvm.select %2969, %2953, %2970 : i1, i32 loc(#loc26)
    %2972 = llvm.xor %2966, %2971 : i32 loc(#loc26)
    %2973 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2974 = llvm.and %2134, %2973 : i32 loc(#loc26)
    %2975 = llvm.icmp "eq" %2974, %2953 : i32 loc(#loc26)
    %2976 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %2977 = llvm.select %2975, %2953, %2976 : i1, i32 loc(#loc26)
    %2978 = llvm.xor %2972, %2977 : i32 loc(#loc26)
    %2979 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2980 = llvm.and %2134, %2979 : i32 loc(#loc26)
    %2981 = llvm.icmp "eq" %2980, %2953 : i32 loc(#loc26)
    %2982 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %2983 = llvm.select %2981, %2953, %2982 : i1, i32 loc(#loc26)
    %2984 = llvm.xor %2978, %2983 : i32 loc(#loc26)
    %2985 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2986 = llvm.and %2134, %2985 : i32 loc(#loc26)
    %2987 = llvm.icmp "eq" %2986, %2953 : i32 loc(#loc26)
    %2988 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %2989 = llvm.select %2987, %2953, %2988 : i1, i32 loc(#loc26)
    %2990 = llvm.xor %2984, %2989 : i32 loc(#loc26)
    %2991 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %2992 = llvm.and %2135, %2991 : i32 loc(#loc26)
    %2993 = llvm.icmp "eq" %2992, %2953 : i32 loc(#loc26)
    %2994 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %2995 = llvm.select %2993, %2953, %2994 : i1, i32 loc(#loc26)
    %2996 = llvm.xor %2990, %2995 : i32 loc(#loc26)
    %2997 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %2998 = llvm.and %2135, %2997 : i32 loc(#loc26)
    %2999 = llvm.icmp "eq" %2998, %2953 : i32 loc(#loc26)
    %3000 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %3001 = llvm.select %2999, %2953, %3000 : i1, i32 loc(#loc26)
    %3002 = llvm.xor %2996, %3001 : i32 loc(#loc26)
    %3003 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3004 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3005 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %3006 = llvm.mlir.constant(56 : i32) : i32 loc(#loc26)
    %3007 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3008 = llvm.and %2134, %3007 : i32 loc(#loc26)
    %3009 = llvm.icmp "eq" %3008, %3004 : i32 loc(#loc26)
    %3010 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3011 = llvm.select %3009, %3004, %3010 : i1, i32 loc(#loc26)
    %3012 = llvm.xor %3005, %3011 : i32 loc(#loc26)
    %3013 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3014 = llvm.and %2134, %3013 : i32 loc(#loc26)
    %3015 = llvm.icmp "eq" %3014, %3004 : i32 loc(#loc26)
    %3016 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3017 = llvm.select %3015, %3004, %3016 : i1, i32 loc(#loc26)
    %3018 = llvm.xor %3012, %3017 : i32 loc(#loc26)
    %3019 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3020 = llvm.and %2134, %3019 : i32 loc(#loc26)
    %3021 = llvm.icmp "eq" %3020, %3004 : i32 loc(#loc26)
    %3022 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3023 = llvm.select %3021, %3004, %3022 : i1, i32 loc(#loc26)
    %3024 = llvm.xor %3018, %3023 : i32 loc(#loc26)
    %3025 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3026 = llvm.and %2134, %3025 : i32 loc(#loc26)
    %3027 = llvm.icmp "eq" %3026, %3004 : i32 loc(#loc26)
    %3028 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3029 = llvm.select %3027, %3004, %3028 : i1, i32 loc(#loc26)
    %3030 = llvm.xor %3024, %3029 : i32 loc(#loc26)
    %3031 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %3032 = llvm.and %2134, %3031 : i32 loc(#loc26)
    %3033 = llvm.icmp "eq" %3032, %3004 : i32 loc(#loc26)
    %3034 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %3035 = llvm.select %3033, %3004, %3034 : i1, i32 loc(#loc26)
    %3036 = llvm.xor %3030, %3035 : i32 loc(#loc26)
    %3037 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %3038 = llvm.and %2134, %3037 : i32 loc(#loc26)
    %3039 = llvm.icmp "eq" %3038, %3004 : i32 loc(#loc26)
    %3040 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3041 = llvm.select %3039, %3004, %3040 : i1, i32 loc(#loc26)
    %3042 = llvm.xor %3006, %3041 : i32 loc(#loc26)
    %3043 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3044 = llvm.and %2135, %3043 : i32 loc(#loc26)
    %3045 = llvm.icmp "eq" %3044, %3004 : i32 loc(#loc26)
    %3046 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3047 = llvm.select %3045, %3004, %3046 : i1, i32 loc(#loc26)
    %3048 = llvm.xor %3042, %3047 : i32 loc(#loc26)
    %3049 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3050 = llvm.and %2135, %3049 : i32 loc(#loc26)
    %3051 = llvm.icmp "eq" %3050, %3004 : i32 loc(#loc26)
    %3052 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3053 = llvm.select %3051, %3004, %3052 : i1, i32 loc(#loc26)
    %3054 = llvm.xor %3036, %3053 : i32 loc(#loc26)
    %3055 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3056 = llvm.select %3051, %3004, %3055 : i1, i32 loc(#loc26)
    %3057 = llvm.xor %3048, %3056 : i32 loc(#loc26)
    %3058 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3059 = llvm.mul %3054, %2951 : i32 loc(#loc26)
    %3060 = llvm.add %3058, %3059 : i32 loc(#loc26)
    %3061 = llvm.mul %3057, %2952 : i32 loc(#loc26)
    %3062 = llvm.add %3060, %3061 : i32 loc(#loc26)
    %3063 = llvm.getelementptr inbounds %2122[%3062] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %3064 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %3065 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3066 = llvm.insertelement %2131, %3064[%3065 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %3066, %3063 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %3067 = llvm.mlir.undef : !llvm.struct<(ptr<3>, i32, i32)> loc(#loc26)
    %3068 = llvm.insertvalue %2122, %3067[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %3069 = llvm.insertvalue %2123, %3068[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %3070 = llvm.insertvalue %2123, %3069[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    rocdl.barrier loc(#loc26)
    %3071 = llvm.extractvalue %3070[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %3072 = llvm.extractvalue %3070[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %3073 = llvm.extractvalue %3070[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %3074 = rocdl.workitem.id.x : i32 loc(#loc26)
    %3075 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %3076 = llvm.udiv %3074, %3075 : i32 loc(#loc26)
    %3077 = llvm.urem %3074, %3075 : i32 loc(#loc26)
    %3078 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3079 = llvm.urem %3076, %3078 : i32 loc(#loc26)
    %3080 = llvm.udiv %3076, %3078 : i32 loc(#loc26)
    %3081 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3082 = llvm.urem %3080, %3081 : i32 loc(#loc26)
    %3083 = llvm.udiv %3080, %3081 : i32 loc(#loc26)
    %3084 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3085 = llvm.urem %3079, %3084 : i32 loc(#loc26)
    %3086 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3087 = llvm.urem %3076, %3086 : i32 loc(#loc26)
    %3088 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3089 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %3090 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3091 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %3092 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %3093 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %3094 = llvm.mul %3085, %3093 : i32 loc(#loc26)
    %3095 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3096 = llvm.urem %3077, %3092 : i32 loc(#loc26)
    %3097 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3098 = llvm.icmp "uge" %3077, %3091 : i32 loc(#loc26)
    %3099 = llvm.select %3098, %3097, %3090 : i1, i32 loc(#loc26)
    %3100 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3101 = llvm.add %3090, %3096 : i32 loc(#loc26)
    %3102 = llvm.add %3101, %3090 : i32 loc(#loc26)
    %3103 = llvm.add %3102, %3094 : i32 loc(#loc26)
    %3104 = llvm.add %3095, %3099 : i32 loc(#loc26)
    %3105 = llvm.add %3104, %3100 : i32 loc(#loc26)
    %3106 = llvm.add %3103, %3073 : i32 loc(#loc26)
    %3107 = llvm.add %3105, %3072 : i32 loc(#loc26)
    %3108 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %3109 = llvm.urem %3077, %3092 : i32 loc(#loc26)
    %3110 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3111 = llvm.icmp "uge" %3077, %3091 : i32 loc(#loc26)
    %3112 = llvm.select %3111, %3110, %3090 : i1, i32 loc(#loc26)
    %3113 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3114 = llvm.add %3090, %3109 : i32 loc(#loc26)
    %3115 = llvm.add %3114, %3090 : i32 loc(#loc26)
    %3116 = llvm.add %3115, %3094 : i32 loc(#loc26)
    %3117 = llvm.add %3108, %3112 : i32 loc(#loc26)
    %3118 = llvm.add %3117, %3113 : i32 loc(#loc26)
    %3119 = llvm.add %3116, %3073 : i32 loc(#loc26)
    %3120 = llvm.add %3118, %3072 : i32 loc(#loc26)
    %3121 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3122 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3123 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3124 = llvm.udiv %3106, %3122 : i32 loc(#loc26)
    %3125 = llvm.urem %3124, %3123 : i32 loc(#loc26)
    %3126 = llvm.udiv %3107, %3121 : i32 loc(#loc26)
    %3127 = llvm.xor %3126, %3125 : i32 loc(#loc26)
    %3128 = llvm.mul %3127, %3121 : i32 loc(#loc26)
    %3129 = llvm.urem %3107, %3121 : i32 loc(#loc26)
    %3130 = llvm.add %3128, %3129 : i32 loc(#loc26)
    %3131 = llvm.mul %3130, %3088 : i32 loc(#loc26)
    %3132 = llvm.mul %3106, %3089 : i32 loc(#loc26)
    %3133 = llvm.add %3131, %3132 : i32 loc(#loc26)
    %3134 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %3135 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3136 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3137 = llvm.udiv %3119, %3135 : i32 loc(#loc26)
    %3138 = llvm.urem %3137, %3136 : i32 loc(#loc26)
    %3139 = llvm.udiv %3120, %3134 : i32 loc(#loc26)
    %3140 = llvm.xor %3139, %3138 : i32 loc(#loc26)
    %3141 = llvm.mul %3140, %3134 : i32 loc(#loc26)
    %3142 = llvm.urem %3120, %3134 : i32 loc(#loc26)
    %3143 = llvm.add %3141, %3142 : i32 loc(#loc26)
    %3144 = llvm.mul %3143, %3088 : i32 loc(#loc26)
    %3145 = llvm.mul %3119, %3089 : i32 loc(#loc26)
    %3146 = llvm.add %3144, %3145 : i32 loc(#loc26)
    %3147 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3148 = llvm.mul %3147, %3089 : i32 loc(#loc26)
    %3149 = llvm.add %3148, %3133 : i32 loc(#loc26)
    %3150 = llvm.add %3148, %3146 : i32 loc(#loc26)
    %3151 = llvm.mul %3072, %3088 : i32 loc(#loc26)
    %3152 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3153 = llvm.sub %3152, %3151 : i32 loc(#loc26)
    %3154 = llvm.getelementptr %3071[%3153] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %3155 = llvm.mul %3073, %3089 : i32 loc(#loc26)
    %3156 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3157 = llvm.sub %3156, %3155 : i32 loc(#loc26)
    %3158 = llvm.getelementptr %3154[%3157] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %3159 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3160 = llvm.add %3087, %3159 : i32 loc(#loc26)
    %3161 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc26)
    %3162 = llvm.mul %3161, %3160 : i32 loc(#loc26)
    %3163 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3164 = llvm.add %3149, %3162 : i32 loc(#loc26)
    %3165 = llvm.getelementptr %3158[%3164] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %3166 = llvm.load %3165 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc26)
    %3167 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3168 = llvm.extractelement %3166[%3167 : i32] : vector<8xbf16> loc(#loc26)
    %3169 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3170 = llvm.extractelement %3166[%3169 : i32] : vector<8xbf16> loc(#loc26)
    %3171 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3172 = llvm.extractelement %3166[%3171 : i32] : vector<8xbf16> loc(#loc26)
    %3173 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %3174 = llvm.extractelement %3166[%3173 : i32] : vector<8xbf16> loc(#loc26)
    %3175 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3176 = llvm.extractelement %3166[%3175 : i32] : vector<8xbf16> loc(#loc26)
    %3177 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %3178 = llvm.extractelement %3166[%3177 : i32] : vector<8xbf16> loc(#loc26)
    %3179 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %3180 = llvm.extractelement %3166[%3179 : i32] : vector<8xbf16> loc(#loc26)
    %3181 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %3182 = llvm.extractelement %3166[%3181 : i32] : vector<8xbf16> loc(#loc26)
    %3183 = llvm.add %3150, %3162 : i32 loc(#loc26)
    %3184 = llvm.getelementptr %3158[%3183] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %3185 = llvm.load %3184 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc26)
    %3186 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %3187 = llvm.extractelement %3185[%3186 : i32] : vector<8xbf16> loc(#loc26)
    %3188 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %3189 = llvm.extractelement %3185[%3188 : i32] : vector<8xbf16> loc(#loc26)
    %3190 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %3191 = llvm.extractelement %3185[%3190 : i32] : vector<8xbf16> loc(#loc26)
    %3192 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %3193 = llvm.extractelement %3185[%3192 : i32] : vector<8xbf16> loc(#loc26)
    %3194 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %3195 = llvm.extractelement %3185[%3194 : i32] : vector<8xbf16> loc(#loc26)
    %3196 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %3197 = llvm.extractelement %3185[%3196 : i32] : vector<8xbf16> loc(#loc26)
    %3198 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %3199 = llvm.extractelement %3185[%3198 : i32] : vector<8xbf16> loc(#loc26)
    %3200 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %3201 = llvm.extractelement %3185[%3200 : i32] : vector<8xbf16> loc(#loc26)
    %3202 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc26)
    %3203 = llvm.insertvalue %3168, %3202[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3204 = llvm.insertvalue %3170, %3203[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3205 = llvm.insertvalue %3172, %3204[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3206 = llvm.insertvalue %3174, %3205[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3207 = llvm.insertvalue %3176, %3206[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3208 = llvm.insertvalue %3178, %3207[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3209 = llvm.insertvalue %3180, %3208[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3210 = llvm.insertvalue %3182, %3209[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3211 = llvm.insertvalue %3187, %3210[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3212 = llvm.insertvalue %3189, %3211[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3213 = llvm.insertvalue %3191, %3212[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3214 = llvm.insertvalue %3193, %3213[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3215 = llvm.insertvalue %3195, %3214[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3216 = llvm.insertvalue %3197, %3215[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3217 = llvm.insertvalue %3199, %3216[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %3218 = llvm.insertvalue %3201, %3217[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    rocdl.barrier loc(#loc15)
    %3219 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3220 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %3221 = llvm.getelementptr %3220[%3219] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc15)
    %3222 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3223 = llvm.extractvalue %1754[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3224 = llvm.extractvalue %1754[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3225 = llvm.extractvalue %1754[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3226 = llvm.extractvalue %1754[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3227 = llvm.extractvalue %1754[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3228 = llvm.extractvalue %1754[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3229 = llvm.extractvalue %1754[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3230 = llvm.extractvalue %1754[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %3231 = rocdl.workitem.id.x : i32 loc(#loc15)
    %3232 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3233 = llvm.urem %3231, %3232 : i32 loc(#loc15)
    %3234 = llvm.udiv %3231, %3232 : i32 loc(#loc15)
    %3235 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3236 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3237 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3238 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3239 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3240 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3241 = llvm.and %3233, %3240 : i32 loc(#loc15)
    %3242 = llvm.icmp "eq" %3241, %3239 : i32 loc(#loc15)
    %3243 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3244 = llvm.select %3242, %3239, %3243 : i1, i32 loc(#loc15)
    %3245 = llvm.xor %3239, %3244 : i32 loc(#loc15)
    %3246 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3247 = llvm.and %3233, %3246 : i32 loc(#loc15)
    %3248 = llvm.icmp "eq" %3247, %3239 : i32 loc(#loc15)
    %3249 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3250 = llvm.select %3248, %3239, %3249 : i1, i32 loc(#loc15)
    %3251 = llvm.xor %3245, %3250 : i32 loc(#loc15)
    %3252 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3253 = llvm.and %3233, %3252 : i32 loc(#loc15)
    %3254 = llvm.icmp "eq" %3253, %3239 : i32 loc(#loc15)
    %3255 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3256 = llvm.select %3254, %3239, %3255 : i1, i32 loc(#loc15)
    %3257 = llvm.xor %3251, %3256 : i32 loc(#loc15)
    %3258 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3259 = llvm.and %3233, %3258 : i32 loc(#loc15)
    %3260 = llvm.icmp "eq" %3259, %3239 : i32 loc(#loc15)
    %3261 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3262 = llvm.select %3260, %3239, %3261 : i1, i32 loc(#loc15)
    %3263 = llvm.xor %3257, %3262 : i32 loc(#loc15)
    %3264 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3265 = llvm.and %3233, %3264 : i32 loc(#loc15)
    %3266 = llvm.icmp "eq" %3265, %3239 : i32 loc(#loc15)
    %3267 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3268 = llvm.select %3266, %3239, %3267 : i1, i32 loc(#loc15)
    %3269 = llvm.xor %3263, %3268 : i32 loc(#loc15)
    %3270 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3271 = llvm.and %3233, %3270 : i32 loc(#loc15)
    %3272 = llvm.icmp "eq" %3271, %3239 : i32 loc(#loc15)
    %3273 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3274 = llvm.select %3272, %3239, %3273 : i1, i32 loc(#loc15)
    %3275 = llvm.xor %3269, %3274 : i32 loc(#loc15)
    %3276 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3277 = llvm.and %3234, %3276 : i32 loc(#loc15)
    %3278 = llvm.icmp "eq" %3277, %3239 : i32 loc(#loc15)
    %3279 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3280 = llvm.select %3278, %3239, %3279 : i1, i32 loc(#loc15)
    %3281 = llvm.xor %3275, %3280 : i32 loc(#loc15)
    %3282 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3283 = llvm.and %3234, %3282 : i32 loc(#loc15)
    %3284 = llvm.icmp "eq" %3283, %3239 : i32 loc(#loc15)
    %3285 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3286 = llvm.select %3284, %3239, %3285 : i1, i32 loc(#loc15)
    %3287 = llvm.xor %3281, %3286 : i32 loc(#loc15)
    %3288 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3289 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3290 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3291 = llvm.and %3233, %3290 : i32 loc(#loc15)
    %3292 = llvm.icmp "eq" %3291, %3289 : i32 loc(#loc15)
    %3293 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3294 = llvm.select %3292, %3289, %3293 : i1, i32 loc(#loc15)
    %3295 = llvm.xor %3289, %3294 : i32 loc(#loc15)
    %3296 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3297 = llvm.and %3233, %3296 : i32 loc(#loc15)
    %3298 = llvm.icmp "eq" %3297, %3289 : i32 loc(#loc15)
    %3299 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3300 = llvm.select %3298, %3289, %3299 : i1, i32 loc(#loc15)
    %3301 = llvm.xor %3295, %3300 : i32 loc(#loc15)
    %3302 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3303 = llvm.and %3233, %3302 : i32 loc(#loc15)
    %3304 = llvm.icmp "eq" %3303, %3289 : i32 loc(#loc15)
    %3305 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3306 = llvm.select %3304, %3289, %3305 : i1, i32 loc(#loc15)
    %3307 = llvm.xor %3301, %3306 : i32 loc(#loc15)
    %3308 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3309 = llvm.and %3233, %3308 : i32 loc(#loc15)
    %3310 = llvm.icmp "eq" %3309, %3289 : i32 loc(#loc15)
    %3311 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3312 = llvm.select %3310, %3289, %3311 : i1, i32 loc(#loc15)
    %3313 = llvm.xor %3307, %3312 : i32 loc(#loc15)
    %3314 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3315 = llvm.and %3233, %3314 : i32 loc(#loc15)
    %3316 = llvm.icmp "eq" %3315, %3289 : i32 loc(#loc15)
    %3317 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3318 = llvm.select %3316, %3289, %3317 : i1, i32 loc(#loc15)
    %3319 = llvm.xor %3313, %3318 : i32 loc(#loc15)
    %3320 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3321 = llvm.and %3233, %3320 : i32 loc(#loc15)
    %3322 = llvm.icmp "eq" %3321, %3289 : i32 loc(#loc15)
    %3323 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3324 = llvm.select %3322, %3289, %3323 : i1, i32 loc(#loc15)
    %3325 = llvm.xor %3289, %3324 : i32 loc(#loc15)
    %3326 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3327 = llvm.and %3234, %3326 : i32 loc(#loc15)
    %3328 = llvm.icmp "eq" %3327, %3289 : i32 loc(#loc15)
    %3329 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3330 = llvm.select %3328, %3289, %3329 : i1, i32 loc(#loc15)
    %3331 = llvm.xor %3325, %3330 : i32 loc(#loc15)
    %3332 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3333 = llvm.and %3234, %3332 : i32 loc(#loc15)
    %3334 = llvm.icmp "eq" %3333, %3289 : i32 loc(#loc15)
    %3335 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3336 = llvm.select %3334, %3289, %3335 : i1, i32 loc(#loc15)
    %3337 = llvm.xor %3319, %3336 : i32 loc(#loc15)
    %3338 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3339 = llvm.select %3334, %3289, %3338 : i1, i32 loc(#loc15)
    %3340 = llvm.xor %3331, %3339 : i32 loc(#loc15)
    %3341 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3342 = llvm.mul %3337, %3237 : i32 loc(#loc15)
    %3343 = llvm.add %3341, %3342 : i32 loc(#loc15)
    %3344 = llvm.mul %3340, %3238 : i32 loc(#loc15)
    %3345 = llvm.add %3343, %3344 : i32 loc(#loc15)
    %3346 = llvm.getelementptr inbounds %3221[%3345] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %3347 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %3348 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3349 = llvm.insertelement %3223, %3347[%3348 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %3349, %3346 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %3350 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3351 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3352 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3353 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3354 = llvm.mlir.constant(272 : i32) : i32 loc(#loc15)
    %3355 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3356 = llvm.and %3233, %3355 : i32 loc(#loc15)
    %3357 = llvm.icmp "eq" %3356, %3353 : i32 loc(#loc15)
    %3358 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3359 = llvm.select %3357, %3353, %3358 : i1, i32 loc(#loc15)
    %3360 = llvm.xor %3354, %3359 : i32 loc(#loc15)
    %3361 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3362 = llvm.and %3233, %3361 : i32 loc(#loc15)
    %3363 = llvm.icmp "eq" %3362, %3353 : i32 loc(#loc15)
    %3364 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3365 = llvm.select %3363, %3353, %3364 : i1, i32 loc(#loc15)
    %3366 = llvm.xor %3360, %3365 : i32 loc(#loc15)
    %3367 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3368 = llvm.and %3233, %3367 : i32 loc(#loc15)
    %3369 = llvm.icmp "eq" %3368, %3353 : i32 loc(#loc15)
    %3370 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3371 = llvm.select %3369, %3353, %3370 : i1, i32 loc(#loc15)
    %3372 = llvm.xor %3366, %3371 : i32 loc(#loc15)
    %3373 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3374 = llvm.and %3233, %3373 : i32 loc(#loc15)
    %3375 = llvm.icmp "eq" %3374, %3353 : i32 loc(#loc15)
    %3376 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3377 = llvm.select %3375, %3353, %3376 : i1, i32 loc(#loc15)
    %3378 = llvm.xor %3372, %3377 : i32 loc(#loc15)
    %3379 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3380 = llvm.and %3233, %3379 : i32 loc(#loc15)
    %3381 = llvm.icmp "eq" %3380, %3353 : i32 loc(#loc15)
    %3382 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3383 = llvm.select %3381, %3353, %3382 : i1, i32 loc(#loc15)
    %3384 = llvm.xor %3378, %3383 : i32 loc(#loc15)
    %3385 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3386 = llvm.and %3233, %3385 : i32 loc(#loc15)
    %3387 = llvm.icmp "eq" %3386, %3353 : i32 loc(#loc15)
    %3388 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3389 = llvm.select %3387, %3353, %3388 : i1, i32 loc(#loc15)
    %3390 = llvm.xor %3384, %3389 : i32 loc(#loc15)
    %3391 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3392 = llvm.and %3234, %3391 : i32 loc(#loc15)
    %3393 = llvm.icmp "eq" %3392, %3353 : i32 loc(#loc15)
    %3394 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3395 = llvm.select %3393, %3353, %3394 : i1, i32 loc(#loc15)
    %3396 = llvm.xor %3390, %3395 : i32 loc(#loc15)
    %3397 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3398 = llvm.and %3234, %3397 : i32 loc(#loc15)
    %3399 = llvm.icmp "eq" %3398, %3353 : i32 loc(#loc15)
    %3400 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3401 = llvm.select %3399, %3353, %3400 : i1, i32 loc(#loc15)
    %3402 = llvm.xor %3396, %3401 : i32 loc(#loc15)
    %3403 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3404 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3405 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3406 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3407 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3408 = llvm.and %3233, %3407 : i32 loc(#loc15)
    %3409 = llvm.icmp "eq" %3408, %3404 : i32 loc(#loc15)
    %3410 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3411 = llvm.select %3409, %3404, %3410 : i1, i32 loc(#loc15)
    %3412 = llvm.xor %3405, %3411 : i32 loc(#loc15)
    %3413 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3414 = llvm.and %3233, %3413 : i32 loc(#loc15)
    %3415 = llvm.icmp "eq" %3414, %3404 : i32 loc(#loc15)
    %3416 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3417 = llvm.select %3415, %3404, %3416 : i1, i32 loc(#loc15)
    %3418 = llvm.xor %3412, %3417 : i32 loc(#loc15)
    %3419 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3420 = llvm.and %3233, %3419 : i32 loc(#loc15)
    %3421 = llvm.icmp "eq" %3420, %3404 : i32 loc(#loc15)
    %3422 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3423 = llvm.select %3421, %3404, %3422 : i1, i32 loc(#loc15)
    %3424 = llvm.xor %3418, %3423 : i32 loc(#loc15)
    %3425 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3426 = llvm.and %3233, %3425 : i32 loc(#loc15)
    %3427 = llvm.icmp "eq" %3426, %3404 : i32 loc(#loc15)
    %3428 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3429 = llvm.select %3427, %3404, %3428 : i1, i32 loc(#loc15)
    %3430 = llvm.xor %3424, %3429 : i32 loc(#loc15)
    %3431 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3432 = llvm.and %3233, %3431 : i32 loc(#loc15)
    %3433 = llvm.icmp "eq" %3432, %3404 : i32 loc(#loc15)
    %3434 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3435 = llvm.select %3433, %3404, %3434 : i1, i32 loc(#loc15)
    %3436 = llvm.xor %3430, %3435 : i32 loc(#loc15)
    %3437 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3438 = llvm.and %3233, %3437 : i32 loc(#loc15)
    %3439 = llvm.icmp "eq" %3438, %3404 : i32 loc(#loc15)
    %3440 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3441 = llvm.select %3439, %3404, %3440 : i1, i32 loc(#loc15)
    %3442 = llvm.xor %3406, %3441 : i32 loc(#loc15)
    %3443 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3444 = llvm.and %3234, %3443 : i32 loc(#loc15)
    %3445 = llvm.icmp "eq" %3444, %3404 : i32 loc(#loc15)
    %3446 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3447 = llvm.select %3445, %3404, %3446 : i1, i32 loc(#loc15)
    %3448 = llvm.xor %3442, %3447 : i32 loc(#loc15)
    %3449 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3450 = llvm.and %3234, %3449 : i32 loc(#loc15)
    %3451 = llvm.icmp "eq" %3450, %3404 : i32 loc(#loc15)
    %3452 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3453 = llvm.select %3451, %3404, %3452 : i1, i32 loc(#loc15)
    %3454 = llvm.xor %3436, %3453 : i32 loc(#loc15)
    %3455 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3456 = llvm.select %3451, %3404, %3455 : i1, i32 loc(#loc15)
    %3457 = llvm.xor %3448, %3456 : i32 loc(#loc15)
    %3458 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3459 = llvm.mul %3454, %3351 : i32 loc(#loc15)
    %3460 = llvm.add %3458, %3459 : i32 loc(#loc15)
    %3461 = llvm.mul %3457, %3352 : i32 loc(#loc15)
    %3462 = llvm.add %3460, %3461 : i32 loc(#loc15)
    %3463 = llvm.getelementptr inbounds %3221[%3462] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %3464 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %3465 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3466 = llvm.insertelement %3224, %3464[%3465 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %3466, %3463 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %3467 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3468 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3469 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3470 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3471 = llvm.mlir.constant(512 : i32) : i32 loc(#loc15)
    %3472 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3473 = llvm.and %3233, %3472 : i32 loc(#loc15)
    %3474 = llvm.icmp "eq" %3473, %3470 : i32 loc(#loc15)
    %3475 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3476 = llvm.select %3474, %3470, %3475 : i1, i32 loc(#loc15)
    %3477 = llvm.xor %3471, %3476 : i32 loc(#loc15)
    %3478 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3479 = llvm.and %3233, %3478 : i32 loc(#loc15)
    %3480 = llvm.icmp "eq" %3479, %3470 : i32 loc(#loc15)
    %3481 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3482 = llvm.select %3480, %3470, %3481 : i1, i32 loc(#loc15)
    %3483 = llvm.xor %3477, %3482 : i32 loc(#loc15)
    %3484 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3485 = llvm.and %3233, %3484 : i32 loc(#loc15)
    %3486 = llvm.icmp "eq" %3485, %3470 : i32 loc(#loc15)
    %3487 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3488 = llvm.select %3486, %3470, %3487 : i1, i32 loc(#loc15)
    %3489 = llvm.xor %3483, %3488 : i32 loc(#loc15)
    %3490 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3491 = llvm.and %3233, %3490 : i32 loc(#loc15)
    %3492 = llvm.icmp "eq" %3491, %3470 : i32 loc(#loc15)
    %3493 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3494 = llvm.select %3492, %3470, %3493 : i1, i32 loc(#loc15)
    %3495 = llvm.xor %3489, %3494 : i32 loc(#loc15)
    %3496 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3497 = llvm.and %3233, %3496 : i32 loc(#loc15)
    %3498 = llvm.icmp "eq" %3497, %3470 : i32 loc(#loc15)
    %3499 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3500 = llvm.select %3498, %3470, %3499 : i1, i32 loc(#loc15)
    %3501 = llvm.xor %3495, %3500 : i32 loc(#loc15)
    %3502 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3503 = llvm.and %3233, %3502 : i32 loc(#loc15)
    %3504 = llvm.icmp "eq" %3503, %3470 : i32 loc(#loc15)
    %3505 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3506 = llvm.select %3504, %3470, %3505 : i1, i32 loc(#loc15)
    %3507 = llvm.xor %3501, %3506 : i32 loc(#loc15)
    %3508 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3509 = llvm.and %3234, %3508 : i32 loc(#loc15)
    %3510 = llvm.icmp "eq" %3509, %3470 : i32 loc(#loc15)
    %3511 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3512 = llvm.select %3510, %3470, %3511 : i1, i32 loc(#loc15)
    %3513 = llvm.xor %3507, %3512 : i32 loc(#loc15)
    %3514 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3515 = llvm.and %3234, %3514 : i32 loc(#loc15)
    %3516 = llvm.icmp "eq" %3515, %3470 : i32 loc(#loc15)
    %3517 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3518 = llvm.select %3516, %3470, %3517 : i1, i32 loc(#loc15)
    %3519 = llvm.xor %3513, %3518 : i32 loc(#loc15)
    %3520 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3521 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3522 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3523 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3524 = llvm.and %3233, %3523 : i32 loc(#loc15)
    %3525 = llvm.icmp "eq" %3524, %3521 : i32 loc(#loc15)
    %3526 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3527 = llvm.select %3525, %3521, %3526 : i1, i32 loc(#loc15)
    %3528 = llvm.xor %3521, %3527 : i32 loc(#loc15)
    %3529 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3530 = llvm.and %3233, %3529 : i32 loc(#loc15)
    %3531 = llvm.icmp "eq" %3530, %3521 : i32 loc(#loc15)
    %3532 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3533 = llvm.select %3531, %3521, %3532 : i1, i32 loc(#loc15)
    %3534 = llvm.xor %3528, %3533 : i32 loc(#loc15)
    %3535 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3536 = llvm.and %3233, %3535 : i32 loc(#loc15)
    %3537 = llvm.icmp "eq" %3536, %3521 : i32 loc(#loc15)
    %3538 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3539 = llvm.select %3537, %3521, %3538 : i1, i32 loc(#loc15)
    %3540 = llvm.xor %3534, %3539 : i32 loc(#loc15)
    %3541 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3542 = llvm.and %3233, %3541 : i32 loc(#loc15)
    %3543 = llvm.icmp "eq" %3542, %3521 : i32 loc(#loc15)
    %3544 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3545 = llvm.select %3543, %3521, %3544 : i1, i32 loc(#loc15)
    %3546 = llvm.xor %3540, %3545 : i32 loc(#loc15)
    %3547 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3548 = llvm.and %3233, %3547 : i32 loc(#loc15)
    %3549 = llvm.icmp "eq" %3548, %3521 : i32 loc(#loc15)
    %3550 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3551 = llvm.select %3549, %3521, %3550 : i1, i32 loc(#loc15)
    %3552 = llvm.xor %3546, %3551 : i32 loc(#loc15)
    %3553 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3554 = llvm.and %3233, %3553 : i32 loc(#loc15)
    %3555 = llvm.icmp "eq" %3554, %3521 : i32 loc(#loc15)
    %3556 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3557 = llvm.select %3555, %3521, %3556 : i1, i32 loc(#loc15)
    %3558 = llvm.xor %3522, %3557 : i32 loc(#loc15)
    %3559 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3560 = llvm.and %3234, %3559 : i32 loc(#loc15)
    %3561 = llvm.icmp "eq" %3560, %3521 : i32 loc(#loc15)
    %3562 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3563 = llvm.select %3561, %3521, %3562 : i1, i32 loc(#loc15)
    %3564 = llvm.xor %3558, %3563 : i32 loc(#loc15)
    %3565 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3566 = llvm.and %3234, %3565 : i32 loc(#loc15)
    %3567 = llvm.icmp "eq" %3566, %3521 : i32 loc(#loc15)
    %3568 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3569 = llvm.select %3567, %3521, %3568 : i1, i32 loc(#loc15)
    %3570 = llvm.xor %3552, %3569 : i32 loc(#loc15)
    %3571 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3572 = llvm.select %3567, %3521, %3571 : i1, i32 loc(#loc15)
    %3573 = llvm.xor %3564, %3572 : i32 loc(#loc15)
    %3574 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3575 = llvm.mul %3570, %3468 : i32 loc(#loc15)
    %3576 = llvm.add %3574, %3575 : i32 loc(#loc15)
    %3577 = llvm.mul %3573, %3469 : i32 loc(#loc15)
    %3578 = llvm.add %3576, %3577 : i32 loc(#loc15)
    %3579 = llvm.getelementptr inbounds %3221[%3578] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %3580 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %3581 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3582 = llvm.insertelement %3225, %3580[%3581 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %3582, %3579 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %3583 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %3584 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3585 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3586 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3587 = llvm.mlir.constant(784 : i32) : i32 loc(#loc15)
    %3588 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3589 = llvm.and %3233, %3588 : i32 loc(#loc15)
    %3590 = llvm.icmp "eq" %3589, %3586 : i32 loc(#loc15)
    %3591 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3592 = llvm.select %3590, %3586, %3591 : i1, i32 loc(#loc15)
    %3593 = llvm.xor %3587, %3592 : i32 loc(#loc15)
    %3594 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3595 = llvm.and %3233, %3594 : i32 loc(#loc15)
    %3596 = llvm.icmp "eq" %3595, %3586 : i32 loc(#loc15)
    %3597 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3598 = llvm.select %3596, %3586, %3597 : i1, i32 loc(#loc15)
    %3599 = llvm.xor %3593, %3598 : i32 loc(#loc15)
    %3600 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3601 = llvm.and %3233, %3600 : i32 loc(#loc15)
    %3602 = llvm.icmp "eq" %3601, %3586 : i32 loc(#loc15)
    %3603 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3604 = llvm.select %3602, %3586, %3603 : i1, i32 loc(#loc15)
    %3605 = llvm.xor %3599, %3604 : i32 loc(#loc15)
    %3606 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3607 = llvm.and %3233, %3606 : i32 loc(#loc15)
    %3608 = llvm.icmp "eq" %3607, %3586 : i32 loc(#loc15)
    %3609 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3610 = llvm.select %3608, %3586, %3609 : i1, i32 loc(#loc15)
    %3611 = llvm.xor %3605, %3610 : i32 loc(#loc15)
    %3612 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3613 = llvm.and %3233, %3612 : i32 loc(#loc15)
    %3614 = llvm.icmp "eq" %3613, %3586 : i32 loc(#loc15)
    %3615 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3616 = llvm.select %3614, %3586, %3615 : i1, i32 loc(#loc15)
    %3617 = llvm.xor %3611, %3616 : i32 loc(#loc15)
    %3618 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3619 = llvm.and %3233, %3618 : i32 loc(#loc15)
    %3620 = llvm.icmp "eq" %3619, %3586 : i32 loc(#loc15)
    %3621 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3622 = llvm.select %3620, %3586, %3621 : i1, i32 loc(#loc15)
    %3623 = llvm.xor %3617, %3622 : i32 loc(#loc15)
    %3624 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3625 = llvm.and %3234, %3624 : i32 loc(#loc15)
    %3626 = llvm.icmp "eq" %3625, %3586 : i32 loc(#loc15)
    %3627 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3628 = llvm.select %3626, %3586, %3627 : i1, i32 loc(#loc15)
    %3629 = llvm.xor %3623, %3628 : i32 loc(#loc15)
    %3630 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3631 = llvm.and %3234, %3630 : i32 loc(#loc15)
    %3632 = llvm.icmp "eq" %3631, %3586 : i32 loc(#loc15)
    %3633 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3634 = llvm.select %3632, %3586, %3633 : i1, i32 loc(#loc15)
    %3635 = llvm.xor %3629, %3634 : i32 loc(#loc15)
    %3636 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3637 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3638 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3639 = llvm.mlir.constant(24 : i32) : i32 loc(#loc15)
    %3640 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3641 = llvm.and %3233, %3640 : i32 loc(#loc15)
    %3642 = llvm.icmp "eq" %3641, %3637 : i32 loc(#loc15)
    %3643 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3644 = llvm.select %3642, %3637, %3643 : i1, i32 loc(#loc15)
    %3645 = llvm.xor %3638, %3644 : i32 loc(#loc15)
    %3646 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3647 = llvm.and %3233, %3646 : i32 loc(#loc15)
    %3648 = llvm.icmp "eq" %3647, %3637 : i32 loc(#loc15)
    %3649 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3650 = llvm.select %3648, %3637, %3649 : i1, i32 loc(#loc15)
    %3651 = llvm.xor %3645, %3650 : i32 loc(#loc15)
    %3652 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3653 = llvm.and %3233, %3652 : i32 loc(#loc15)
    %3654 = llvm.icmp "eq" %3653, %3637 : i32 loc(#loc15)
    %3655 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3656 = llvm.select %3654, %3637, %3655 : i1, i32 loc(#loc15)
    %3657 = llvm.xor %3651, %3656 : i32 loc(#loc15)
    %3658 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3659 = llvm.and %3233, %3658 : i32 loc(#loc15)
    %3660 = llvm.icmp "eq" %3659, %3637 : i32 loc(#loc15)
    %3661 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3662 = llvm.select %3660, %3637, %3661 : i1, i32 loc(#loc15)
    %3663 = llvm.xor %3657, %3662 : i32 loc(#loc15)
    %3664 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3665 = llvm.and %3233, %3664 : i32 loc(#loc15)
    %3666 = llvm.icmp "eq" %3665, %3637 : i32 loc(#loc15)
    %3667 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3668 = llvm.select %3666, %3637, %3667 : i1, i32 loc(#loc15)
    %3669 = llvm.xor %3663, %3668 : i32 loc(#loc15)
    %3670 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3671 = llvm.and %3233, %3670 : i32 loc(#loc15)
    %3672 = llvm.icmp "eq" %3671, %3637 : i32 loc(#loc15)
    %3673 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3674 = llvm.select %3672, %3637, %3673 : i1, i32 loc(#loc15)
    %3675 = llvm.xor %3639, %3674 : i32 loc(#loc15)
    %3676 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3677 = llvm.and %3234, %3676 : i32 loc(#loc15)
    %3678 = llvm.icmp "eq" %3677, %3637 : i32 loc(#loc15)
    %3679 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3680 = llvm.select %3678, %3637, %3679 : i1, i32 loc(#loc15)
    %3681 = llvm.xor %3675, %3680 : i32 loc(#loc15)
    %3682 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3683 = llvm.and %3234, %3682 : i32 loc(#loc15)
    %3684 = llvm.icmp "eq" %3683, %3637 : i32 loc(#loc15)
    %3685 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3686 = llvm.select %3684, %3637, %3685 : i1, i32 loc(#loc15)
    %3687 = llvm.xor %3669, %3686 : i32 loc(#loc15)
    %3688 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3689 = llvm.select %3684, %3637, %3688 : i1, i32 loc(#loc15)
    %3690 = llvm.xor %3681, %3689 : i32 loc(#loc15)
    %3691 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3692 = llvm.mul %3687, %3584 : i32 loc(#loc15)
    %3693 = llvm.add %3691, %3692 : i32 loc(#loc15)
    %3694 = llvm.mul %3690, %3585 : i32 loc(#loc15)
    %3695 = llvm.add %3693, %3694 : i32 loc(#loc15)
    %3696 = llvm.getelementptr inbounds %3221[%3695] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %3697 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %3698 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3699 = llvm.insertelement %3226, %3697[%3698 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %3699, %3696 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %3700 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3701 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3702 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3703 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3704 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc15)
    %3705 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3706 = llvm.and %3233, %3705 : i32 loc(#loc15)
    %3707 = llvm.icmp "eq" %3706, %3703 : i32 loc(#loc15)
    %3708 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3709 = llvm.select %3707, %3703, %3708 : i1, i32 loc(#loc15)
    %3710 = llvm.xor %3704, %3709 : i32 loc(#loc15)
    %3711 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3712 = llvm.and %3233, %3711 : i32 loc(#loc15)
    %3713 = llvm.icmp "eq" %3712, %3703 : i32 loc(#loc15)
    %3714 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3715 = llvm.select %3713, %3703, %3714 : i1, i32 loc(#loc15)
    %3716 = llvm.xor %3710, %3715 : i32 loc(#loc15)
    %3717 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3718 = llvm.and %3233, %3717 : i32 loc(#loc15)
    %3719 = llvm.icmp "eq" %3718, %3703 : i32 loc(#loc15)
    %3720 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3721 = llvm.select %3719, %3703, %3720 : i1, i32 loc(#loc15)
    %3722 = llvm.xor %3716, %3721 : i32 loc(#loc15)
    %3723 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3724 = llvm.and %3233, %3723 : i32 loc(#loc15)
    %3725 = llvm.icmp "eq" %3724, %3703 : i32 loc(#loc15)
    %3726 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3727 = llvm.select %3725, %3703, %3726 : i1, i32 loc(#loc15)
    %3728 = llvm.xor %3722, %3727 : i32 loc(#loc15)
    %3729 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3730 = llvm.and %3233, %3729 : i32 loc(#loc15)
    %3731 = llvm.icmp "eq" %3730, %3703 : i32 loc(#loc15)
    %3732 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3733 = llvm.select %3731, %3703, %3732 : i1, i32 loc(#loc15)
    %3734 = llvm.xor %3728, %3733 : i32 loc(#loc15)
    %3735 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3736 = llvm.and %3233, %3735 : i32 loc(#loc15)
    %3737 = llvm.icmp "eq" %3736, %3703 : i32 loc(#loc15)
    %3738 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3739 = llvm.select %3737, %3703, %3738 : i1, i32 loc(#loc15)
    %3740 = llvm.xor %3734, %3739 : i32 loc(#loc15)
    %3741 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3742 = llvm.and %3234, %3741 : i32 loc(#loc15)
    %3743 = llvm.icmp "eq" %3742, %3703 : i32 loc(#loc15)
    %3744 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3745 = llvm.select %3743, %3703, %3744 : i1, i32 loc(#loc15)
    %3746 = llvm.xor %3740, %3745 : i32 loc(#loc15)
    %3747 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3748 = llvm.and %3234, %3747 : i32 loc(#loc15)
    %3749 = llvm.icmp "eq" %3748, %3703 : i32 loc(#loc15)
    %3750 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3751 = llvm.select %3749, %3703, %3750 : i1, i32 loc(#loc15)
    %3752 = llvm.xor %3746, %3751 : i32 loc(#loc15)
    %3753 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3754 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3755 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3756 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3757 = llvm.and %3233, %3756 : i32 loc(#loc15)
    %3758 = llvm.icmp "eq" %3757, %3754 : i32 loc(#loc15)
    %3759 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3760 = llvm.select %3758, %3754, %3759 : i1, i32 loc(#loc15)
    %3761 = llvm.xor %3754, %3760 : i32 loc(#loc15)
    %3762 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3763 = llvm.and %3233, %3762 : i32 loc(#loc15)
    %3764 = llvm.icmp "eq" %3763, %3754 : i32 loc(#loc15)
    %3765 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3766 = llvm.select %3764, %3754, %3765 : i1, i32 loc(#loc15)
    %3767 = llvm.xor %3761, %3766 : i32 loc(#loc15)
    %3768 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3769 = llvm.and %3233, %3768 : i32 loc(#loc15)
    %3770 = llvm.icmp "eq" %3769, %3754 : i32 loc(#loc15)
    %3771 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3772 = llvm.select %3770, %3754, %3771 : i1, i32 loc(#loc15)
    %3773 = llvm.xor %3767, %3772 : i32 loc(#loc15)
    %3774 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3775 = llvm.and %3233, %3774 : i32 loc(#loc15)
    %3776 = llvm.icmp "eq" %3775, %3754 : i32 loc(#loc15)
    %3777 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3778 = llvm.select %3776, %3754, %3777 : i1, i32 loc(#loc15)
    %3779 = llvm.xor %3773, %3778 : i32 loc(#loc15)
    %3780 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3781 = llvm.and %3233, %3780 : i32 loc(#loc15)
    %3782 = llvm.icmp "eq" %3781, %3754 : i32 loc(#loc15)
    %3783 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3784 = llvm.select %3782, %3754, %3783 : i1, i32 loc(#loc15)
    %3785 = llvm.xor %3779, %3784 : i32 loc(#loc15)
    %3786 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3787 = llvm.and %3233, %3786 : i32 loc(#loc15)
    %3788 = llvm.icmp "eq" %3787, %3754 : i32 loc(#loc15)
    %3789 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3790 = llvm.select %3788, %3754, %3789 : i1, i32 loc(#loc15)
    %3791 = llvm.xor %3755, %3790 : i32 loc(#loc15)
    %3792 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3793 = llvm.and %3234, %3792 : i32 loc(#loc15)
    %3794 = llvm.icmp "eq" %3793, %3754 : i32 loc(#loc15)
    %3795 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3796 = llvm.select %3794, %3754, %3795 : i1, i32 loc(#loc15)
    %3797 = llvm.xor %3791, %3796 : i32 loc(#loc15)
    %3798 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3799 = llvm.and %3234, %3798 : i32 loc(#loc15)
    %3800 = llvm.icmp "eq" %3799, %3754 : i32 loc(#loc15)
    %3801 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3802 = llvm.select %3800, %3754, %3801 : i1, i32 loc(#loc15)
    %3803 = llvm.xor %3785, %3802 : i32 loc(#loc15)
    %3804 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3805 = llvm.select %3800, %3754, %3804 : i1, i32 loc(#loc15)
    %3806 = llvm.xor %3797, %3805 : i32 loc(#loc15)
    %3807 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3808 = llvm.mul %3803, %3701 : i32 loc(#loc15)
    %3809 = llvm.add %3807, %3808 : i32 loc(#loc15)
    %3810 = llvm.mul %3806, %3702 : i32 loc(#loc15)
    %3811 = llvm.add %3809, %3810 : i32 loc(#loc15)
    %3812 = llvm.getelementptr inbounds %3221[%3811] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %3813 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %3814 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3815 = llvm.insertelement %3227, %3813[%3814 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %3815, %3812 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %3816 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %3817 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3818 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3819 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3820 = llvm.mlir.constant(1296 : i32) : i32 loc(#loc15)
    %3821 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3822 = llvm.and %3233, %3821 : i32 loc(#loc15)
    %3823 = llvm.icmp "eq" %3822, %3819 : i32 loc(#loc15)
    %3824 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3825 = llvm.select %3823, %3819, %3824 : i1, i32 loc(#loc15)
    %3826 = llvm.xor %3820, %3825 : i32 loc(#loc15)
    %3827 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3828 = llvm.and %3233, %3827 : i32 loc(#loc15)
    %3829 = llvm.icmp "eq" %3828, %3819 : i32 loc(#loc15)
    %3830 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3831 = llvm.select %3829, %3819, %3830 : i1, i32 loc(#loc15)
    %3832 = llvm.xor %3826, %3831 : i32 loc(#loc15)
    %3833 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3834 = llvm.and %3233, %3833 : i32 loc(#loc15)
    %3835 = llvm.icmp "eq" %3834, %3819 : i32 loc(#loc15)
    %3836 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3837 = llvm.select %3835, %3819, %3836 : i1, i32 loc(#loc15)
    %3838 = llvm.xor %3832, %3837 : i32 loc(#loc15)
    %3839 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3840 = llvm.and %3233, %3839 : i32 loc(#loc15)
    %3841 = llvm.icmp "eq" %3840, %3819 : i32 loc(#loc15)
    %3842 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3843 = llvm.select %3841, %3819, %3842 : i1, i32 loc(#loc15)
    %3844 = llvm.xor %3838, %3843 : i32 loc(#loc15)
    %3845 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3846 = llvm.and %3233, %3845 : i32 loc(#loc15)
    %3847 = llvm.icmp "eq" %3846, %3819 : i32 loc(#loc15)
    %3848 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3849 = llvm.select %3847, %3819, %3848 : i1, i32 loc(#loc15)
    %3850 = llvm.xor %3844, %3849 : i32 loc(#loc15)
    %3851 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3852 = llvm.and %3233, %3851 : i32 loc(#loc15)
    %3853 = llvm.icmp "eq" %3852, %3819 : i32 loc(#loc15)
    %3854 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3855 = llvm.select %3853, %3819, %3854 : i1, i32 loc(#loc15)
    %3856 = llvm.xor %3850, %3855 : i32 loc(#loc15)
    %3857 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3858 = llvm.and %3234, %3857 : i32 loc(#loc15)
    %3859 = llvm.icmp "eq" %3858, %3819 : i32 loc(#loc15)
    %3860 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3861 = llvm.select %3859, %3819, %3860 : i1, i32 loc(#loc15)
    %3862 = llvm.xor %3856, %3861 : i32 loc(#loc15)
    %3863 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3864 = llvm.and %3234, %3863 : i32 loc(#loc15)
    %3865 = llvm.icmp "eq" %3864, %3819 : i32 loc(#loc15)
    %3866 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3867 = llvm.select %3865, %3819, %3866 : i1, i32 loc(#loc15)
    %3868 = llvm.xor %3862, %3867 : i32 loc(#loc15)
    %3869 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3870 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3871 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3872 = llvm.mlir.constant(40 : i32) : i32 loc(#loc15)
    %3873 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3874 = llvm.and %3233, %3873 : i32 loc(#loc15)
    %3875 = llvm.icmp "eq" %3874, %3870 : i32 loc(#loc15)
    %3876 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3877 = llvm.select %3875, %3870, %3876 : i1, i32 loc(#loc15)
    %3878 = llvm.xor %3871, %3877 : i32 loc(#loc15)
    %3879 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3880 = llvm.and %3233, %3879 : i32 loc(#loc15)
    %3881 = llvm.icmp "eq" %3880, %3870 : i32 loc(#loc15)
    %3882 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3883 = llvm.select %3881, %3870, %3882 : i1, i32 loc(#loc15)
    %3884 = llvm.xor %3878, %3883 : i32 loc(#loc15)
    %3885 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3886 = llvm.and %3233, %3885 : i32 loc(#loc15)
    %3887 = llvm.icmp "eq" %3886, %3870 : i32 loc(#loc15)
    %3888 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3889 = llvm.select %3887, %3870, %3888 : i1, i32 loc(#loc15)
    %3890 = llvm.xor %3884, %3889 : i32 loc(#loc15)
    %3891 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3892 = llvm.and %3233, %3891 : i32 loc(#loc15)
    %3893 = llvm.icmp "eq" %3892, %3870 : i32 loc(#loc15)
    %3894 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3895 = llvm.select %3893, %3870, %3894 : i1, i32 loc(#loc15)
    %3896 = llvm.xor %3890, %3895 : i32 loc(#loc15)
    %3897 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3898 = llvm.and %3233, %3897 : i32 loc(#loc15)
    %3899 = llvm.icmp "eq" %3898, %3870 : i32 loc(#loc15)
    %3900 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3901 = llvm.select %3899, %3870, %3900 : i1, i32 loc(#loc15)
    %3902 = llvm.xor %3896, %3901 : i32 loc(#loc15)
    %3903 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3904 = llvm.and %3233, %3903 : i32 loc(#loc15)
    %3905 = llvm.icmp "eq" %3904, %3870 : i32 loc(#loc15)
    %3906 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3907 = llvm.select %3905, %3870, %3906 : i1, i32 loc(#loc15)
    %3908 = llvm.xor %3872, %3907 : i32 loc(#loc15)
    %3909 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3910 = llvm.and %3234, %3909 : i32 loc(#loc15)
    %3911 = llvm.icmp "eq" %3910, %3870 : i32 loc(#loc15)
    %3912 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3913 = llvm.select %3911, %3870, %3912 : i1, i32 loc(#loc15)
    %3914 = llvm.xor %3908, %3913 : i32 loc(#loc15)
    %3915 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3916 = llvm.and %3234, %3915 : i32 loc(#loc15)
    %3917 = llvm.icmp "eq" %3916, %3870 : i32 loc(#loc15)
    %3918 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3919 = llvm.select %3917, %3870, %3918 : i1, i32 loc(#loc15)
    %3920 = llvm.xor %3902, %3919 : i32 loc(#loc15)
    %3921 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3922 = llvm.select %3917, %3870, %3921 : i1, i32 loc(#loc15)
    %3923 = llvm.xor %3914, %3922 : i32 loc(#loc15)
    %3924 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3925 = llvm.mul %3920, %3817 : i32 loc(#loc15)
    %3926 = llvm.add %3924, %3925 : i32 loc(#loc15)
    %3927 = llvm.mul %3923, %3818 : i32 loc(#loc15)
    %3928 = llvm.add %3926, %3927 : i32 loc(#loc15)
    %3929 = llvm.getelementptr inbounds %3221[%3928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %3930 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %3931 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3932 = llvm.insertelement %3228, %3930[%3931 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %3932, %3929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %3933 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %3934 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3935 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3936 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3937 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc15)
    %3938 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3939 = llvm.and %3233, %3938 : i32 loc(#loc15)
    %3940 = llvm.icmp "eq" %3939, %3936 : i32 loc(#loc15)
    %3941 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3942 = llvm.select %3940, %3936, %3941 : i1, i32 loc(#loc15)
    %3943 = llvm.xor %3937, %3942 : i32 loc(#loc15)
    %3944 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3945 = llvm.and %3233, %3944 : i32 loc(#loc15)
    %3946 = llvm.icmp "eq" %3945, %3936 : i32 loc(#loc15)
    %3947 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3948 = llvm.select %3946, %3936, %3947 : i1, i32 loc(#loc15)
    %3949 = llvm.xor %3943, %3948 : i32 loc(#loc15)
    %3950 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3951 = llvm.and %3233, %3950 : i32 loc(#loc15)
    %3952 = llvm.icmp "eq" %3951, %3936 : i32 loc(#loc15)
    %3953 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %3954 = llvm.select %3952, %3936, %3953 : i1, i32 loc(#loc15)
    %3955 = llvm.xor %3949, %3954 : i32 loc(#loc15)
    %3956 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3957 = llvm.and %3233, %3956 : i32 loc(#loc15)
    %3958 = llvm.icmp "eq" %3957, %3936 : i32 loc(#loc15)
    %3959 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %3960 = llvm.select %3958, %3936, %3959 : i1, i32 loc(#loc15)
    %3961 = llvm.xor %3955, %3960 : i32 loc(#loc15)
    %3962 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3963 = llvm.and %3233, %3962 : i32 loc(#loc15)
    %3964 = llvm.icmp "eq" %3963, %3936 : i32 loc(#loc15)
    %3965 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %3966 = llvm.select %3964, %3936, %3965 : i1, i32 loc(#loc15)
    %3967 = llvm.xor %3961, %3966 : i32 loc(#loc15)
    %3968 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3969 = llvm.and %3233, %3968 : i32 loc(#loc15)
    %3970 = llvm.icmp "eq" %3969, %3936 : i32 loc(#loc15)
    %3971 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %3972 = llvm.select %3970, %3936, %3971 : i1, i32 loc(#loc15)
    %3973 = llvm.xor %3967, %3972 : i32 loc(#loc15)
    %3974 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3975 = llvm.and %3234, %3974 : i32 loc(#loc15)
    %3976 = llvm.icmp "eq" %3975, %3936 : i32 loc(#loc15)
    %3977 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %3978 = llvm.select %3976, %3936, %3977 : i1, i32 loc(#loc15)
    %3979 = llvm.xor %3973, %3978 : i32 loc(#loc15)
    %3980 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3981 = llvm.and %3234, %3980 : i32 loc(#loc15)
    %3982 = llvm.icmp "eq" %3981, %3936 : i32 loc(#loc15)
    %3983 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %3984 = llvm.select %3982, %3936, %3983 : i1, i32 loc(#loc15)
    %3985 = llvm.xor %3979, %3984 : i32 loc(#loc15)
    %3986 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3987 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %3988 = llvm.mlir.constant(48 : i32) : i32 loc(#loc15)
    %3989 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3990 = llvm.and %3233, %3989 : i32 loc(#loc15)
    %3991 = llvm.icmp "eq" %3990, %3987 : i32 loc(#loc15)
    %3992 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %3993 = llvm.select %3991, %3987, %3992 : i1, i32 loc(#loc15)
    %3994 = llvm.xor %3987, %3993 : i32 loc(#loc15)
    %3995 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3996 = llvm.and %3233, %3995 : i32 loc(#loc15)
    %3997 = llvm.icmp "eq" %3996, %3987 : i32 loc(#loc15)
    %3998 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %3999 = llvm.select %3997, %3987, %3998 : i1, i32 loc(#loc15)
    %4000 = llvm.xor %3994, %3999 : i32 loc(#loc15)
    %4001 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4002 = llvm.and %3233, %4001 : i32 loc(#loc15)
    %4003 = llvm.icmp "eq" %4002, %3987 : i32 loc(#loc15)
    %4004 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4005 = llvm.select %4003, %3987, %4004 : i1, i32 loc(#loc15)
    %4006 = llvm.xor %4000, %4005 : i32 loc(#loc15)
    %4007 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4008 = llvm.and %3233, %4007 : i32 loc(#loc15)
    %4009 = llvm.icmp "eq" %4008, %3987 : i32 loc(#loc15)
    %4010 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4011 = llvm.select %4009, %3987, %4010 : i1, i32 loc(#loc15)
    %4012 = llvm.xor %4006, %4011 : i32 loc(#loc15)
    %4013 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4014 = llvm.and %3233, %4013 : i32 loc(#loc15)
    %4015 = llvm.icmp "eq" %4014, %3987 : i32 loc(#loc15)
    %4016 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4017 = llvm.select %4015, %3987, %4016 : i1, i32 loc(#loc15)
    %4018 = llvm.xor %4012, %4017 : i32 loc(#loc15)
    %4019 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4020 = llvm.and %3233, %4019 : i32 loc(#loc15)
    %4021 = llvm.icmp "eq" %4020, %3987 : i32 loc(#loc15)
    %4022 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4023 = llvm.select %4021, %3987, %4022 : i1, i32 loc(#loc15)
    %4024 = llvm.xor %3988, %4023 : i32 loc(#loc15)
    %4025 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4026 = llvm.and %3234, %4025 : i32 loc(#loc15)
    %4027 = llvm.icmp "eq" %4026, %3987 : i32 loc(#loc15)
    %4028 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4029 = llvm.select %4027, %3987, %4028 : i1, i32 loc(#loc15)
    %4030 = llvm.xor %4024, %4029 : i32 loc(#loc15)
    %4031 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4032 = llvm.and %3234, %4031 : i32 loc(#loc15)
    %4033 = llvm.icmp "eq" %4032, %3987 : i32 loc(#loc15)
    %4034 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4035 = llvm.select %4033, %3987, %4034 : i1, i32 loc(#loc15)
    %4036 = llvm.xor %4018, %4035 : i32 loc(#loc15)
    %4037 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4038 = llvm.select %4033, %3987, %4037 : i1, i32 loc(#loc15)
    %4039 = llvm.xor %4030, %4038 : i32 loc(#loc15)
    %4040 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4041 = llvm.mul %4036, %3934 : i32 loc(#loc15)
    %4042 = llvm.add %4040, %4041 : i32 loc(#loc15)
    %4043 = llvm.mul %4039, %3935 : i32 loc(#loc15)
    %4044 = llvm.add %4042, %4043 : i32 loc(#loc15)
    %4045 = llvm.getelementptr inbounds %3221[%4044] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %4046 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %4047 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4048 = llvm.insertelement %3229, %4046[%4047 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %4048, %4045 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %4049 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %4050 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4051 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4052 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4053 = llvm.mlir.constant(1808 : i32) : i32 loc(#loc15)
    %4054 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4055 = llvm.and %3233, %4054 : i32 loc(#loc15)
    %4056 = llvm.icmp "eq" %4055, %4052 : i32 loc(#loc15)
    %4057 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4058 = llvm.select %4056, %4052, %4057 : i1, i32 loc(#loc15)
    %4059 = llvm.xor %4053, %4058 : i32 loc(#loc15)
    %4060 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4061 = llvm.and %3233, %4060 : i32 loc(#loc15)
    %4062 = llvm.icmp "eq" %4061, %4052 : i32 loc(#loc15)
    %4063 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4064 = llvm.select %4062, %4052, %4063 : i1, i32 loc(#loc15)
    %4065 = llvm.xor %4059, %4064 : i32 loc(#loc15)
    %4066 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4067 = llvm.and %3233, %4066 : i32 loc(#loc15)
    %4068 = llvm.icmp "eq" %4067, %4052 : i32 loc(#loc15)
    %4069 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4070 = llvm.select %4068, %4052, %4069 : i1, i32 loc(#loc15)
    %4071 = llvm.xor %4065, %4070 : i32 loc(#loc15)
    %4072 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4073 = llvm.and %3233, %4072 : i32 loc(#loc15)
    %4074 = llvm.icmp "eq" %4073, %4052 : i32 loc(#loc15)
    %4075 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4076 = llvm.select %4074, %4052, %4075 : i1, i32 loc(#loc15)
    %4077 = llvm.xor %4071, %4076 : i32 loc(#loc15)
    %4078 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4079 = llvm.and %3233, %4078 : i32 loc(#loc15)
    %4080 = llvm.icmp "eq" %4079, %4052 : i32 loc(#loc15)
    %4081 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4082 = llvm.select %4080, %4052, %4081 : i1, i32 loc(#loc15)
    %4083 = llvm.xor %4077, %4082 : i32 loc(#loc15)
    %4084 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4085 = llvm.and %3233, %4084 : i32 loc(#loc15)
    %4086 = llvm.icmp "eq" %4085, %4052 : i32 loc(#loc15)
    %4087 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4088 = llvm.select %4086, %4052, %4087 : i1, i32 loc(#loc15)
    %4089 = llvm.xor %4083, %4088 : i32 loc(#loc15)
    %4090 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4091 = llvm.and %3234, %4090 : i32 loc(#loc15)
    %4092 = llvm.icmp "eq" %4091, %4052 : i32 loc(#loc15)
    %4093 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %4094 = llvm.select %4092, %4052, %4093 : i1, i32 loc(#loc15)
    %4095 = llvm.xor %4089, %4094 : i32 loc(#loc15)
    %4096 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4097 = llvm.and %3234, %4096 : i32 loc(#loc15)
    %4098 = llvm.icmp "eq" %4097, %4052 : i32 loc(#loc15)
    %4099 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %4100 = llvm.select %4098, %4052, %4099 : i1, i32 loc(#loc15)
    %4101 = llvm.xor %4095, %4100 : i32 loc(#loc15)
    %4102 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4103 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4104 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4105 = llvm.mlir.constant(56 : i32) : i32 loc(#loc15)
    %4106 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4107 = llvm.and %3233, %4106 : i32 loc(#loc15)
    %4108 = llvm.icmp "eq" %4107, %4103 : i32 loc(#loc15)
    %4109 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4110 = llvm.select %4108, %4103, %4109 : i1, i32 loc(#loc15)
    %4111 = llvm.xor %4104, %4110 : i32 loc(#loc15)
    %4112 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4113 = llvm.and %3233, %4112 : i32 loc(#loc15)
    %4114 = llvm.icmp "eq" %4113, %4103 : i32 loc(#loc15)
    %4115 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4116 = llvm.select %4114, %4103, %4115 : i1, i32 loc(#loc15)
    %4117 = llvm.xor %4111, %4116 : i32 loc(#loc15)
    %4118 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4119 = llvm.and %3233, %4118 : i32 loc(#loc15)
    %4120 = llvm.icmp "eq" %4119, %4103 : i32 loc(#loc15)
    %4121 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4122 = llvm.select %4120, %4103, %4121 : i1, i32 loc(#loc15)
    %4123 = llvm.xor %4117, %4122 : i32 loc(#loc15)
    %4124 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4125 = llvm.and %3233, %4124 : i32 loc(#loc15)
    %4126 = llvm.icmp "eq" %4125, %4103 : i32 loc(#loc15)
    %4127 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4128 = llvm.select %4126, %4103, %4127 : i1, i32 loc(#loc15)
    %4129 = llvm.xor %4123, %4128 : i32 loc(#loc15)
    %4130 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4131 = llvm.and %3233, %4130 : i32 loc(#loc15)
    %4132 = llvm.icmp "eq" %4131, %4103 : i32 loc(#loc15)
    %4133 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4134 = llvm.select %4132, %4103, %4133 : i1, i32 loc(#loc15)
    %4135 = llvm.xor %4129, %4134 : i32 loc(#loc15)
    %4136 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4137 = llvm.and %3233, %4136 : i32 loc(#loc15)
    %4138 = llvm.icmp "eq" %4137, %4103 : i32 loc(#loc15)
    %4139 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4140 = llvm.select %4138, %4103, %4139 : i1, i32 loc(#loc15)
    %4141 = llvm.xor %4105, %4140 : i32 loc(#loc15)
    %4142 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4143 = llvm.and %3234, %4142 : i32 loc(#loc15)
    %4144 = llvm.icmp "eq" %4143, %4103 : i32 loc(#loc15)
    %4145 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4146 = llvm.select %4144, %4103, %4145 : i1, i32 loc(#loc15)
    %4147 = llvm.xor %4141, %4146 : i32 loc(#loc15)
    %4148 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4149 = llvm.and %3234, %4148 : i32 loc(#loc15)
    %4150 = llvm.icmp "eq" %4149, %4103 : i32 loc(#loc15)
    %4151 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4152 = llvm.select %4150, %4103, %4151 : i1, i32 loc(#loc15)
    %4153 = llvm.xor %4135, %4152 : i32 loc(#loc15)
    %4154 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4155 = llvm.select %4150, %4103, %4154 : i1, i32 loc(#loc15)
    %4156 = llvm.xor %4147, %4155 : i32 loc(#loc15)
    %4157 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4158 = llvm.mul %4153, %4050 : i32 loc(#loc15)
    %4159 = llvm.add %4157, %4158 : i32 loc(#loc15)
    %4160 = llvm.mul %4156, %4051 : i32 loc(#loc15)
    %4161 = llvm.add %4159, %4160 : i32 loc(#loc15)
    %4162 = llvm.getelementptr inbounds %3221[%4161] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %4163 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %4164 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4165 = llvm.insertelement %3230, %4163[%4164 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %4165, %4162 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %4166 = llvm.mlir.undef : !llvm.struct<(ptr<3>, i32, i32)> loc(#loc15)
    %4167 = llvm.insertvalue %3221, %4166[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %4168 = llvm.insertvalue %3222, %4167[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %4169 = llvm.insertvalue %3222, %4168[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    rocdl.barrier loc(#loc15)
    %4170 = llvm.extractvalue %4169[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %4171 = llvm.extractvalue %4169[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %4172 = llvm.extractvalue %4169[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %4173 = rocdl.workitem.id.x : i32 loc(#loc15)
    %4174 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %4175 = llvm.udiv %4173, %4174 : i32 loc(#loc15)
    %4176 = llvm.urem %4173, %4174 : i32 loc(#loc15)
    %4177 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4178 = llvm.urem %4175, %4177 : i32 loc(#loc15)
    %4179 = llvm.udiv %4175, %4177 : i32 loc(#loc15)
    %4180 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4181 = llvm.urem %4179, %4180 : i32 loc(#loc15)
    %4182 = llvm.udiv %4179, %4180 : i32 loc(#loc15)
    %4183 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4184 = llvm.urem %4181, %4183 : i32 loc(#loc15)
    %4185 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4186 = llvm.urem %4175, %4185 : i32 loc(#loc15)
    %4187 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4188 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4189 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4190 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4191 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4192 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %4193 = llvm.mul %4184, %4192 : i32 loc(#loc15)
    %4194 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4195 = llvm.urem %4176, %4191 : i32 loc(#loc15)
    %4196 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4197 = llvm.icmp "uge" %4176, %4190 : i32 loc(#loc15)
    %4198 = llvm.select %4197, %4196, %4189 : i1, i32 loc(#loc15)
    %4199 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4200 = llvm.add %4189, %4195 : i32 loc(#loc15)
    %4201 = llvm.add %4200, %4189 : i32 loc(#loc15)
    %4202 = llvm.add %4201, %4193 : i32 loc(#loc15)
    %4203 = llvm.add %4194, %4198 : i32 loc(#loc15)
    %4204 = llvm.add %4203, %4199 : i32 loc(#loc15)
    %4205 = llvm.add %4202, %4171 : i32 loc(#loc15)
    %4206 = llvm.add %4204, %4172 : i32 loc(#loc15)
    %4207 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %4208 = llvm.urem %4176, %4191 : i32 loc(#loc15)
    %4209 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4210 = llvm.icmp "uge" %4176, %4190 : i32 loc(#loc15)
    %4211 = llvm.select %4210, %4209, %4189 : i1, i32 loc(#loc15)
    %4212 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4213 = llvm.add %4189, %4208 : i32 loc(#loc15)
    %4214 = llvm.add %4213, %4189 : i32 loc(#loc15)
    %4215 = llvm.add %4214, %4193 : i32 loc(#loc15)
    %4216 = llvm.add %4207, %4211 : i32 loc(#loc15)
    %4217 = llvm.add %4216, %4212 : i32 loc(#loc15)
    %4218 = llvm.add %4215, %4171 : i32 loc(#loc15)
    %4219 = llvm.add %4217, %4172 : i32 loc(#loc15)
    %4220 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4221 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4222 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4223 = llvm.udiv %4205, %4221 : i32 loc(#loc15)
    %4224 = llvm.urem %4223, %4222 : i32 loc(#loc15)
    %4225 = llvm.udiv %4206, %4220 : i32 loc(#loc15)
    %4226 = llvm.xor %4225, %4224 : i32 loc(#loc15)
    %4227 = llvm.mul %4226, %4220 : i32 loc(#loc15)
    %4228 = llvm.urem %4206, %4220 : i32 loc(#loc15)
    %4229 = llvm.add %4227, %4228 : i32 loc(#loc15)
    %4230 = llvm.mul %4205, %4188 : i32 loc(#loc15)
    %4231 = llvm.mul %4229, %4187 : i32 loc(#loc15)
    %4232 = llvm.add %4230, %4231 : i32 loc(#loc15)
    %4233 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %4234 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4235 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4236 = llvm.udiv %4218, %4234 : i32 loc(#loc15)
    %4237 = llvm.urem %4236, %4235 : i32 loc(#loc15)
    %4238 = llvm.udiv %4219, %4233 : i32 loc(#loc15)
    %4239 = llvm.xor %4238, %4237 : i32 loc(#loc15)
    %4240 = llvm.mul %4239, %4233 : i32 loc(#loc15)
    %4241 = llvm.urem %4219, %4233 : i32 loc(#loc15)
    %4242 = llvm.add %4240, %4241 : i32 loc(#loc15)
    %4243 = llvm.mul %4218, %4188 : i32 loc(#loc15)
    %4244 = llvm.mul %4242, %4187 : i32 loc(#loc15)
    %4245 = llvm.add %4243, %4244 : i32 loc(#loc15)
    %4246 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4247 = llvm.mul %4246, %4188 : i32 loc(#loc15)
    %4248 = llvm.add %4247, %4232 : i32 loc(#loc15)
    %4249 = llvm.add %4247, %4245 : i32 loc(#loc15)
    %4250 = llvm.mul %4171, %4188 : i32 loc(#loc15)
    %4251 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4252 = llvm.sub %4251, %4250 : i32 loc(#loc15)
    %4253 = llvm.getelementptr %4170[%4252] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %4254 = llvm.mul %4172, %4187 : i32 loc(#loc15)
    %4255 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4256 = llvm.sub %4255, %4254 : i32 loc(#loc15)
    %4257 = llvm.getelementptr %4253[%4256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %4258 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4259 = llvm.add %4186, %4258 : i32 loc(#loc15)
    %4260 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc15)
    %4261 = llvm.mul %4260, %4259 : i32 loc(#loc15)
    %4262 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4263 = llvm.add %4248, %4261 : i32 loc(#loc15)
    %4264 = llvm.getelementptr %4257[%4263] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %4265 = llvm.load %4264 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc15)
    %4266 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4267 = llvm.extractelement %4265[%4266 : i32] : vector<8xbf16> loc(#loc15)
    %4268 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4269 = llvm.extractelement %4265[%4268 : i32] : vector<8xbf16> loc(#loc15)
    %4270 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4271 = llvm.extractelement %4265[%4270 : i32] : vector<8xbf16> loc(#loc15)
    %4272 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %4273 = llvm.extractelement %4265[%4272 : i32] : vector<8xbf16> loc(#loc15)
    %4274 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4275 = llvm.extractelement %4265[%4274 : i32] : vector<8xbf16> loc(#loc15)
    %4276 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %4277 = llvm.extractelement %4265[%4276 : i32] : vector<8xbf16> loc(#loc15)
    %4278 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %4279 = llvm.extractelement %4265[%4278 : i32] : vector<8xbf16> loc(#loc15)
    %4280 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %4281 = llvm.extractelement %4265[%4280 : i32] : vector<8xbf16> loc(#loc15)
    %4282 = llvm.add %4249, %4261 : i32 loc(#loc15)
    %4283 = llvm.getelementptr %4257[%4282] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %4284 = llvm.load %4283 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc15)
    %4285 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %4286 = llvm.extractelement %4284[%4285 : i32] : vector<8xbf16> loc(#loc15)
    %4287 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %4288 = llvm.extractelement %4284[%4287 : i32] : vector<8xbf16> loc(#loc15)
    %4289 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %4290 = llvm.extractelement %4284[%4289 : i32] : vector<8xbf16> loc(#loc15)
    %4291 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %4292 = llvm.extractelement %4284[%4291 : i32] : vector<8xbf16> loc(#loc15)
    %4293 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %4294 = llvm.extractelement %4284[%4293 : i32] : vector<8xbf16> loc(#loc15)
    %4295 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %4296 = llvm.extractelement %4284[%4295 : i32] : vector<8xbf16> loc(#loc15)
    %4297 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %4298 = llvm.extractelement %4284[%4297 : i32] : vector<8xbf16> loc(#loc15)
    %4299 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %4300 = llvm.extractelement %4284[%4299 : i32] : vector<8xbf16> loc(#loc15)
    %4301 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc15)
    %4302 = llvm.insertvalue %4267, %4301[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4303 = llvm.insertvalue %4269, %4302[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4304 = llvm.insertvalue %4271, %4303[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4305 = llvm.insertvalue %4273, %4304[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4306 = llvm.insertvalue %4275, %4305[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4307 = llvm.insertvalue %4277, %4306[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4308 = llvm.insertvalue %4279, %4307[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4309 = llvm.insertvalue %4281, %4308[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4310 = llvm.insertvalue %4286, %4309[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4311 = llvm.insertvalue %4288, %4310[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4312 = llvm.insertvalue %4290, %4311[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4313 = llvm.insertvalue %4292, %4312[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4314 = llvm.insertvalue %4294, %4313[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4315 = llvm.insertvalue %4296, %4314[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4316 = llvm.insertvalue %4298, %4315[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4317 = llvm.insertvalue %4300, %4316[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %4318 = llvm.extractvalue %4317[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4319 = llvm.extractvalue %4317[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4320 = llvm.extractvalue %4317[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4321 = llvm.extractvalue %4317[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4322 = llvm.extractvalue %4317[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4323 = llvm.extractvalue %4317[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4324 = llvm.extractvalue %4317[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4325 = llvm.extractvalue %4317[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4326 = llvm.extractvalue %4317[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4327 = llvm.extractvalue %4317[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4328 = llvm.extractvalue %4317[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4329 = llvm.extractvalue %4317[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4330 = llvm.extractvalue %4317[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4331 = llvm.extractvalue %4317[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4332 = llvm.extractvalue %4317[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4333 = llvm.extractvalue %4317[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4334 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4335 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4336 = llvm.insertelement %4318, %4334[%4335 : i32] : vector<8xbf16> loc(#loc27)
    %4337 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4338 = llvm.insertelement %4319, %4336[%4337 : i32] : vector<8xbf16> loc(#loc27)
    %4339 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4340 = llvm.insertelement %4320, %4338[%4339 : i32] : vector<8xbf16> loc(#loc27)
    %4341 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4342 = llvm.insertelement %4321, %4340[%4341 : i32] : vector<8xbf16> loc(#loc27)
    %4343 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4344 = llvm.insertelement %4322, %4342[%4343 : i32] : vector<8xbf16> loc(#loc27)
    %4345 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4346 = llvm.insertelement %4323, %4344[%4345 : i32] : vector<8xbf16> loc(#loc27)
    %4347 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4348 = llvm.insertelement %4324, %4346[%4347 : i32] : vector<8xbf16> loc(#loc27)
    %4349 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4350 = llvm.insertelement %4325, %4348[%4349 : i32] : vector<8xbf16> loc(#loc27)
    %4351 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4352 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4353 = llvm.extractelement %4350[%4352 : i32] : vector<8xbf16> loc(#loc27)
    %4354 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4355 = llvm.insertelement %4353, %4351[%4354 : i32] : vector<8xbf16> loc(#loc27)
    %4356 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4357 = llvm.extractelement %4350[%4356 : i32] : vector<8xbf16> loc(#loc27)
    %4358 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4359 = llvm.insertelement %4357, %4355[%4358 : i32] : vector<8xbf16> loc(#loc27)
    %4360 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4361 = llvm.extractelement %4350[%4360 : i32] : vector<8xbf16> loc(#loc27)
    %4362 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4363 = llvm.insertelement %4361, %4359[%4362 : i32] : vector<8xbf16> loc(#loc27)
    %4364 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4365 = llvm.extractelement %4350[%4364 : i32] : vector<8xbf16> loc(#loc27)
    %4366 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4367 = llvm.insertelement %4365, %4363[%4366 : i32] : vector<8xbf16> loc(#loc27)
    %4368 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4369 = llvm.extractelement %4350[%4368 : i32] : vector<8xbf16> loc(#loc27)
    %4370 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4371 = llvm.insertelement %4369, %4367[%4370 : i32] : vector<8xbf16> loc(#loc27)
    %4372 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4373 = llvm.extractelement %4350[%4372 : i32] : vector<8xbf16> loc(#loc27)
    %4374 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4375 = llvm.insertelement %4373, %4371[%4374 : i32] : vector<8xbf16> loc(#loc27)
    %4376 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4377 = llvm.extractelement %4350[%4376 : i32] : vector<8xbf16> loc(#loc27)
    %4378 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4379 = llvm.insertelement %4377, %4375[%4378 : i32] : vector<8xbf16> loc(#loc27)
    %4380 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4381 = llvm.extractelement %4350[%4380 : i32] : vector<8xbf16> loc(#loc27)
    %4382 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4383 = llvm.insertelement %4381, %4379[%4382 : i32] : vector<8xbf16> loc(#loc27)
    %4384 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4385 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4386 = llvm.insertelement %4326, %4384[%4385 : i32] : vector<8xbf16> loc(#loc27)
    %4387 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4388 = llvm.insertelement %4327, %4386[%4387 : i32] : vector<8xbf16> loc(#loc27)
    %4389 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4390 = llvm.insertelement %4328, %4388[%4389 : i32] : vector<8xbf16> loc(#loc27)
    %4391 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4392 = llvm.insertelement %4329, %4390[%4391 : i32] : vector<8xbf16> loc(#loc27)
    %4393 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4394 = llvm.insertelement %4330, %4392[%4393 : i32] : vector<8xbf16> loc(#loc27)
    %4395 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4396 = llvm.insertelement %4331, %4394[%4395 : i32] : vector<8xbf16> loc(#loc27)
    %4397 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4398 = llvm.insertelement %4332, %4396[%4397 : i32] : vector<8xbf16> loc(#loc27)
    %4399 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4400 = llvm.insertelement %4333, %4398[%4399 : i32] : vector<8xbf16> loc(#loc27)
    %4401 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4402 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4403 = llvm.extractelement %4400[%4402 : i32] : vector<8xbf16> loc(#loc27)
    %4404 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4405 = llvm.insertelement %4403, %4401[%4404 : i32] : vector<8xbf16> loc(#loc27)
    %4406 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4407 = llvm.extractelement %4400[%4406 : i32] : vector<8xbf16> loc(#loc27)
    %4408 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4409 = llvm.insertelement %4407, %4405[%4408 : i32] : vector<8xbf16> loc(#loc27)
    %4410 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4411 = llvm.extractelement %4400[%4410 : i32] : vector<8xbf16> loc(#loc27)
    %4412 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4413 = llvm.insertelement %4411, %4409[%4412 : i32] : vector<8xbf16> loc(#loc27)
    %4414 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4415 = llvm.extractelement %4400[%4414 : i32] : vector<8xbf16> loc(#loc27)
    %4416 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4417 = llvm.insertelement %4415, %4413[%4416 : i32] : vector<8xbf16> loc(#loc27)
    %4418 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4419 = llvm.extractelement %4400[%4418 : i32] : vector<8xbf16> loc(#loc27)
    %4420 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4421 = llvm.insertelement %4419, %4417[%4420 : i32] : vector<8xbf16> loc(#loc27)
    %4422 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4423 = llvm.extractelement %4400[%4422 : i32] : vector<8xbf16> loc(#loc27)
    %4424 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4425 = llvm.insertelement %4423, %4421[%4424 : i32] : vector<8xbf16> loc(#loc27)
    %4426 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4427 = llvm.extractelement %4400[%4426 : i32] : vector<8xbf16> loc(#loc27)
    %4428 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4429 = llvm.insertelement %4427, %4425[%4428 : i32] : vector<8xbf16> loc(#loc27)
    %4430 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4431 = llvm.extractelement %4400[%4430 : i32] : vector<8xbf16> loc(#loc27)
    %4432 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4433 = llvm.insertelement %4431, %4429[%4432 : i32] : vector<8xbf16> loc(#loc27)
    %4434 = llvm.extractvalue %3218[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4435 = llvm.extractvalue %3218[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4436 = llvm.extractvalue %3218[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4437 = llvm.extractvalue %3218[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4438 = llvm.extractvalue %3218[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4439 = llvm.extractvalue %3218[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4440 = llvm.extractvalue %3218[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4441 = llvm.extractvalue %3218[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4442 = llvm.extractvalue %3218[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4443 = llvm.extractvalue %3218[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4444 = llvm.extractvalue %3218[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4445 = llvm.extractvalue %3218[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4446 = llvm.extractvalue %3218[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4447 = llvm.extractvalue %3218[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4448 = llvm.extractvalue %3218[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4449 = llvm.extractvalue %3218[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %4450 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4451 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4452 = llvm.insertelement %4434, %4450[%4451 : i32] : vector<8xbf16> loc(#loc27)
    %4453 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4454 = llvm.insertelement %4435, %4452[%4453 : i32] : vector<8xbf16> loc(#loc27)
    %4455 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4456 = llvm.insertelement %4436, %4454[%4455 : i32] : vector<8xbf16> loc(#loc27)
    %4457 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4458 = llvm.insertelement %4437, %4456[%4457 : i32] : vector<8xbf16> loc(#loc27)
    %4459 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4460 = llvm.insertelement %4438, %4458[%4459 : i32] : vector<8xbf16> loc(#loc27)
    %4461 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4462 = llvm.insertelement %4439, %4460[%4461 : i32] : vector<8xbf16> loc(#loc27)
    %4463 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4464 = llvm.insertelement %4440, %4462[%4463 : i32] : vector<8xbf16> loc(#loc27)
    %4465 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4466 = llvm.insertelement %4441, %4464[%4465 : i32] : vector<8xbf16> loc(#loc27)
    %4467 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4468 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4469 = llvm.extractelement %4466[%4468 : i32] : vector<8xbf16> loc(#loc27)
    %4470 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4471 = llvm.insertelement %4469, %4467[%4470 : i32] : vector<8xbf16> loc(#loc27)
    %4472 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4473 = llvm.extractelement %4466[%4472 : i32] : vector<8xbf16> loc(#loc27)
    %4474 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4475 = llvm.insertelement %4473, %4471[%4474 : i32] : vector<8xbf16> loc(#loc27)
    %4476 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4477 = llvm.extractelement %4466[%4476 : i32] : vector<8xbf16> loc(#loc27)
    %4478 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4479 = llvm.insertelement %4477, %4475[%4478 : i32] : vector<8xbf16> loc(#loc27)
    %4480 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4481 = llvm.extractelement %4466[%4480 : i32] : vector<8xbf16> loc(#loc27)
    %4482 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4483 = llvm.insertelement %4481, %4479[%4482 : i32] : vector<8xbf16> loc(#loc27)
    %4484 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4485 = llvm.extractelement %4466[%4484 : i32] : vector<8xbf16> loc(#loc27)
    %4486 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4487 = llvm.insertelement %4485, %4483[%4486 : i32] : vector<8xbf16> loc(#loc27)
    %4488 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4489 = llvm.extractelement %4466[%4488 : i32] : vector<8xbf16> loc(#loc27)
    %4490 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4491 = llvm.insertelement %4489, %4487[%4490 : i32] : vector<8xbf16> loc(#loc27)
    %4492 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4493 = llvm.extractelement %4466[%4492 : i32] : vector<8xbf16> loc(#loc27)
    %4494 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4495 = llvm.insertelement %4493, %4491[%4494 : i32] : vector<8xbf16> loc(#loc27)
    %4496 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4497 = llvm.extractelement %4466[%4496 : i32] : vector<8xbf16> loc(#loc27)
    %4498 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4499 = llvm.insertelement %4497, %4495[%4498 : i32] : vector<8xbf16> loc(#loc27)
    %4500 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4501 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4502 = llvm.insertelement %4442, %4500[%4501 : i32] : vector<8xbf16> loc(#loc27)
    %4503 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4504 = llvm.insertelement %4443, %4502[%4503 : i32] : vector<8xbf16> loc(#loc27)
    %4505 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4506 = llvm.insertelement %4444, %4504[%4505 : i32] : vector<8xbf16> loc(#loc27)
    %4507 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4508 = llvm.insertelement %4445, %4506[%4507 : i32] : vector<8xbf16> loc(#loc27)
    %4509 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4510 = llvm.insertelement %4446, %4508[%4509 : i32] : vector<8xbf16> loc(#loc27)
    %4511 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4512 = llvm.insertelement %4447, %4510[%4511 : i32] : vector<8xbf16> loc(#loc27)
    %4513 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4514 = llvm.insertelement %4448, %4512[%4513 : i32] : vector<8xbf16> loc(#loc27)
    %4515 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4516 = llvm.insertelement %4449, %4514[%4515 : i32] : vector<8xbf16> loc(#loc27)
    %4517 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %4518 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4519 = llvm.extractelement %4516[%4518 : i32] : vector<8xbf16> loc(#loc27)
    %4520 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4521 = llvm.insertelement %4519, %4517[%4520 : i32] : vector<8xbf16> loc(#loc27)
    %4522 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4523 = llvm.extractelement %4516[%4522 : i32] : vector<8xbf16> loc(#loc27)
    %4524 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4525 = llvm.insertelement %4523, %4521[%4524 : i32] : vector<8xbf16> loc(#loc27)
    %4526 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4527 = llvm.extractelement %4516[%4526 : i32] : vector<8xbf16> loc(#loc27)
    %4528 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4529 = llvm.insertelement %4527, %4525[%4528 : i32] : vector<8xbf16> loc(#loc27)
    %4530 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4531 = llvm.extractelement %4516[%4530 : i32] : vector<8xbf16> loc(#loc27)
    %4532 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4533 = llvm.insertelement %4531, %4529[%4532 : i32] : vector<8xbf16> loc(#loc27)
    %4534 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4535 = llvm.extractelement %4516[%4534 : i32] : vector<8xbf16> loc(#loc27)
    %4536 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4537 = llvm.insertelement %4535, %4533[%4536 : i32] : vector<8xbf16> loc(#loc27)
    %4538 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4539 = llvm.extractelement %4516[%4538 : i32] : vector<8xbf16> loc(#loc27)
    %4540 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4541 = llvm.insertelement %4539, %4537[%4540 : i32] : vector<8xbf16> loc(#loc27)
    %4542 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4543 = llvm.extractelement %4516[%4542 : i32] : vector<8xbf16> loc(#loc27)
    %4544 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4545 = llvm.insertelement %4543, %4541[%4544 : i32] : vector<8xbf16> loc(#loc27)
    %4546 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4547 = llvm.extractelement %4516[%4546 : i32] : vector<8xbf16> loc(#loc27)
    %4548 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4549 = llvm.insertelement %4547, %4545[%4548 : i32] : vector<8xbf16> loc(#loc27)
    %4550 = llvm.extractvalue %1751[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4551 = llvm.extractvalue %1751[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4552 = llvm.extractvalue %1751[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4553 = llvm.extractvalue %1751[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4554 = llvm.extractvalue %1751[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4555 = llvm.extractvalue %1751[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4556 = llvm.extractvalue %1751[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4557 = llvm.extractvalue %1751[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4558 = llvm.extractvalue %1751[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4559 = llvm.extractvalue %1751[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4560 = llvm.extractvalue %1751[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4561 = llvm.extractvalue %1751[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4562 = llvm.extractvalue %1751[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4563 = llvm.extractvalue %1751[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4564 = llvm.extractvalue %1751[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4565 = llvm.extractvalue %1751[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4566 = llvm.mlir.undef : vector<16xf32> loc(#loc27)
    %4567 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4568 = llvm.insertelement %4550, %4566[%4567 : i32] : vector<16xf32> loc(#loc27)
    %4569 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4570 = llvm.insertelement %4551, %4568[%4569 : i32] : vector<16xf32> loc(#loc27)
    %4571 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4572 = llvm.insertelement %4552, %4570[%4571 : i32] : vector<16xf32> loc(#loc27)
    %4573 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4574 = llvm.insertelement %4553, %4572[%4573 : i32] : vector<16xf32> loc(#loc27)
    %4575 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4576 = llvm.insertelement %4554, %4574[%4575 : i32] : vector<16xf32> loc(#loc27)
    %4577 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4578 = llvm.insertelement %4555, %4576[%4577 : i32] : vector<16xf32> loc(#loc27)
    %4579 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4580 = llvm.insertelement %4556, %4578[%4579 : i32] : vector<16xf32> loc(#loc27)
    %4581 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4582 = llvm.insertelement %4557, %4580[%4581 : i32] : vector<16xf32> loc(#loc27)
    %4583 = llvm.mlir.constant(8 : i32) : i32 loc(#loc27)
    %4584 = llvm.insertelement %4558, %4582[%4583 : i32] : vector<16xf32> loc(#loc27)
    %4585 = llvm.mlir.constant(9 : i32) : i32 loc(#loc27)
    %4586 = llvm.insertelement %4559, %4584[%4585 : i32] : vector<16xf32> loc(#loc27)
    %4587 = llvm.mlir.constant(10 : i32) : i32 loc(#loc27)
    %4588 = llvm.insertelement %4560, %4586[%4587 : i32] : vector<16xf32> loc(#loc27)
    %4589 = llvm.mlir.constant(11 : i32) : i32 loc(#loc27)
    %4590 = llvm.insertelement %4561, %4588[%4589 : i32] : vector<16xf32> loc(#loc27)
    %4591 = llvm.mlir.constant(12 : i32) : i32 loc(#loc27)
    %4592 = llvm.insertelement %4562, %4590[%4591 : i32] : vector<16xf32> loc(#loc27)
    %4593 = llvm.mlir.constant(13 : i32) : i32 loc(#loc27)
    %4594 = llvm.insertelement %4563, %4592[%4593 : i32] : vector<16xf32> loc(#loc27)
    %4595 = llvm.mlir.constant(14 : i32) : i32 loc(#loc27)
    %4596 = llvm.insertelement %4564, %4594[%4595 : i32] : vector<16xf32> loc(#loc27)
    %4597 = llvm.mlir.constant(15 : i32) : i32 loc(#loc27)
    %4598 = llvm.insertelement %4565, %4596[%4597 : i32] : vector<16xf32> loc(#loc27)
    %4599 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4600 = rocdl.mfma.f32.32x32x16.bf16 %4499, %4383, %4598, %4599, %4599, %4599 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc27)
    %4601 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4602 = rocdl.mfma.f32.32x32x16.bf16 %4549, %4433, %4600, %4601, %4601, %4601 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc27)
    %4603 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %4604 = llvm.extractelement %4602[%4603 : i32] : vector<16xf32> loc(#loc27)
    %4605 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %4606 = llvm.extractelement %4602[%4605 : i32] : vector<16xf32> loc(#loc27)
    %4607 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %4608 = llvm.extractelement %4602[%4607 : i32] : vector<16xf32> loc(#loc27)
    %4609 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %4610 = llvm.extractelement %4602[%4609 : i32] : vector<16xf32> loc(#loc27)
    %4611 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %4612 = llvm.extractelement %4602[%4611 : i32] : vector<16xf32> loc(#loc27)
    %4613 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %4614 = llvm.extractelement %4602[%4613 : i32] : vector<16xf32> loc(#loc27)
    %4615 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %4616 = llvm.extractelement %4602[%4615 : i32] : vector<16xf32> loc(#loc27)
    %4617 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %4618 = llvm.extractelement %4602[%4617 : i32] : vector<16xf32> loc(#loc27)
    %4619 = llvm.mlir.constant(8 : i32) : i32 loc(#loc27)
    %4620 = llvm.extractelement %4602[%4619 : i32] : vector<16xf32> loc(#loc27)
    %4621 = llvm.mlir.constant(9 : i32) : i32 loc(#loc27)
    %4622 = llvm.extractelement %4602[%4621 : i32] : vector<16xf32> loc(#loc27)
    %4623 = llvm.mlir.constant(10 : i32) : i32 loc(#loc27)
    %4624 = llvm.extractelement %4602[%4623 : i32] : vector<16xf32> loc(#loc27)
    %4625 = llvm.mlir.constant(11 : i32) : i32 loc(#loc27)
    %4626 = llvm.extractelement %4602[%4625 : i32] : vector<16xf32> loc(#loc27)
    %4627 = llvm.mlir.constant(12 : i32) : i32 loc(#loc27)
    %4628 = llvm.extractelement %4602[%4627 : i32] : vector<16xf32> loc(#loc27)
    %4629 = llvm.mlir.constant(13 : i32) : i32 loc(#loc27)
    %4630 = llvm.extractelement %4602[%4629 : i32] : vector<16xf32> loc(#loc27)
    %4631 = llvm.mlir.constant(14 : i32) : i32 loc(#loc27)
    %4632 = llvm.extractelement %4602[%4631 : i32] : vector<16xf32> loc(#loc27)
    %4633 = llvm.mlir.constant(15 : i32) : i32 loc(#loc27)
    %4634 = llvm.extractelement %4602[%4633 : i32] : vector<16xf32> loc(#loc27)
    %4635 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc27)
    %4636 = llvm.insertvalue %4604, %4635[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4637 = llvm.insertvalue %4606, %4636[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4638 = llvm.insertvalue %4608, %4637[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4639 = llvm.insertvalue %4610, %4638[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4640 = llvm.insertvalue %4612, %4639[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4641 = llvm.insertvalue %4614, %4640[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4642 = llvm.insertvalue %4616, %4641[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4643 = llvm.insertvalue %4618, %4642[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4644 = llvm.insertvalue %4620, %4643[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4645 = llvm.insertvalue %4622, %4644[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4646 = llvm.insertvalue %4624, %4645[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4647 = llvm.insertvalue %4626, %4646[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4648 = llvm.insertvalue %4628, %4647[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4649 = llvm.insertvalue %4630, %4648[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4650 = llvm.insertvalue %4632, %4649[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4651 = llvm.insertvalue %4634, %4650[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %4652 = builtin.unrealized_conversion_cast %4651 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x64xf32, #mma> loc(#loc27)
    %4653 = builtin.unrealized_conversion_cast %4652 : tensor<64x64xf32, #mma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %4654 = llvm.add %1750, %24 : i32 loc(#loc2)
    llvm.br ^bb1(%4654, %4653, %1753, %2119, %1755, %1951 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc2)
  ^bb3:  // pred: ^bb1
    %4655 = llvm.add %arg5, %23 : i32 loc(#loc2)
    %4656 = llvm.sdiv %4655, %24 : i32 loc(#loc2)
    %4657 = llvm.icmp "sge" %4656, %21 : i32 loc(#loc2)
    %4658 = llvm.icmp "sge" %4656, %22 : i32 loc(#loc2)
    rocdl.barrier loc(#loc26)
    %4659 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4660 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %4661 = llvm.getelementptr %4660[%4659] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc26)
    %4662 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4663 = llvm.extractvalue %1752[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4664 = llvm.extractvalue %1752[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4665 = llvm.extractvalue %1752[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4666 = llvm.extractvalue %1752[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4667 = llvm.extractvalue %1752[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4668 = llvm.extractvalue %1752[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4669 = llvm.extractvalue %1752[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4670 = llvm.extractvalue %1752[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %4671 = rocdl.workitem.id.x : i32 loc(#loc26)
    %4672 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %4673 = llvm.urem %4671, %4672 : i32 loc(#loc26)
    %4674 = llvm.udiv %4671, %4672 : i32 loc(#loc26)
    %4675 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4676 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4677 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4678 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4679 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4680 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4681 = llvm.and %4673, %4680 : i32 loc(#loc26)
    %4682 = llvm.icmp "eq" %4681, %4679 : i32 loc(#loc26)
    %4683 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4684 = llvm.select %4682, %4679, %4683 : i1, i32 loc(#loc26)
    %4685 = llvm.xor %4679, %4684 : i32 loc(#loc26)
    %4686 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4687 = llvm.and %4673, %4686 : i32 loc(#loc26)
    %4688 = llvm.icmp "eq" %4687, %4679 : i32 loc(#loc26)
    %4689 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4690 = llvm.select %4688, %4679, %4689 : i1, i32 loc(#loc26)
    %4691 = llvm.xor %4685, %4690 : i32 loc(#loc26)
    %4692 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4693 = llvm.and %4673, %4692 : i32 loc(#loc26)
    %4694 = llvm.icmp "eq" %4693, %4679 : i32 loc(#loc26)
    %4695 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4696 = llvm.select %4694, %4679, %4695 : i1, i32 loc(#loc26)
    %4697 = llvm.xor %4691, %4696 : i32 loc(#loc26)
    %4698 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4699 = llvm.and %4673, %4698 : i32 loc(#loc26)
    %4700 = llvm.icmp "eq" %4699, %4679 : i32 loc(#loc26)
    %4701 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4702 = llvm.select %4700, %4679, %4701 : i1, i32 loc(#loc26)
    %4703 = llvm.xor %4697, %4702 : i32 loc(#loc26)
    %4704 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4705 = llvm.and %4673, %4704 : i32 loc(#loc26)
    %4706 = llvm.icmp "eq" %4705, %4679 : i32 loc(#loc26)
    %4707 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4708 = llvm.select %4706, %4679, %4707 : i1, i32 loc(#loc26)
    %4709 = llvm.xor %4703, %4708 : i32 loc(#loc26)
    %4710 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4711 = llvm.and %4673, %4710 : i32 loc(#loc26)
    %4712 = llvm.icmp "eq" %4711, %4679 : i32 loc(#loc26)
    %4713 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4714 = llvm.select %4712, %4679, %4713 : i1, i32 loc(#loc26)
    %4715 = llvm.xor %4709, %4714 : i32 loc(#loc26)
    %4716 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4717 = llvm.and %4674, %4716 : i32 loc(#loc26)
    %4718 = llvm.icmp "eq" %4717, %4679 : i32 loc(#loc26)
    %4719 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %4720 = llvm.select %4718, %4679, %4719 : i1, i32 loc(#loc26)
    %4721 = llvm.xor %4715, %4720 : i32 loc(#loc26)
    %4722 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4723 = llvm.and %4674, %4722 : i32 loc(#loc26)
    %4724 = llvm.icmp "eq" %4723, %4679 : i32 loc(#loc26)
    %4725 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %4726 = llvm.select %4724, %4679, %4725 : i1, i32 loc(#loc26)
    %4727 = llvm.xor %4721, %4726 : i32 loc(#loc26)
    %4728 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4729 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4730 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4731 = llvm.and %4673, %4730 : i32 loc(#loc26)
    %4732 = llvm.icmp "eq" %4731, %4729 : i32 loc(#loc26)
    %4733 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4734 = llvm.select %4732, %4729, %4733 : i1, i32 loc(#loc26)
    %4735 = llvm.xor %4729, %4734 : i32 loc(#loc26)
    %4736 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4737 = llvm.and %4673, %4736 : i32 loc(#loc26)
    %4738 = llvm.icmp "eq" %4737, %4729 : i32 loc(#loc26)
    %4739 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4740 = llvm.select %4738, %4729, %4739 : i1, i32 loc(#loc26)
    %4741 = llvm.xor %4735, %4740 : i32 loc(#loc26)
    %4742 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4743 = llvm.and %4673, %4742 : i32 loc(#loc26)
    %4744 = llvm.icmp "eq" %4743, %4729 : i32 loc(#loc26)
    %4745 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4746 = llvm.select %4744, %4729, %4745 : i1, i32 loc(#loc26)
    %4747 = llvm.xor %4741, %4746 : i32 loc(#loc26)
    %4748 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4749 = llvm.and %4673, %4748 : i32 loc(#loc26)
    %4750 = llvm.icmp "eq" %4749, %4729 : i32 loc(#loc26)
    %4751 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4752 = llvm.select %4750, %4729, %4751 : i1, i32 loc(#loc26)
    %4753 = llvm.xor %4747, %4752 : i32 loc(#loc26)
    %4754 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4755 = llvm.and %4673, %4754 : i32 loc(#loc26)
    %4756 = llvm.icmp "eq" %4755, %4729 : i32 loc(#loc26)
    %4757 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4758 = llvm.select %4756, %4729, %4757 : i1, i32 loc(#loc26)
    %4759 = llvm.xor %4753, %4758 : i32 loc(#loc26)
    %4760 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4761 = llvm.and %4673, %4760 : i32 loc(#loc26)
    %4762 = llvm.icmp "eq" %4761, %4729 : i32 loc(#loc26)
    %4763 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4764 = llvm.select %4762, %4729, %4763 : i1, i32 loc(#loc26)
    %4765 = llvm.xor %4729, %4764 : i32 loc(#loc26)
    %4766 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4767 = llvm.and %4674, %4766 : i32 loc(#loc26)
    %4768 = llvm.icmp "eq" %4767, %4729 : i32 loc(#loc26)
    %4769 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4770 = llvm.select %4768, %4729, %4769 : i1, i32 loc(#loc26)
    %4771 = llvm.xor %4765, %4770 : i32 loc(#loc26)
    %4772 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4773 = llvm.and %4674, %4772 : i32 loc(#loc26)
    %4774 = llvm.icmp "eq" %4773, %4729 : i32 loc(#loc26)
    %4775 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4776 = llvm.select %4774, %4729, %4775 : i1, i32 loc(#loc26)
    %4777 = llvm.xor %4759, %4776 : i32 loc(#loc26)
    %4778 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4779 = llvm.select %4774, %4729, %4778 : i1, i32 loc(#loc26)
    %4780 = llvm.xor %4771, %4779 : i32 loc(#loc26)
    %4781 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4782 = llvm.mul %4777, %4677 : i32 loc(#loc26)
    %4783 = llvm.add %4781, %4782 : i32 loc(#loc26)
    %4784 = llvm.mul %4780, %4678 : i32 loc(#loc26)
    %4785 = llvm.add %4783, %4784 : i32 loc(#loc26)
    %4786 = llvm.getelementptr inbounds %4661[%4785] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %4787 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %4788 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4789 = llvm.insertelement %4663, %4787[%4788 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %4789, %4786 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %4790 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4791 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4792 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4793 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4794 = llvm.mlir.constant(272 : i32) : i32 loc(#loc26)
    %4795 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4796 = llvm.and %4673, %4795 : i32 loc(#loc26)
    %4797 = llvm.icmp "eq" %4796, %4793 : i32 loc(#loc26)
    %4798 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4799 = llvm.select %4797, %4793, %4798 : i1, i32 loc(#loc26)
    %4800 = llvm.xor %4794, %4799 : i32 loc(#loc26)
    %4801 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4802 = llvm.and %4673, %4801 : i32 loc(#loc26)
    %4803 = llvm.icmp "eq" %4802, %4793 : i32 loc(#loc26)
    %4804 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4805 = llvm.select %4803, %4793, %4804 : i1, i32 loc(#loc26)
    %4806 = llvm.xor %4800, %4805 : i32 loc(#loc26)
    %4807 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4808 = llvm.and %4673, %4807 : i32 loc(#loc26)
    %4809 = llvm.icmp "eq" %4808, %4793 : i32 loc(#loc26)
    %4810 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4811 = llvm.select %4809, %4793, %4810 : i1, i32 loc(#loc26)
    %4812 = llvm.xor %4806, %4811 : i32 loc(#loc26)
    %4813 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4814 = llvm.and %4673, %4813 : i32 loc(#loc26)
    %4815 = llvm.icmp "eq" %4814, %4793 : i32 loc(#loc26)
    %4816 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4817 = llvm.select %4815, %4793, %4816 : i1, i32 loc(#loc26)
    %4818 = llvm.xor %4812, %4817 : i32 loc(#loc26)
    %4819 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4820 = llvm.and %4673, %4819 : i32 loc(#loc26)
    %4821 = llvm.icmp "eq" %4820, %4793 : i32 loc(#loc26)
    %4822 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4823 = llvm.select %4821, %4793, %4822 : i1, i32 loc(#loc26)
    %4824 = llvm.xor %4818, %4823 : i32 loc(#loc26)
    %4825 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4826 = llvm.and %4673, %4825 : i32 loc(#loc26)
    %4827 = llvm.icmp "eq" %4826, %4793 : i32 loc(#loc26)
    %4828 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4829 = llvm.select %4827, %4793, %4828 : i1, i32 loc(#loc26)
    %4830 = llvm.xor %4824, %4829 : i32 loc(#loc26)
    %4831 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4832 = llvm.and %4674, %4831 : i32 loc(#loc26)
    %4833 = llvm.icmp "eq" %4832, %4793 : i32 loc(#loc26)
    %4834 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %4835 = llvm.select %4833, %4793, %4834 : i1, i32 loc(#loc26)
    %4836 = llvm.xor %4830, %4835 : i32 loc(#loc26)
    %4837 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4838 = llvm.and %4674, %4837 : i32 loc(#loc26)
    %4839 = llvm.icmp "eq" %4838, %4793 : i32 loc(#loc26)
    %4840 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %4841 = llvm.select %4839, %4793, %4840 : i1, i32 loc(#loc26)
    %4842 = llvm.xor %4836, %4841 : i32 loc(#loc26)
    %4843 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4844 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4845 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4846 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4847 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4848 = llvm.and %4673, %4847 : i32 loc(#loc26)
    %4849 = llvm.icmp "eq" %4848, %4844 : i32 loc(#loc26)
    %4850 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4851 = llvm.select %4849, %4844, %4850 : i1, i32 loc(#loc26)
    %4852 = llvm.xor %4845, %4851 : i32 loc(#loc26)
    %4853 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4854 = llvm.and %4673, %4853 : i32 loc(#loc26)
    %4855 = llvm.icmp "eq" %4854, %4844 : i32 loc(#loc26)
    %4856 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4857 = llvm.select %4855, %4844, %4856 : i1, i32 loc(#loc26)
    %4858 = llvm.xor %4852, %4857 : i32 loc(#loc26)
    %4859 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4860 = llvm.and %4673, %4859 : i32 loc(#loc26)
    %4861 = llvm.icmp "eq" %4860, %4844 : i32 loc(#loc26)
    %4862 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4863 = llvm.select %4861, %4844, %4862 : i1, i32 loc(#loc26)
    %4864 = llvm.xor %4858, %4863 : i32 loc(#loc26)
    %4865 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4866 = llvm.and %4673, %4865 : i32 loc(#loc26)
    %4867 = llvm.icmp "eq" %4866, %4844 : i32 loc(#loc26)
    %4868 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4869 = llvm.select %4867, %4844, %4868 : i1, i32 loc(#loc26)
    %4870 = llvm.xor %4864, %4869 : i32 loc(#loc26)
    %4871 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4872 = llvm.and %4673, %4871 : i32 loc(#loc26)
    %4873 = llvm.icmp "eq" %4872, %4844 : i32 loc(#loc26)
    %4874 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4875 = llvm.select %4873, %4844, %4874 : i1, i32 loc(#loc26)
    %4876 = llvm.xor %4870, %4875 : i32 loc(#loc26)
    %4877 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4878 = llvm.and %4673, %4877 : i32 loc(#loc26)
    %4879 = llvm.icmp "eq" %4878, %4844 : i32 loc(#loc26)
    %4880 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4881 = llvm.select %4879, %4844, %4880 : i1, i32 loc(#loc26)
    %4882 = llvm.xor %4846, %4881 : i32 loc(#loc26)
    %4883 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4884 = llvm.and %4674, %4883 : i32 loc(#loc26)
    %4885 = llvm.icmp "eq" %4884, %4844 : i32 loc(#loc26)
    %4886 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4887 = llvm.select %4885, %4844, %4886 : i1, i32 loc(#loc26)
    %4888 = llvm.xor %4882, %4887 : i32 loc(#loc26)
    %4889 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4890 = llvm.and %4674, %4889 : i32 loc(#loc26)
    %4891 = llvm.icmp "eq" %4890, %4844 : i32 loc(#loc26)
    %4892 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4893 = llvm.select %4891, %4844, %4892 : i1, i32 loc(#loc26)
    %4894 = llvm.xor %4876, %4893 : i32 loc(#loc26)
    %4895 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4896 = llvm.select %4891, %4844, %4895 : i1, i32 loc(#loc26)
    %4897 = llvm.xor %4888, %4896 : i32 loc(#loc26)
    %4898 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4899 = llvm.mul %4894, %4791 : i32 loc(#loc26)
    %4900 = llvm.add %4898, %4899 : i32 loc(#loc26)
    %4901 = llvm.mul %4897, %4792 : i32 loc(#loc26)
    %4902 = llvm.add %4900, %4901 : i32 loc(#loc26)
    %4903 = llvm.getelementptr inbounds %4661[%4902] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %4904 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %4905 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4906 = llvm.insertelement %4664, %4904[%4905 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %4906, %4903 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %4907 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4908 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4909 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4910 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4911 = llvm.mlir.constant(512 : i32) : i32 loc(#loc26)
    %4912 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4913 = llvm.and %4673, %4912 : i32 loc(#loc26)
    %4914 = llvm.icmp "eq" %4913, %4910 : i32 loc(#loc26)
    %4915 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4916 = llvm.select %4914, %4910, %4915 : i1, i32 loc(#loc26)
    %4917 = llvm.xor %4911, %4916 : i32 loc(#loc26)
    %4918 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4919 = llvm.and %4673, %4918 : i32 loc(#loc26)
    %4920 = llvm.icmp "eq" %4919, %4910 : i32 loc(#loc26)
    %4921 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4922 = llvm.select %4920, %4910, %4921 : i1, i32 loc(#loc26)
    %4923 = llvm.xor %4917, %4922 : i32 loc(#loc26)
    %4924 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4925 = llvm.and %4673, %4924 : i32 loc(#loc26)
    %4926 = llvm.icmp "eq" %4925, %4910 : i32 loc(#loc26)
    %4927 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4928 = llvm.select %4926, %4910, %4927 : i1, i32 loc(#loc26)
    %4929 = llvm.xor %4923, %4928 : i32 loc(#loc26)
    %4930 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4931 = llvm.and %4673, %4930 : i32 loc(#loc26)
    %4932 = llvm.icmp "eq" %4931, %4910 : i32 loc(#loc26)
    %4933 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4934 = llvm.select %4932, %4910, %4933 : i1, i32 loc(#loc26)
    %4935 = llvm.xor %4929, %4934 : i32 loc(#loc26)
    %4936 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4937 = llvm.and %4673, %4936 : i32 loc(#loc26)
    %4938 = llvm.icmp "eq" %4937, %4910 : i32 loc(#loc26)
    %4939 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4940 = llvm.select %4938, %4910, %4939 : i1, i32 loc(#loc26)
    %4941 = llvm.xor %4935, %4940 : i32 loc(#loc26)
    %4942 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4943 = llvm.and %4673, %4942 : i32 loc(#loc26)
    %4944 = llvm.icmp "eq" %4943, %4910 : i32 loc(#loc26)
    %4945 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4946 = llvm.select %4944, %4910, %4945 : i1, i32 loc(#loc26)
    %4947 = llvm.xor %4941, %4946 : i32 loc(#loc26)
    %4948 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4949 = llvm.and %4674, %4948 : i32 loc(#loc26)
    %4950 = llvm.icmp "eq" %4949, %4910 : i32 loc(#loc26)
    %4951 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %4952 = llvm.select %4950, %4910, %4951 : i1, i32 loc(#loc26)
    %4953 = llvm.xor %4947, %4952 : i32 loc(#loc26)
    %4954 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4955 = llvm.and %4674, %4954 : i32 loc(#loc26)
    %4956 = llvm.icmp "eq" %4955, %4910 : i32 loc(#loc26)
    %4957 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %4958 = llvm.select %4956, %4910, %4957 : i1, i32 loc(#loc26)
    %4959 = llvm.xor %4953, %4958 : i32 loc(#loc26)
    %4960 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4961 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %4962 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4963 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4964 = llvm.and %4673, %4963 : i32 loc(#loc26)
    %4965 = llvm.icmp "eq" %4964, %4961 : i32 loc(#loc26)
    %4966 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4967 = llvm.select %4965, %4961, %4966 : i1, i32 loc(#loc26)
    %4968 = llvm.xor %4961, %4967 : i32 loc(#loc26)
    %4969 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4970 = llvm.and %4673, %4969 : i32 loc(#loc26)
    %4971 = llvm.icmp "eq" %4970, %4961 : i32 loc(#loc26)
    %4972 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %4973 = llvm.select %4971, %4961, %4972 : i1, i32 loc(#loc26)
    %4974 = llvm.xor %4968, %4973 : i32 loc(#loc26)
    %4975 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4976 = llvm.and %4673, %4975 : i32 loc(#loc26)
    %4977 = llvm.icmp "eq" %4976, %4961 : i32 loc(#loc26)
    %4978 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %4979 = llvm.select %4977, %4961, %4978 : i1, i32 loc(#loc26)
    %4980 = llvm.xor %4974, %4979 : i32 loc(#loc26)
    %4981 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4982 = llvm.and %4673, %4981 : i32 loc(#loc26)
    %4983 = llvm.icmp "eq" %4982, %4961 : i32 loc(#loc26)
    %4984 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %4985 = llvm.select %4983, %4961, %4984 : i1, i32 loc(#loc26)
    %4986 = llvm.xor %4980, %4985 : i32 loc(#loc26)
    %4987 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4988 = llvm.and %4673, %4987 : i32 loc(#loc26)
    %4989 = llvm.icmp "eq" %4988, %4961 : i32 loc(#loc26)
    %4990 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %4991 = llvm.select %4989, %4961, %4990 : i1, i32 loc(#loc26)
    %4992 = llvm.xor %4986, %4991 : i32 loc(#loc26)
    %4993 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %4994 = llvm.and %4673, %4993 : i32 loc(#loc26)
    %4995 = llvm.icmp "eq" %4994, %4961 : i32 loc(#loc26)
    %4996 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %4997 = llvm.select %4995, %4961, %4996 : i1, i32 loc(#loc26)
    %4998 = llvm.xor %4962, %4997 : i32 loc(#loc26)
    %4999 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5000 = llvm.and %4674, %4999 : i32 loc(#loc26)
    %5001 = llvm.icmp "eq" %5000, %4961 : i32 loc(#loc26)
    %5002 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5003 = llvm.select %5001, %4961, %5002 : i1, i32 loc(#loc26)
    %5004 = llvm.xor %4998, %5003 : i32 loc(#loc26)
    %5005 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5006 = llvm.and %4674, %5005 : i32 loc(#loc26)
    %5007 = llvm.icmp "eq" %5006, %4961 : i32 loc(#loc26)
    %5008 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5009 = llvm.select %5007, %4961, %5008 : i1, i32 loc(#loc26)
    %5010 = llvm.xor %4992, %5009 : i32 loc(#loc26)
    %5011 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5012 = llvm.select %5007, %4961, %5011 : i1, i32 loc(#loc26)
    %5013 = llvm.xor %5004, %5012 : i32 loc(#loc26)
    %5014 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5015 = llvm.mul %5010, %4908 : i32 loc(#loc26)
    %5016 = llvm.add %5014, %5015 : i32 loc(#loc26)
    %5017 = llvm.mul %5013, %4909 : i32 loc(#loc26)
    %5018 = llvm.add %5016, %5017 : i32 loc(#loc26)
    %5019 = llvm.getelementptr inbounds %4661[%5018] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5020 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %5021 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5022 = llvm.insertelement %4665, %5020[%5021 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %5022, %5019 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %5023 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %5024 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5025 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5026 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5027 = llvm.mlir.constant(784 : i32) : i32 loc(#loc26)
    %5028 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5029 = llvm.and %4673, %5028 : i32 loc(#loc26)
    %5030 = llvm.icmp "eq" %5029, %5026 : i32 loc(#loc26)
    %5031 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5032 = llvm.select %5030, %5026, %5031 : i1, i32 loc(#loc26)
    %5033 = llvm.xor %5027, %5032 : i32 loc(#loc26)
    %5034 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5035 = llvm.and %4673, %5034 : i32 loc(#loc26)
    %5036 = llvm.icmp "eq" %5035, %5026 : i32 loc(#loc26)
    %5037 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5038 = llvm.select %5036, %5026, %5037 : i1, i32 loc(#loc26)
    %5039 = llvm.xor %5033, %5038 : i32 loc(#loc26)
    %5040 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5041 = llvm.and %4673, %5040 : i32 loc(#loc26)
    %5042 = llvm.icmp "eq" %5041, %5026 : i32 loc(#loc26)
    %5043 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5044 = llvm.select %5042, %5026, %5043 : i1, i32 loc(#loc26)
    %5045 = llvm.xor %5039, %5044 : i32 loc(#loc26)
    %5046 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5047 = llvm.and %4673, %5046 : i32 loc(#loc26)
    %5048 = llvm.icmp "eq" %5047, %5026 : i32 loc(#loc26)
    %5049 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5050 = llvm.select %5048, %5026, %5049 : i1, i32 loc(#loc26)
    %5051 = llvm.xor %5045, %5050 : i32 loc(#loc26)
    %5052 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5053 = llvm.and %4673, %5052 : i32 loc(#loc26)
    %5054 = llvm.icmp "eq" %5053, %5026 : i32 loc(#loc26)
    %5055 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5056 = llvm.select %5054, %5026, %5055 : i1, i32 loc(#loc26)
    %5057 = llvm.xor %5051, %5056 : i32 loc(#loc26)
    %5058 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5059 = llvm.and %4673, %5058 : i32 loc(#loc26)
    %5060 = llvm.icmp "eq" %5059, %5026 : i32 loc(#loc26)
    %5061 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5062 = llvm.select %5060, %5026, %5061 : i1, i32 loc(#loc26)
    %5063 = llvm.xor %5057, %5062 : i32 loc(#loc26)
    %5064 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5065 = llvm.and %4674, %5064 : i32 loc(#loc26)
    %5066 = llvm.icmp "eq" %5065, %5026 : i32 loc(#loc26)
    %5067 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %5068 = llvm.select %5066, %5026, %5067 : i1, i32 loc(#loc26)
    %5069 = llvm.xor %5063, %5068 : i32 loc(#loc26)
    %5070 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5071 = llvm.and %4674, %5070 : i32 loc(#loc26)
    %5072 = llvm.icmp "eq" %5071, %5026 : i32 loc(#loc26)
    %5073 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %5074 = llvm.select %5072, %5026, %5073 : i1, i32 loc(#loc26)
    %5075 = llvm.xor %5069, %5074 : i32 loc(#loc26)
    %5076 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5077 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5078 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5079 = llvm.mlir.constant(24 : i32) : i32 loc(#loc26)
    %5080 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5081 = llvm.and %4673, %5080 : i32 loc(#loc26)
    %5082 = llvm.icmp "eq" %5081, %5077 : i32 loc(#loc26)
    %5083 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5084 = llvm.select %5082, %5077, %5083 : i1, i32 loc(#loc26)
    %5085 = llvm.xor %5078, %5084 : i32 loc(#loc26)
    %5086 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5087 = llvm.and %4673, %5086 : i32 loc(#loc26)
    %5088 = llvm.icmp "eq" %5087, %5077 : i32 loc(#loc26)
    %5089 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5090 = llvm.select %5088, %5077, %5089 : i1, i32 loc(#loc26)
    %5091 = llvm.xor %5085, %5090 : i32 loc(#loc26)
    %5092 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5093 = llvm.and %4673, %5092 : i32 loc(#loc26)
    %5094 = llvm.icmp "eq" %5093, %5077 : i32 loc(#loc26)
    %5095 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5096 = llvm.select %5094, %5077, %5095 : i1, i32 loc(#loc26)
    %5097 = llvm.xor %5091, %5096 : i32 loc(#loc26)
    %5098 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5099 = llvm.and %4673, %5098 : i32 loc(#loc26)
    %5100 = llvm.icmp "eq" %5099, %5077 : i32 loc(#loc26)
    %5101 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5102 = llvm.select %5100, %5077, %5101 : i1, i32 loc(#loc26)
    %5103 = llvm.xor %5097, %5102 : i32 loc(#loc26)
    %5104 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5105 = llvm.and %4673, %5104 : i32 loc(#loc26)
    %5106 = llvm.icmp "eq" %5105, %5077 : i32 loc(#loc26)
    %5107 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5108 = llvm.select %5106, %5077, %5107 : i1, i32 loc(#loc26)
    %5109 = llvm.xor %5103, %5108 : i32 loc(#loc26)
    %5110 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5111 = llvm.and %4673, %5110 : i32 loc(#loc26)
    %5112 = llvm.icmp "eq" %5111, %5077 : i32 loc(#loc26)
    %5113 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5114 = llvm.select %5112, %5077, %5113 : i1, i32 loc(#loc26)
    %5115 = llvm.xor %5079, %5114 : i32 loc(#loc26)
    %5116 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5117 = llvm.and %4674, %5116 : i32 loc(#loc26)
    %5118 = llvm.icmp "eq" %5117, %5077 : i32 loc(#loc26)
    %5119 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5120 = llvm.select %5118, %5077, %5119 : i1, i32 loc(#loc26)
    %5121 = llvm.xor %5115, %5120 : i32 loc(#loc26)
    %5122 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5123 = llvm.and %4674, %5122 : i32 loc(#loc26)
    %5124 = llvm.icmp "eq" %5123, %5077 : i32 loc(#loc26)
    %5125 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5126 = llvm.select %5124, %5077, %5125 : i1, i32 loc(#loc26)
    %5127 = llvm.xor %5109, %5126 : i32 loc(#loc26)
    %5128 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5129 = llvm.select %5124, %5077, %5128 : i1, i32 loc(#loc26)
    %5130 = llvm.xor %5121, %5129 : i32 loc(#loc26)
    %5131 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5132 = llvm.mul %5127, %5024 : i32 loc(#loc26)
    %5133 = llvm.add %5131, %5132 : i32 loc(#loc26)
    %5134 = llvm.mul %5130, %5025 : i32 loc(#loc26)
    %5135 = llvm.add %5133, %5134 : i32 loc(#loc26)
    %5136 = llvm.getelementptr inbounds %4661[%5135] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5137 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %5138 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5139 = llvm.insertelement %4666, %5137[%5138 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %5139, %5136 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %5140 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5141 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5142 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5143 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5144 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc26)
    %5145 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5146 = llvm.and %4673, %5145 : i32 loc(#loc26)
    %5147 = llvm.icmp "eq" %5146, %5143 : i32 loc(#loc26)
    %5148 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5149 = llvm.select %5147, %5143, %5148 : i1, i32 loc(#loc26)
    %5150 = llvm.xor %5144, %5149 : i32 loc(#loc26)
    %5151 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5152 = llvm.and %4673, %5151 : i32 loc(#loc26)
    %5153 = llvm.icmp "eq" %5152, %5143 : i32 loc(#loc26)
    %5154 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5155 = llvm.select %5153, %5143, %5154 : i1, i32 loc(#loc26)
    %5156 = llvm.xor %5150, %5155 : i32 loc(#loc26)
    %5157 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5158 = llvm.and %4673, %5157 : i32 loc(#loc26)
    %5159 = llvm.icmp "eq" %5158, %5143 : i32 loc(#loc26)
    %5160 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5161 = llvm.select %5159, %5143, %5160 : i1, i32 loc(#loc26)
    %5162 = llvm.xor %5156, %5161 : i32 loc(#loc26)
    %5163 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5164 = llvm.and %4673, %5163 : i32 loc(#loc26)
    %5165 = llvm.icmp "eq" %5164, %5143 : i32 loc(#loc26)
    %5166 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5167 = llvm.select %5165, %5143, %5166 : i1, i32 loc(#loc26)
    %5168 = llvm.xor %5162, %5167 : i32 loc(#loc26)
    %5169 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5170 = llvm.and %4673, %5169 : i32 loc(#loc26)
    %5171 = llvm.icmp "eq" %5170, %5143 : i32 loc(#loc26)
    %5172 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5173 = llvm.select %5171, %5143, %5172 : i1, i32 loc(#loc26)
    %5174 = llvm.xor %5168, %5173 : i32 loc(#loc26)
    %5175 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5176 = llvm.and %4673, %5175 : i32 loc(#loc26)
    %5177 = llvm.icmp "eq" %5176, %5143 : i32 loc(#loc26)
    %5178 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5179 = llvm.select %5177, %5143, %5178 : i1, i32 loc(#loc26)
    %5180 = llvm.xor %5174, %5179 : i32 loc(#loc26)
    %5181 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5182 = llvm.and %4674, %5181 : i32 loc(#loc26)
    %5183 = llvm.icmp "eq" %5182, %5143 : i32 loc(#loc26)
    %5184 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %5185 = llvm.select %5183, %5143, %5184 : i1, i32 loc(#loc26)
    %5186 = llvm.xor %5180, %5185 : i32 loc(#loc26)
    %5187 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5188 = llvm.and %4674, %5187 : i32 loc(#loc26)
    %5189 = llvm.icmp "eq" %5188, %5143 : i32 loc(#loc26)
    %5190 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %5191 = llvm.select %5189, %5143, %5190 : i1, i32 loc(#loc26)
    %5192 = llvm.xor %5186, %5191 : i32 loc(#loc26)
    %5193 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5194 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5195 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5196 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5197 = llvm.and %4673, %5196 : i32 loc(#loc26)
    %5198 = llvm.icmp "eq" %5197, %5194 : i32 loc(#loc26)
    %5199 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5200 = llvm.select %5198, %5194, %5199 : i1, i32 loc(#loc26)
    %5201 = llvm.xor %5194, %5200 : i32 loc(#loc26)
    %5202 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5203 = llvm.and %4673, %5202 : i32 loc(#loc26)
    %5204 = llvm.icmp "eq" %5203, %5194 : i32 loc(#loc26)
    %5205 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5206 = llvm.select %5204, %5194, %5205 : i1, i32 loc(#loc26)
    %5207 = llvm.xor %5201, %5206 : i32 loc(#loc26)
    %5208 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5209 = llvm.and %4673, %5208 : i32 loc(#loc26)
    %5210 = llvm.icmp "eq" %5209, %5194 : i32 loc(#loc26)
    %5211 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5212 = llvm.select %5210, %5194, %5211 : i1, i32 loc(#loc26)
    %5213 = llvm.xor %5207, %5212 : i32 loc(#loc26)
    %5214 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5215 = llvm.and %4673, %5214 : i32 loc(#loc26)
    %5216 = llvm.icmp "eq" %5215, %5194 : i32 loc(#loc26)
    %5217 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5218 = llvm.select %5216, %5194, %5217 : i1, i32 loc(#loc26)
    %5219 = llvm.xor %5213, %5218 : i32 loc(#loc26)
    %5220 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5221 = llvm.and %4673, %5220 : i32 loc(#loc26)
    %5222 = llvm.icmp "eq" %5221, %5194 : i32 loc(#loc26)
    %5223 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5224 = llvm.select %5222, %5194, %5223 : i1, i32 loc(#loc26)
    %5225 = llvm.xor %5219, %5224 : i32 loc(#loc26)
    %5226 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5227 = llvm.and %4673, %5226 : i32 loc(#loc26)
    %5228 = llvm.icmp "eq" %5227, %5194 : i32 loc(#loc26)
    %5229 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5230 = llvm.select %5228, %5194, %5229 : i1, i32 loc(#loc26)
    %5231 = llvm.xor %5195, %5230 : i32 loc(#loc26)
    %5232 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5233 = llvm.and %4674, %5232 : i32 loc(#loc26)
    %5234 = llvm.icmp "eq" %5233, %5194 : i32 loc(#loc26)
    %5235 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5236 = llvm.select %5234, %5194, %5235 : i1, i32 loc(#loc26)
    %5237 = llvm.xor %5231, %5236 : i32 loc(#loc26)
    %5238 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5239 = llvm.and %4674, %5238 : i32 loc(#loc26)
    %5240 = llvm.icmp "eq" %5239, %5194 : i32 loc(#loc26)
    %5241 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5242 = llvm.select %5240, %5194, %5241 : i1, i32 loc(#loc26)
    %5243 = llvm.xor %5225, %5242 : i32 loc(#loc26)
    %5244 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5245 = llvm.select %5240, %5194, %5244 : i1, i32 loc(#loc26)
    %5246 = llvm.xor %5237, %5245 : i32 loc(#loc26)
    %5247 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5248 = llvm.mul %5243, %5141 : i32 loc(#loc26)
    %5249 = llvm.add %5247, %5248 : i32 loc(#loc26)
    %5250 = llvm.mul %5246, %5142 : i32 loc(#loc26)
    %5251 = llvm.add %5249, %5250 : i32 loc(#loc26)
    %5252 = llvm.getelementptr inbounds %4661[%5251] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5253 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %5254 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5255 = llvm.insertelement %4667, %5253[%5254 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %5255, %5252 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %5256 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %5257 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5258 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5259 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5260 = llvm.mlir.constant(1296 : i32) : i32 loc(#loc26)
    %5261 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5262 = llvm.and %4673, %5261 : i32 loc(#loc26)
    %5263 = llvm.icmp "eq" %5262, %5259 : i32 loc(#loc26)
    %5264 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5265 = llvm.select %5263, %5259, %5264 : i1, i32 loc(#loc26)
    %5266 = llvm.xor %5260, %5265 : i32 loc(#loc26)
    %5267 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5268 = llvm.and %4673, %5267 : i32 loc(#loc26)
    %5269 = llvm.icmp "eq" %5268, %5259 : i32 loc(#loc26)
    %5270 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5271 = llvm.select %5269, %5259, %5270 : i1, i32 loc(#loc26)
    %5272 = llvm.xor %5266, %5271 : i32 loc(#loc26)
    %5273 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5274 = llvm.and %4673, %5273 : i32 loc(#loc26)
    %5275 = llvm.icmp "eq" %5274, %5259 : i32 loc(#loc26)
    %5276 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5277 = llvm.select %5275, %5259, %5276 : i1, i32 loc(#loc26)
    %5278 = llvm.xor %5272, %5277 : i32 loc(#loc26)
    %5279 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5280 = llvm.and %4673, %5279 : i32 loc(#loc26)
    %5281 = llvm.icmp "eq" %5280, %5259 : i32 loc(#loc26)
    %5282 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5283 = llvm.select %5281, %5259, %5282 : i1, i32 loc(#loc26)
    %5284 = llvm.xor %5278, %5283 : i32 loc(#loc26)
    %5285 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5286 = llvm.and %4673, %5285 : i32 loc(#loc26)
    %5287 = llvm.icmp "eq" %5286, %5259 : i32 loc(#loc26)
    %5288 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5289 = llvm.select %5287, %5259, %5288 : i1, i32 loc(#loc26)
    %5290 = llvm.xor %5284, %5289 : i32 loc(#loc26)
    %5291 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5292 = llvm.and %4673, %5291 : i32 loc(#loc26)
    %5293 = llvm.icmp "eq" %5292, %5259 : i32 loc(#loc26)
    %5294 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5295 = llvm.select %5293, %5259, %5294 : i1, i32 loc(#loc26)
    %5296 = llvm.xor %5290, %5295 : i32 loc(#loc26)
    %5297 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5298 = llvm.and %4674, %5297 : i32 loc(#loc26)
    %5299 = llvm.icmp "eq" %5298, %5259 : i32 loc(#loc26)
    %5300 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %5301 = llvm.select %5299, %5259, %5300 : i1, i32 loc(#loc26)
    %5302 = llvm.xor %5296, %5301 : i32 loc(#loc26)
    %5303 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5304 = llvm.and %4674, %5303 : i32 loc(#loc26)
    %5305 = llvm.icmp "eq" %5304, %5259 : i32 loc(#loc26)
    %5306 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %5307 = llvm.select %5305, %5259, %5306 : i1, i32 loc(#loc26)
    %5308 = llvm.xor %5302, %5307 : i32 loc(#loc26)
    %5309 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5310 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5311 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5312 = llvm.mlir.constant(40 : i32) : i32 loc(#loc26)
    %5313 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5314 = llvm.and %4673, %5313 : i32 loc(#loc26)
    %5315 = llvm.icmp "eq" %5314, %5310 : i32 loc(#loc26)
    %5316 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5317 = llvm.select %5315, %5310, %5316 : i1, i32 loc(#loc26)
    %5318 = llvm.xor %5311, %5317 : i32 loc(#loc26)
    %5319 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5320 = llvm.and %4673, %5319 : i32 loc(#loc26)
    %5321 = llvm.icmp "eq" %5320, %5310 : i32 loc(#loc26)
    %5322 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5323 = llvm.select %5321, %5310, %5322 : i1, i32 loc(#loc26)
    %5324 = llvm.xor %5318, %5323 : i32 loc(#loc26)
    %5325 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5326 = llvm.and %4673, %5325 : i32 loc(#loc26)
    %5327 = llvm.icmp "eq" %5326, %5310 : i32 loc(#loc26)
    %5328 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5329 = llvm.select %5327, %5310, %5328 : i1, i32 loc(#loc26)
    %5330 = llvm.xor %5324, %5329 : i32 loc(#loc26)
    %5331 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5332 = llvm.and %4673, %5331 : i32 loc(#loc26)
    %5333 = llvm.icmp "eq" %5332, %5310 : i32 loc(#loc26)
    %5334 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5335 = llvm.select %5333, %5310, %5334 : i1, i32 loc(#loc26)
    %5336 = llvm.xor %5330, %5335 : i32 loc(#loc26)
    %5337 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5338 = llvm.and %4673, %5337 : i32 loc(#loc26)
    %5339 = llvm.icmp "eq" %5338, %5310 : i32 loc(#loc26)
    %5340 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5341 = llvm.select %5339, %5310, %5340 : i1, i32 loc(#loc26)
    %5342 = llvm.xor %5336, %5341 : i32 loc(#loc26)
    %5343 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5344 = llvm.and %4673, %5343 : i32 loc(#loc26)
    %5345 = llvm.icmp "eq" %5344, %5310 : i32 loc(#loc26)
    %5346 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5347 = llvm.select %5345, %5310, %5346 : i1, i32 loc(#loc26)
    %5348 = llvm.xor %5312, %5347 : i32 loc(#loc26)
    %5349 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5350 = llvm.and %4674, %5349 : i32 loc(#loc26)
    %5351 = llvm.icmp "eq" %5350, %5310 : i32 loc(#loc26)
    %5352 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5353 = llvm.select %5351, %5310, %5352 : i1, i32 loc(#loc26)
    %5354 = llvm.xor %5348, %5353 : i32 loc(#loc26)
    %5355 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5356 = llvm.and %4674, %5355 : i32 loc(#loc26)
    %5357 = llvm.icmp "eq" %5356, %5310 : i32 loc(#loc26)
    %5358 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5359 = llvm.select %5357, %5310, %5358 : i1, i32 loc(#loc26)
    %5360 = llvm.xor %5342, %5359 : i32 loc(#loc26)
    %5361 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5362 = llvm.select %5357, %5310, %5361 : i1, i32 loc(#loc26)
    %5363 = llvm.xor %5354, %5362 : i32 loc(#loc26)
    %5364 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5365 = llvm.mul %5360, %5257 : i32 loc(#loc26)
    %5366 = llvm.add %5364, %5365 : i32 loc(#loc26)
    %5367 = llvm.mul %5363, %5258 : i32 loc(#loc26)
    %5368 = llvm.add %5366, %5367 : i32 loc(#loc26)
    %5369 = llvm.getelementptr inbounds %4661[%5368] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5370 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %5371 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5372 = llvm.insertelement %4668, %5370[%5371 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %5372, %5369 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %5373 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %5374 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5375 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5376 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5377 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc26)
    %5378 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5379 = llvm.and %4673, %5378 : i32 loc(#loc26)
    %5380 = llvm.icmp "eq" %5379, %5376 : i32 loc(#loc26)
    %5381 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5382 = llvm.select %5380, %5376, %5381 : i1, i32 loc(#loc26)
    %5383 = llvm.xor %5377, %5382 : i32 loc(#loc26)
    %5384 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5385 = llvm.and %4673, %5384 : i32 loc(#loc26)
    %5386 = llvm.icmp "eq" %5385, %5376 : i32 loc(#loc26)
    %5387 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5388 = llvm.select %5386, %5376, %5387 : i1, i32 loc(#loc26)
    %5389 = llvm.xor %5383, %5388 : i32 loc(#loc26)
    %5390 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5391 = llvm.and %4673, %5390 : i32 loc(#loc26)
    %5392 = llvm.icmp "eq" %5391, %5376 : i32 loc(#loc26)
    %5393 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5394 = llvm.select %5392, %5376, %5393 : i1, i32 loc(#loc26)
    %5395 = llvm.xor %5389, %5394 : i32 loc(#loc26)
    %5396 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5397 = llvm.and %4673, %5396 : i32 loc(#loc26)
    %5398 = llvm.icmp "eq" %5397, %5376 : i32 loc(#loc26)
    %5399 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5400 = llvm.select %5398, %5376, %5399 : i1, i32 loc(#loc26)
    %5401 = llvm.xor %5395, %5400 : i32 loc(#loc26)
    %5402 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5403 = llvm.and %4673, %5402 : i32 loc(#loc26)
    %5404 = llvm.icmp "eq" %5403, %5376 : i32 loc(#loc26)
    %5405 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5406 = llvm.select %5404, %5376, %5405 : i1, i32 loc(#loc26)
    %5407 = llvm.xor %5401, %5406 : i32 loc(#loc26)
    %5408 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5409 = llvm.and %4673, %5408 : i32 loc(#loc26)
    %5410 = llvm.icmp "eq" %5409, %5376 : i32 loc(#loc26)
    %5411 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5412 = llvm.select %5410, %5376, %5411 : i1, i32 loc(#loc26)
    %5413 = llvm.xor %5407, %5412 : i32 loc(#loc26)
    %5414 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5415 = llvm.and %4674, %5414 : i32 loc(#loc26)
    %5416 = llvm.icmp "eq" %5415, %5376 : i32 loc(#loc26)
    %5417 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %5418 = llvm.select %5416, %5376, %5417 : i1, i32 loc(#loc26)
    %5419 = llvm.xor %5413, %5418 : i32 loc(#loc26)
    %5420 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5421 = llvm.and %4674, %5420 : i32 loc(#loc26)
    %5422 = llvm.icmp "eq" %5421, %5376 : i32 loc(#loc26)
    %5423 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %5424 = llvm.select %5422, %5376, %5423 : i1, i32 loc(#loc26)
    %5425 = llvm.xor %5419, %5424 : i32 loc(#loc26)
    %5426 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5427 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5428 = llvm.mlir.constant(48 : i32) : i32 loc(#loc26)
    %5429 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5430 = llvm.and %4673, %5429 : i32 loc(#loc26)
    %5431 = llvm.icmp "eq" %5430, %5427 : i32 loc(#loc26)
    %5432 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5433 = llvm.select %5431, %5427, %5432 : i1, i32 loc(#loc26)
    %5434 = llvm.xor %5427, %5433 : i32 loc(#loc26)
    %5435 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5436 = llvm.and %4673, %5435 : i32 loc(#loc26)
    %5437 = llvm.icmp "eq" %5436, %5427 : i32 loc(#loc26)
    %5438 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5439 = llvm.select %5437, %5427, %5438 : i1, i32 loc(#loc26)
    %5440 = llvm.xor %5434, %5439 : i32 loc(#loc26)
    %5441 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5442 = llvm.and %4673, %5441 : i32 loc(#loc26)
    %5443 = llvm.icmp "eq" %5442, %5427 : i32 loc(#loc26)
    %5444 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5445 = llvm.select %5443, %5427, %5444 : i1, i32 loc(#loc26)
    %5446 = llvm.xor %5440, %5445 : i32 loc(#loc26)
    %5447 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5448 = llvm.and %4673, %5447 : i32 loc(#loc26)
    %5449 = llvm.icmp "eq" %5448, %5427 : i32 loc(#loc26)
    %5450 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5451 = llvm.select %5449, %5427, %5450 : i1, i32 loc(#loc26)
    %5452 = llvm.xor %5446, %5451 : i32 loc(#loc26)
    %5453 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5454 = llvm.and %4673, %5453 : i32 loc(#loc26)
    %5455 = llvm.icmp "eq" %5454, %5427 : i32 loc(#loc26)
    %5456 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5457 = llvm.select %5455, %5427, %5456 : i1, i32 loc(#loc26)
    %5458 = llvm.xor %5452, %5457 : i32 loc(#loc26)
    %5459 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5460 = llvm.and %4673, %5459 : i32 loc(#loc26)
    %5461 = llvm.icmp "eq" %5460, %5427 : i32 loc(#loc26)
    %5462 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5463 = llvm.select %5461, %5427, %5462 : i1, i32 loc(#loc26)
    %5464 = llvm.xor %5428, %5463 : i32 loc(#loc26)
    %5465 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5466 = llvm.and %4674, %5465 : i32 loc(#loc26)
    %5467 = llvm.icmp "eq" %5466, %5427 : i32 loc(#loc26)
    %5468 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5469 = llvm.select %5467, %5427, %5468 : i1, i32 loc(#loc26)
    %5470 = llvm.xor %5464, %5469 : i32 loc(#loc26)
    %5471 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5472 = llvm.and %4674, %5471 : i32 loc(#loc26)
    %5473 = llvm.icmp "eq" %5472, %5427 : i32 loc(#loc26)
    %5474 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5475 = llvm.select %5473, %5427, %5474 : i1, i32 loc(#loc26)
    %5476 = llvm.xor %5458, %5475 : i32 loc(#loc26)
    %5477 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5478 = llvm.select %5473, %5427, %5477 : i1, i32 loc(#loc26)
    %5479 = llvm.xor %5470, %5478 : i32 loc(#loc26)
    %5480 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5481 = llvm.mul %5476, %5374 : i32 loc(#loc26)
    %5482 = llvm.add %5480, %5481 : i32 loc(#loc26)
    %5483 = llvm.mul %5479, %5375 : i32 loc(#loc26)
    %5484 = llvm.add %5482, %5483 : i32 loc(#loc26)
    %5485 = llvm.getelementptr inbounds %4661[%5484] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5486 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %5487 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5488 = llvm.insertelement %4669, %5486[%5487 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %5488, %5485 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %5489 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %5490 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5491 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5492 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5493 = llvm.mlir.constant(1808 : i32) : i32 loc(#loc26)
    %5494 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5495 = llvm.and %4673, %5494 : i32 loc(#loc26)
    %5496 = llvm.icmp "eq" %5495, %5492 : i32 loc(#loc26)
    %5497 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5498 = llvm.select %5496, %5492, %5497 : i1, i32 loc(#loc26)
    %5499 = llvm.xor %5493, %5498 : i32 loc(#loc26)
    %5500 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5501 = llvm.and %4673, %5500 : i32 loc(#loc26)
    %5502 = llvm.icmp "eq" %5501, %5492 : i32 loc(#loc26)
    %5503 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5504 = llvm.select %5502, %5492, %5503 : i1, i32 loc(#loc26)
    %5505 = llvm.xor %5499, %5504 : i32 loc(#loc26)
    %5506 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5507 = llvm.and %4673, %5506 : i32 loc(#loc26)
    %5508 = llvm.icmp "eq" %5507, %5492 : i32 loc(#loc26)
    %5509 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5510 = llvm.select %5508, %5492, %5509 : i1, i32 loc(#loc26)
    %5511 = llvm.xor %5505, %5510 : i32 loc(#loc26)
    %5512 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5513 = llvm.and %4673, %5512 : i32 loc(#loc26)
    %5514 = llvm.icmp "eq" %5513, %5492 : i32 loc(#loc26)
    %5515 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5516 = llvm.select %5514, %5492, %5515 : i1, i32 loc(#loc26)
    %5517 = llvm.xor %5511, %5516 : i32 loc(#loc26)
    %5518 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5519 = llvm.and %4673, %5518 : i32 loc(#loc26)
    %5520 = llvm.icmp "eq" %5519, %5492 : i32 loc(#loc26)
    %5521 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5522 = llvm.select %5520, %5492, %5521 : i1, i32 loc(#loc26)
    %5523 = llvm.xor %5517, %5522 : i32 loc(#loc26)
    %5524 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5525 = llvm.and %4673, %5524 : i32 loc(#loc26)
    %5526 = llvm.icmp "eq" %5525, %5492 : i32 loc(#loc26)
    %5527 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5528 = llvm.select %5526, %5492, %5527 : i1, i32 loc(#loc26)
    %5529 = llvm.xor %5523, %5528 : i32 loc(#loc26)
    %5530 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5531 = llvm.and %4674, %5530 : i32 loc(#loc26)
    %5532 = llvm.icmp "eq" %5531, %5492 : i32 loc(#loc26)
    %5533 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %5534 = llvm.select %5532, %5492, %5533 : i1, i32 loc(#loc26)
    %5535 = llvm.xor %5529, %5534 : i32 loc(#loc26)
    %5536 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5537 = llvm.and %4674, %5536 : i32 loc(#loc26)
    %5538 = llvm.icmp "eq" %5537, %5492 : i32 loc(#loc26)
    %5539 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %5540 = llvm.select %5538, %5492, %5539 : i1, i32 loc(#loc26)
    %5541 = llvm.xor %5535, %5540 : i32 loc(#loc26)
    %5542 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5543 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5544 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5545 = llvm.mlir.constant(56 : i32) : i32 loc(#loc26)
    %5546 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5547 = llvm.and %4673, %5546 : i32 loc(#loc26)
    %5548 = llvm.icmp "eq" %5547, %5543 : i32 loc(#loc26)
    %5549 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5550 = llvm.select %5548, %5543, %5549 : i1, i32 loc(#loc26)
    %5551 = llvm.xor %5544, %5550 : i32 loc(#loc26)
    %5552 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5553 = llvm.and %4673, %5552 : i32 loc(#loc26)
    %5554 = llvm.icmp "eq" %5553, %5543 : i32 loc(#loc26)
    %5555 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5556 = llvm.select %5554, %5543, %5555 : i1, i32 loc(#loc26)
    %5557 = llvm.xor %5551, %5556 : i32 loc(#loc26)
    %5558 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5559 = llvm.and %4673, %5558 : i32 loc(#loc26)
    %5560 = llvm.icmp "eq" %5559, %5543 : i32 loc(#loc26)
    %5561 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5562 = llvm.select %5560, %5543, %5561 : i1, i32 loc(#loc26)
    %5563 = llvm.xor %5557, %5562 : i32 loc(#loc26)
    %5564 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5565 = llvm.and %4673, %5564 : i32 loc(#loc26)
    %5566 = llvm.icmp "eq" %5565, %5543 : i32 loc(#loc26)
    %5567 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5568 = llvm.select %5566, %5543, %5567 : i1, i32 loc(#loc26)
    %5569 = llvm.xor %5563, %5568 : i32 loc(#loc26)
    %5570 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5571 = llvm.and %4673, %5570 : i32 loc(#loc26)
    %5572 = llvm.icmp "eq" %5571, %5543 : i32 loc(#loc26)
    %5573 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5574 = llvm.select %5572, %5543, %5573 : i1, i32 loc(#loc26)
    %5575 = llvm.xor %5569, %5574 : i32 loc(#loc26)
    %5576 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5577 = llvm.and %4673, %5576 : i32 loc(#loc26)
    %5578 = llvm.icmp "eq" %5577, %5543 : i32 loc(#loc26)
    %5579 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5580 = llvm.select %5578, %5543, %5579 : i1, i32 loc(#loc26)
    %5581 = llvm.xor %5545, %5580 : i32 loc(#loc26)
    %5582 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5583 = llvm.and %4674, %5582 : i32 loc(#loc26)
    %5584 = llvm.icmp "eq" %5583, %5543 : i32 loc(#loc26)
    %5585 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5586 = llvm.select %5584, %5543, %5585 : i1, i32 loc(#loc26)
    %5587 = llvm.xor %5581, %5586 : i32 loc(#loc26)
    %5588 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5589 = llvm.and %4674, %5588 : i32 loc(#loc26)
    %5590 = llvm.icmp "eq" %5589, %5543 : i32 loc(#loc26)
    %5591 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5592 = llvm.select %5590, %5543, %5591 : i1, i32 loc(#loc26)
    %5593 = llvm.xor %5575, %5592 : i32 loc(#loc26)
    %5594 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5595 = llvm.select %5590, %5543, %5594 : i1, i32 loc(#loc26)
    %5596 = llvm.xor %5587, %5595 : i32 loc(#loc26)
    %5597 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5598 = llvm.mul %5593, %5490 : i32 loc(#loc26)
    %5599 = llvm.add %5597, %5598 : i32 loc(#loc26)
    %5600 = llvm.mul %5596, %5491 : i32 loc(#loc26)
    %5601 = llvm.add %5599, %5600 : i32 loc(#loc26)
    %5602 = llvm.getelementptr inbounds %4661[%5601] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5603 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %5604 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5605 = llvm.insertelement %4670, %5603[%5604 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %5605, %5602 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %5606 = llvm.mlir.undef : !llvm.struct<(ptr<3>, i32, i32)> loc(#loc26)
    %5607 = llvm.insertvalue %4661, %5606[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %5608 = llvm.insertvalue %4662, %5607[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %5609 = llvm.insertvalue %4662, %5608[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    rocdl.barrier loc(#loc26)
    %5610 = llvm.extractvalue %5609[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %5611 = llvm.extractvalue %5609[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %5612 = llvm.extractvalue %5609[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %5613 = rocdl.workitem.id.x : i32 loc(#loc26)
    %5614 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %5615 = llvm.udiv %5613, %5614 : i32 loc(#loc26)
    %5616 = llvm.urem %5613, %5614 : i32 loc(#loc26)
    %5617 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5618 = llvm.urem %5615, %5617 : i32 loc(#loc26)
    %5619 = llvm.udiv %5615, %5617 : i32 loc(#loc26)
    %5620 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5621 = llvm.urem %5619, %5620 : i32 loc(#loc26)
    %5622 = llvm.udiv %5619, %5620 : i32 loc(#loc26)
    %5623 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5624 = llvm.urem %5618, %5623 : i32 loc(#loc26)
    %5625 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5626 = llvm.urem %5615, %5625 : i32 loc(#loc26)
    %5627 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5628 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5629 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5630 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5631 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5632 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %5633 = llvm.mul %5624, %5632 : i32 loc(#loc26)
    %5634 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5635 = llvm.urem %5616, %5631 : i32 loc(#loc26)
    %5636 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5637 = llvm.icmp "uge" %5616, %5630 : i32 loc(#loc26)
    %5638 = llvm.select %5637, %5636, %5629 : i1, i32 loc(#loc26)
    %5639 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5640 = llvm.add %5629, %5635 : i32 loc(#loc26)
    %5641 = llvm.add %5640, %5629 : i32 loc(#loc26)
    %5642 = llvm.add %5641, %5633 : i32 loc(#loc26)
    %5643 = llvm.add %5634, %5638 : i32 loc(#loc26)
    %5644 = llvm.add %5643, %5639 : i32 loc(#loc26)
    %5645 = llvm.add %5642, %5612 : i32 loc(#loc26)
    %5646 = llvm.add %5644, %5611 : i32 loc(#loc26)
    %5647 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %5648 = llvm.urem %5616, %5631 : i32 loc(#loc26)
    %5649 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5650 = llvm.icmp "uge" %5616, %5630 : i32 loc(#loc26)
    %5651 = llvm.select %5650, %5649, %5629 : i1, i32 loc(#loc26)
    %5652 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5653 = llvm.add %5629, %5648 : i32 loc(#loc26)
    %5654 = llvm.add %5653, %5629 : i32 loc(#loc26)
    %5655 = llvm.add %5654, %5633 : i32 loc(#loc26)
    %5656 = llvm.add %5647, %5651 : i32 loc(#loc26)
    %5657 = llvm.add %5656, %5652 : i32 loc(#loc26)
    %5658 = llvm.add %5655, %5612 : i32 loc(#loc26)
    %5659 = llvm.add %5657, %5611 : i32 loc(#loc26)
    %5660 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5661 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5662 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5663 = llvm.udiv %5645, %5661 : i32 loc(#loc26)
    %5664 = llvm.urem %5663, %5662 : i32 loc(#loc26)
    %5665 = llvm.udiv %5646, %5660 : i32 loc(#loc26)
    %5666 = llvm.xor %5665, %5664 : i32 loc(#loc26)
    %5667 = llvm.mul %5666, %5660 : i32 loc(#loc26)
    %5668 = llvm.urem %5646, %5660 : i32 loc(#loc26)
    %5669 = llvm.add %5667, %5668 : i32 loc(#loc26)
    %5670 = llvm.mul %5669, %5627 : i32 loc(#loc26)
    %5671 = llvm.mul %5645, %5628 : i32 loc(#loc26)
    %5672 = llvm.add %5670, %5671 : i32 loc(#loc26)
    %5673 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %5674 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5675 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5676 = llvm.udiv %5658, %5674 : i32 loc(#loc26)
    %5677 = llvm.urem %5676, %5675 : i32 loc(#loc26)
    %5678 = llvm.udiv %5659, %5673 : i32 loc(#loc26)
    %5679 = llvm.xor %5678, %5677 : i32 loc(#loc26)
    %5680 = llvm.mul %5679, %5673 : i32 loc(#loc26)
    %5681 = llvm.urem %5659, %5673 : i32 loc(#loc26)
    %5682 = llvm.add %5680, %5681 : i32 loc(#loc26)
    %5683 = llvm.mul %5682, %5627 : i32 loc(#loc26)
    %5684 = llvm.mul %5658, %5628 : i32 loc(#loc26)
    %5685 = llvm.add %5683, %5684 : i32 loc(#loc26)
    %5686 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5687 = llvm.mul %5686, %5628 : i32 loc(#loc26)
    %5688 = llvm.add %5687, %5672 : i32 loc(#loc26)
    %5689 = llvm.add %5687, %5685 : i32 loc(#loc26)
    %5690 = llvm.mul %5611, %5627 : i32 loc(#loc26)
    %5691 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5692 = llvm.sub %5691, %5690 : i32 loc(#loc26)
    %5693 = llvm.getelementptr %5610[%5692] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5694 = llvm.mul %5612, %5628 : i32 loc(#loc26)
    %5695 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5696 = llvm.sub %5695, %5694 : i32 loc(#loc26)
    %5697 = llvm.getelementptr %5693[%5696] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5698 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5699 = llvm.add %5626, %5698 : i32 loc(#loc26)
    %5700 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc26)
    %5701 = llvm.mul %5700, %5699 : i32 loc(#loc26)
    %5702 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5703 = llvm.add %5688, %5701 : i32 loc(#loc26)
    %5704 = llvm.getelementptr %5697[%5703] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5705 = llvm.load %5704 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc26)
    %5706 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5707 = llvm.extractelement %5705[%5706 : i32] : vector<8xbf16> loc(#loc26)
    %5708 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5709 = llvm.extractelement %5705[%5708 : i32] : vector<8xbf16> loc(#loc26)
    %5710 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5711 = llvm.extractelement %5705[%5710 : i32] : vector<8xbf16> loc(#loc26)
    %5712 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %5713 = llvm.extractelement %5705[%5712 : i32] : vector<8xbf16> loc(#loc26)
    %5714 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5715 = llvm.extractelement %5705[%5714 : i32] : vector<8xbf16> loc(#loc26)
    %5716 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %5717 = llvm.extractelement %5705[%5716 : i32] : vector<8xbf16> loc(#loc26)
    %5718 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %5719 = llvm.extractelement %5705[%5718 : i32] : vector<8xbf16> loc(#loc26)
    %5720 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %5721 = llvm.extractelement %5705[%5720 : i32] : vector<8xbf16> loc(#loc26)
    %5722 = llvm.add %5689, %5701 : i32 loc(#loc26)
    %5723 = llvm.getelementptr %5697[%5722] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %5724 = llvm.load %5723 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc26)
    %5725 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %5726 = llvm.extractelement %5724[%5725 : i32] : vector<8xbf16> loc(#loc26)
    %5727 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %5728 = llvm.extractelement %5724[%5727 : i32] : vector<8xbf16> loc(#loc26)
    %5729 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %5730 = llvm.extractelement %5724[%5729 : i32] : vector<8xbf16> loc(#loc26)
    %5731 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %5732 = llvm.extractelement %5724[%5731 : i32] : vector<8xbf16> loc(#loc26)
    %5733 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %5734 = llvm.extractelement %5724[%5733 : i32] : vector<8xbf16> loc(#loc26)
    %5735 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %5736 = llvm.extractelement %5724[%5735 : i32] : vector<8xbf16> loc(#loc26)
    %5737 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %5738 = llvm.extractelement %5724[%5737 : i32] : vector<8xbf16> loc(#loc26)
    %5739 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %5740 = llvm.extractelement %5724[%5739 : i32] : vector<8xbf16> loc(#loc26)
    %5741 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc26)
    %5742 = llvm.insertvalue %5707, %5741[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5743 = llvm.insertvalue %5709, %5742[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5744 = llvm.insertvalue %5711, %5743[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5745 = llvm.insertvalue %5713, %5744[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5746 = llvm.insertvalue %5715, %5745[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5747 = llvm.insertvalue %5717, %5746[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5748 = llvm.insertvalue %5719, %5747[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5749 = llvm.insertvalue %5721, %5748[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5750 = llvm.insertvalue %5726, %5749[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5751 = llvm.insertvalue %5728, %5750[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5752 = llvm.insertvalue %5730, %5751[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5753 = llvm.insertvalue %5732, %5752[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5754 = llvm.insertvalue %5734, %5753[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5755 = llvm.insertvalue %5736, %5754[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5756 = llvm.insertvalue %5738, %5755[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %5757 = llvm.insertvalue %5740, %5756[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    rocdl.barrier loc(#loc15)
    %5758 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5759 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %5760 = llvm.getelementptr %5759[%5758] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc15)
    %5761 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5762 = llvm.extractvalue %1754[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5763 = llvm.extractvalue %1754[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5764 = llvm.extractvalue %1754[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5765 = llvm.extractvalue %1754[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5766 = llvm.extractvalue %1754[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5767 = llvm.extractvalue %1754[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5768 = llvm.extractvalue %1754[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5769 = llvm.extractvalue %1754[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %5770 = rocdl.workitem.id.x : i32 loc(#loc15)
    %5771 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %5772 = llvm.urem %5770, %5771 : i32 loc(#loc15)
    %5773 = llvm.udiv %5770, %5771 : i32 loc(#loc15)
    %5774 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5775 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5776 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5777 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5778 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5779 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5780 = llvm.and %5772, %5779 : i32 loc(#loc15)
    %5781 = llvm.icmp "eq" %5780, %5778 : i32 loc(#loc15)
    %5782 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5783 = llvm.select %5781, %5778, %5782 : i1, i32 loc(#loc15)
    %5784 = llvm.xor %5778, %5783 : i32 loc(#loc15)
    %5785 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5786 = llvm.and %5772, %5785 : i32 loc(#loc15)
    %5787 = llvm.icmp "eq" %5786, %5778 : i32 loc(#loc15)
    %5788 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5789 = llvm.select %5787, %5778, %5788 : i1, i32 loc(#loc15)
    %5790 = llvm.xor %5784, %5789 : i32 loc(#loc15)
    %5791 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5792 = llvm.and %5772, %5791 : i32 loc(#loc15)
    %5793 = llvm.icmp "eq" %5792, %5778 : i32 loc(#loc15)
    %5794 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5795 = llvm.select %5793, %5778, %5794 : i1, i32 loc(#loc15)
    %5796 = llvm.xor %5790, %5795 : i32 loc(#loc15)
    %5797 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5798 = llvm.and %5772, %5797 : i32 loc(#loc15)
    %5799 = llvm.icmp "eq" %5798, %5778 : i32 loc(#loc15)
    %5800 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5801 = llvm.select %5799, %5778, %5800 : i1, i32 loc(#loc15)
    %5802 = llvm.xor %5796, %5801 : i32 loc(#loc15)
    %5803 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5804 = llvm.and %5772, %5803 : i32 loc(#loc15)
    %5805 = llvm.icmp "eq" %5804, %5778 : i32 loc(#loc15)
    %5806 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5807 = llvm.select %5805, %5778, %5806 : i1, i32 loc(#loc15)
    %5808 = llvm.xor %5802, %5807 : i32 loc(#loc15)
    %5809 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5810 = llvm.and %5772, %5809 : i32 loc(#loc15)
    %5811 = llvm.icmp "eq" %5810, %5778 : i32 loc(#loc15)
    %5812 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5813 = llvm.select %5811, %5778, %5812 : i1, i32 loc(#loc15)
    %5814 = llvm.xor %5808, %5813 : i32 loc(#loc15)
    %5815 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5816 = llvm.and %5773, %5815 : i32 loc(#loc15)
    %5817 = llvm.icmp "eq" %5816, %5778 : i32 loc(#loc15)
    %5818 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %5819 = llvm.select %5817, %5778, %5818 : i1, i32 loc(#loc15)
    %5820 = llvm.xor %5814, %5819 : i32 loc(#loc15)
    %5821 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5822 = llvm.and %5773, %5821 : i32 loc(#loc15)
    %5823 = llvm.icmp "eq" %5822, %5778 : i32 loc(#loc15)
    %5824 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %5825 = llvm.select %5823, %5778, %5824 : i1, i32 loc(#loc15)
    %5826 = llvm.xor %5820, %5825 : i32 loc(#loc15)
    %5827 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5828 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5829 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5830 = llvm.and %5772, %5829 : i32 loc(#loc15)
    %5831 = llvm.icmp "eq" %5830, %5828 : i32 loc(#loc15)
    %5832 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5833 = llvm.select %5831, %5828, %5832 : i1, i32 loc(#loc15)
    %5834 = llvm.xor %5828, %5833 : i32 loc(#loc15)
    %5835 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5836 = llvm.and %5772, %5835 : i32 loc(#loc15)
    %5837 = llvm.icmp "eq" %5836, %5828 : i32 loc(#loc15)
    %5838 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5839 = llvm.select %5837, %5828, %5838 : i1, i32 loc(#loc15)
    %5840 = llvm.xor %5834, %5839 : i32 loc(#loc15)
    %5841 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5842 = llvm.and %5772, %5841 : i32 loc(#loc15)
    %5843 = llvm.icmp "eq" %5842, %5828 : i32 loc(#loc15)
    %5844 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5845 = llvm.select %5843, %5828, %5844 : i1, i32 loc(#loc15)
    %5846 = llvm.xor %5840, %5845 : i32 loc(#loc15)
    %5847 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5848 = llvm.and %5772, %5847 : i32 loc(#loc15)
    %5849 = llvm.icmp "eq" %5848, %5828 : i32 loc(#loc15)
    %5850 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5851 = llvm.select %5849, %5828, %5850 : i1, i32 loc(#loc15)
    %5852 = llvm.xor %5846, %5851 : i32 loc(#loc15)
    %5853 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5854 = llvm.and %5772, %5853 : i32 loc(#loc15)
    %5855 = llvm.icmp "eq" %5854, %5828 : i32 loc(#loc15)
    %5856 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5857 = llvm.select %5855, %5828, %5856 : i1, i32 loc(#loc15)
    %5858 = llvm.xor %5852, %5857 : i32 loc(#loc15)
    %5859 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5860 = llvm.and %5772, %5859 : i32 loc(#loc15)
    %5861 = llvm.icmp "eq" %5860, %5828 : i32 loc(#loc15)
    %5862 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5863 = llvm.select %5861, %5828, %5862 : i1, i32 loc(#loc15)
    %5864 = llvm.xor %5828, %5863 : i32 loc(#loc15)
    %5865 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5866 = llvm.and %5773, %5865 : i32 loc(#loc15)
    %5867 = llvm.icmp "eq" %5866, %5828 : i32 loc(#loc15)
    %5868 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5869 = llvm.select %5867, %5828, %5868 : i1, i32 loc(#loc15)
    %5870 = llvm.xor %5864, %5869 : i32 loc(#loc15)
    %5871 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5872 = llvm.and %5773, %5871 : i32 loc(#loc15)
    %5873 = llvm.icmp "eq" %5872, %5828 : i32 loc(#loc15)
    %5874 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5875 = llvm.select %5873, %5828, %5874 : i1, i32 loc(#loc15)
    %5876 = llvm.xor %5858, %5875 : i32 loc(#loc15)
    %5877 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5878 = llvm.select %5873, %5828, %5877 : i1, i32 loc(#loc15)
    %5879 = llvm.xor %5870, %5878 : i32 loc(#loc15)
    %5880 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5881 = llvm.mul %5876, %5776 : i32 loc(#loc15)
    %5882 = llvm.add %5880, %5881 : i32 loc(#loc15)
    %5883 = llvm.mul %5879, %5777 : i32 loc(#loc15)
    %5884 = llvm.add %5882, %5883 : i32 loc(#loc15)
    %5885 = llvm.getelementptr inbounds %5760[%5884] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %5886 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %5887 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5888 = llvm.insertelement %5762, %5886[%5887 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %5888, %5885 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %5889 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5890 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5891 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5892 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5893 = llvm.mlir.constant(272 : i32) : i32 loc(#loc15)
    %5894 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5895 = llvm.and %5772, %5894 : i32 loc(#loc15)
    %5896 = llvm.icmp "eq" %5895, %5892 : i32 loc(#loc15)
    %5897 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5898 = llvm.select %5896, %5892, %5897 : i1, i32 loc(#loc15)
    %5899 = llvm.xor %5893, %5898 : i32 loc(#loc15)
    %5900 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5901 = llvm.and %5772, %5900 : i32 loc(#loc15)
    %5902 = llvm.icmp "eq" %5901, %5892 : i32 loc(#loc15)
    %5903 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5904 = llvm.select %5902, %5892, %5903 : i1, i32 loc(#loc15)
    %5905 = llvm.xor %5899, %5904 : i32 loc(#loc15)
    %5906 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5907 = llvm.and %5772, %5906 : i32 loc(#loc15)
    %5908 = llvm.icmp "eq" %5907, %5892 : i32 loc(#loc15)
    %5909 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5910 = llvm.select %5908, %5892, %5909 : i1, i32 loc(#loc15)
    %5911 = llvm.xor %5905, %5910 : i32 loc(#loc15)
    %5912 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5913 = llvm.and %5772, %5912 : i32 loc(#loc15)
    %5914 = llvm.icmp "eq" %5913, %5892 : i32 loc(#loc15)
    %5915 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5916 = llvm.select %5914, %5892, %5915 : i1, i32 loc(#loc15)
    %5917 = llvm.xor %5911, %5916 : i32 loc(#loc15)
    %5918 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5919 = llvm.and %5772, %5918 : i32 loc(#loc15)
    %5920 = llvm.icmp "eq" %5919, %5892 : i32 loc(#loc15)
    %5921 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5922 = llvm.select %5920, %5892, %5921 : i1, i32 loc(#loc15)
    %5923 = llvm.xor %5917, %5922 : i32 loc(#loc15)
    %5924 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5925 = llvm.and %5772, %5924 : i32 loc(#loc15)
    %5926 = llvm.icmp "eq" %5925, %5892 : i32 loc(#loc15)
    %5927 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5928 = llvm.select %5926, %5892, %5927 : i1, i32 loc(#loc15)
    %5929 = llvm.xor %5923, %5928 : i32 loc(#loc15)
    %5930 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5931 = llvm.and %5773, %5930 : i32 loc(#loc15)
    %5932 = llvm.icmp "eq" %5931, %5892 : i32 loc(#loc15)
    %5933 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %5934 = llvm.select %5932, %5892, %5933 : i1, i32 loc(#loc15)
    %5935 = llvm.xor %5929, %5934 : i32 loc(#loc15)
    %5936 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5937 = llvm.and %5773, %5936 : i32 loc(#loc15)
    %5938 = llvm.icmp "eq" %5937, %5892 : i32 loc(#loc15)
    %5939 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %5940 = llvm.select %5938, %5892, %5939 : i1, i32 loc(#loc15)
    %5941 = llvm.xor %5935, %5940 : i32 loc(#loc15)
    %5942 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5943 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5944 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5945 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5946 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5947 = llvm.and %5772, %5946 : i32 loc(#loc15)
    %5948 = llvm.icmp "eq" %5947, %5943 : i32 loc(#loc15)
    %5949 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5950 = llvm.select %5948, %5943, %5949 : i1, i32 loc(#loc15)
    %5951 = llvm.xor %5944, %5950 : i32 loc(#loc15)
    %5952 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5953 = llvm.and %5772, %5952 : i32 loc(#loc15)
    %5954 = llvm.icmp "eq" %5953, %5943 : i32 loc(#loc15)
    %5955 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5956 = llvm.select %5954, %5943, %5955 : i1, i32 loc(#loc15)
    %5957 = llvm.xor %5951, %5956 : i32 loc(#loc15)
    %5958 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5959 = llvm.and %5772, %5958 : i32 loc(#loc15)
    %5960 = llvm.icmp "eq" %5959, %5943 : i32 loc(#loc15)
    %5961 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5962 = llvm.select %5960, %5943, %5961 : i1, i32 loc(#loc15)
    %5963 = llvm.xor %5957, %5962 : i32 loc(#loc15)
    %5964 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5965 = llvm.and %5772, %5964 : i32 loc(#loc15)
    %5966 = llvm.icmp "eq" %5965, %5943 : i32 loc(#loc15)
    %5967 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5968 = llvm.select %5966, %5943, %5967 : i1, i32 loc(#loc15)
    %5969 = llvm.xor %5963, %5968 : i32 loc(#loc15)
    %5970 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5971 = llvm.and %5772, %5970 : i32 loc(#loc15)
    %5972 = llvm.icmp "eq" %5971, %5943 : i32 loc(#loc15)
    %5973 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %5974 = llvm.select %5972, %5943, %5973 : i1, i32 loc(#loc15)
    %5975 = llvm.xor %5969, %5974 : i32 loc(#loc15)
    %5976 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %5977 = llvm.and %5772, %5976 : i32 loc(#loc15)
    %5978 = llvm.icmp "eq" %5977, %5943 : i32 loc(#loc15)
    %5979 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5980 = llvm.select %5978, %5943, %5979 : i1, i32 loc(#loc15)
    %5981 = llvm.xor %5945, %5980 : i32 loc(#loc15)
    %5982 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %5983 = llvm.and %5773, %5982 : i32 loc(#loc15)
    %5984 = llvm.icmp "eq" %5983, %5943 : i32 loc(#loc15)
    %5985 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5986 = llvm.select %5984, %5943, %5985 : i1, i32 loc(#loc15)
    %5987 = llvm.xor %5981, %5986 : i32 loc(#loc15)
    %5988 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %5989 = llvm.and %5773, %5988 : i32 loc(#loc15)
    %5990 = llvm.icmp "eq" %5989, %5943 : i32 loc(#loc15)
    %5991 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %5992 = llvm.select %5990, %5943, %5991 : i1, i32 loc(#loc15)
    %5993 = llvm.xor %5975, %5992 : i32 loc(#loc15)
    %5994 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %5995 = llvm.select %5990, %5943, %5994 : i1, i32 loc(#loc15)
    %5996 = llvm.xor %5987, %5995 : i32 loc(#loc15)
    %5997 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %5998 = llvm.mul %5993, %5890 : i32 loc(#loc15)
    %5999 = llvm.add %5997, %5998 : i32 loc(#loc15)
    %6000 = llvm.mul %5996, %5891 : i32 loc(#loc15)
    %6001 = llvm.add %5999, %6000 : i32 loc(#loc15)
    %6002 = llvm.getelementptr inbounds %5760[%6001] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6003 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6004 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6005 = llvm.insertelement %5763, %6003[%6004 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6005, %6002 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6006 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6007 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6008 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6009 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6010 = llvm.mlir.constant(512 : i32) : i32 loc(#loc15)
    %6011 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6012 = llvm.and %5772, %6011 : i32 loc(#loc15)
    %6013 = llvm.icmp "eq" %6012, %6009 : i32 loc(#loc15)
    %6014 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6015 = llvm.select %6013, %6009, %6014 : i1, i32 loc(#loc15)
    %6016 = llvm.xor %6010, %6015 : i32 loc(#loc15)
    %6017 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6018 = llvm.and %5772, %6017 : i32 loc(#loc15)
    %6019 = llvm.icmp "eq" %6018, %6009 : i32 loc(#loc15)
    %6020 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6021 = llvm.select %6019, %6009, %6020 : i1, i32 loc(#loc15)
    %6022 = llvm.xor %6016, %6021 : i32 loc(#loc15)
    %6023 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6024 = llvm.and %5772, %6023 : i32 loc(#loc15)
    %6025 = llvm.icmp "eq" %6024, %6009 : i32 loc(#loc15)
    %6026 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6027 = llvm.select %6025, %6009, %6026 : i1, i32 loc(#loc15)
    %6028 = llvm.xor %6022, %6027 : i32 loc(#loc15)
    %6029 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6030 = llvm.and %5772, %6029 : i32 loc(#loc15)
    %6031 = llvm.icmp "eq" %6030, %6009 : i32 loc(#loc15)
    %6032 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6033 = llvm.select %6031, %6009, %6032 : i1, i32 loc(#loc15)
    %6034 = llvm.xor %6028, %6033 : i32 loc(#loc15)
    %6035 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6036 = llvm.and %5772, %6035 : i32 loc(#loc15)
    %6037 = llvm.icmp "eq" %6036, %6009 : i32 loc(#loc15)
    %6038 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6039 = llvm.select %6037, %6009, %6038 : i1, i32 loc(#loc15)
    %6040 = llvm.xor %6034, %6039 : i32 loc(#loc15)
    %6041 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6042 = llvm.and %5772, %6041 : i32 loc(#loc15)
    %6043 = llvm.icmp "eq" %6042, %6009 : i32 loc(#loc15)
    %6044 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6045 = llvm.select %6043, %6009, %6044 : i1, i32 loc(#loc15)
    %6046 = llvm.xor %6040, %6045 : i32 loc(#loc15)
    %6047 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6048 = llvm.and %5773, %6047 : i32 loc(#loc15)
    %6049 = llvm.icmp "eq" %6048, %6009 : i32 loc(#loc15)
    %6050 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6051 = llvm.select %6049, %6009, %6050 : i1, i32 loc(#loc15)
    %6052 = llvm.xor %6046, %6051 : i32 loc(#loc15)
    %6053 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6054 = llvm.and %5773, %6053 : i32 loc(#loc15)
    %6055 = llvm.icmp "eq" %6054, %6009 : i32 loc(#loc15)
    %6056 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %6057 = llvm.select %6055, %6009, %6056 : i1, i32 loc(#loc15)
    %6058 = llvm.xor %6052, %6057 : i32 loc(#loc15)
    %6059 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6060 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6061 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6062 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6063 = llvm.and %5772, %6062 : i32 loc(#loc15)
    %6064 = llvm.icmp "eq" %6063, %6060 : i32 loc(#loc15)
    %6065 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6066 = llvm.select %6064, %6060, %6065 : i1, i32 loc(#loc15)
    %6067 = llvm.xor %6060, %6066 : i32 loc(#loc15)
    %6068 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6069 = llvm.and %5772, %6068 : i32 loc(#loc15)
    %6070 = llvm.icmp "eq" %6069, %6060 : i32 loc(#loc15)
    %6071 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6072 = llvm.select %6070, %6060, %6071 : i1, i32 loc(#loc15)
    %6073 = llvm.xor %6067, %6072 : i32 loc(#loc15)
    %6074 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6075 = llvm.and %5772, %6074 : i32 loc(#loc15)
    %6076 = llvm.icmp "eq" %6075, %6060 : i32 loc(#loc15)
    %6077 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6078 = llvm.select %6076, %6060, %6077 : i1, i32 loc(#loc15)
    %6079 = llvm.xor %6073, %6078 : i32 loc(#loc15)
    %6080 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6081 = llvm.and %5772, %6080 : i32 loc(#loc15)
    %6082 = llvm.icmp "eq" %6081, %6060 : i32 loc(#loc15)
    %6083 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6084 = llvm.select %6082, %6060, %6083 : i1, i32 loc(#loc15)
    %6085 = llvm.xor %6079, %6084 : i32 loc(#loc15)
    %6086 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6087 = llvm.and %5772, %6086 : i32 loc(#loc15)
    %6088 = llvm.icmp "eq" %6087, %6060 : i32 loc(#loc15)
    %6089 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6090 = llvm.select %6088, %6060, %6089 : i1, i32 loc(#loc15)
    %6091 = llvm.xor %6085, %6090 : i32 loc(#loc15)
    %6092 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6093 = llvm.and %5772, %6092 : i32 loc(#loc15)
    %6094 = llvm.icmp "eq" %6093, %6060 : i32 loc(#loc15)
    %6095 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6096 = llvm.select %6094, %6060, %6095 : i1, i32 loc(#loc15)
    %6097 = llvm.xor %6061, %6096 : i32 loc(#loc15)
    %6098 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6099 = llvm.and %5773, %6098 : i32 loc(#loc15)
    %6100 = llvm.icmp "eq" %6099, %6060 : i32 loc(#loc15)
    %6101 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6102 = llvm.select %6100, %6060, %6101 : i1, i32 loc(#loc15)
    %6103 = llvm.xor %6097, %6102 : i32 loc(#loc15)
    %6104 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6105 = llvm.and %5773, %6104 : i32 loc(#loc15)
    %6106 = llvm.icmp "eq" %6105, %6060 : i32 loc(#loc15)
    %6107 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6108 = llvm.select %6106, %6060, %6107 : i1, i32 loc(#loc15)
    %6109 = llvm.xor %6091, %6108 : i32 loc(#loc15)
    %6110 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6111 = llvm.select %6106, %6060, %6110 : i1, i32 loc(#loc15)
    %6112 = llvm.xor %6103, %6111 : i32 loc(#loc15)
    %6113 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6114 = llvm.mul %6109, %6007 : i32 loc(#loc15)
    %6115 = llvm.add %6113, %6114 : i32 loc(#loc15)
    %6116 = llvm.mul %6112, %6008 : i32 loc(#loc15)
    %6117 = llvm.add %6115, %6116 : i32 loc(#loc15)
    %6118 = llvm.getelementptr inbounds %5760[%6117] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6119 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6120 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6121 = llvm.insertelement %5764, %6119[%6120 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6121, %6118 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6122 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %6123 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6124 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6125 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6126 = llvm.mlir.constant(784 : i32) : i32 loc(#loc15)
    %6127 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6128 = llvm.and %5772, %6127 : i32 loc(#loc15)
    %6129 = llvm.icmp "eq" %6128, %6125 : i32 loc(#loc15)
    %6130 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6131 = llvm.select %6129, %6125, %6130 : i1, i32 loc(#loc15)
    %6132 = llvm.xor %6126, %6131 : i32 loc(#loc15)
    %6133 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6134 = llvm.and %5772, %6133 : i32 loc(#loc15)
    %6135 = llvm.icmp "eq" %6134, %6125 : i32 loc(#loc15)
    %6136 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6137 = llvm.select %6135, %6125, %6136 : i1, i32 loc(#loc15)
    %6138 = llvm.xor %6132, %6137 : i32 loc(#loc15)
    %6139 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6140 = llvm.and %5772, %6139 : i32 loc(#loc15)
    %6141 = llvm.icmp "eq" %6140, %6125 : i32 loc(#loc15)
    %6142 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6143 = llvm.select %6141, %6125, %6142 : i1, i32 loc(#loc15)
    %6144 = llvm.xor %6138, %6143 : i32 loc(#loc15)
    %6145 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6146 = llvm.and %5772, %6145 : i32 loc(#loc15)
    %6147 = llvm.icmp "eq" %6146, %6125 : i32 loc(#loc15)
    %6148 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6149 = llvm.select %6147, %6125, %6148 : i1, i32 loc(#loc15)
    %6150 = llvm.xor %6144, %6149 : i32 loc(#loc15)
    %6151 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6152 = llvm.and %5772, %6151 : i32 loc(#loc15)
    %6153 = llvm.icmp "eq" %6152, %6125 : i32 loc(#loc15)
    %6154 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6155 = llvm.select %6153, %6125, %6154 : i1, i32 loc(#loc15)
    %6156 = llvm.xor %6150, %6155 : i32 loc(#loc15)
    %6157 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6158 = llvm.and %5772, %6157 : i32 loc(#loc15)
    %6159 = llvm.icmp "eq" %6158, %6125 : i32 loc(#loc15)
    %6160 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6161 = llvm.select %6159, %6125, %6160 : i1, i32 loc(#loc15)
    %6162 = llvm.xor %6156, %6161 : i32 loc(#loc15)
    %6163 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6164 = llvm.and %5773, %6163 : i32 loc(#loc15)
    %6165 = llvm.icmp "eq" %6164, %6125 : i32 loc(#loc15)
    %6166 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6167 = llvm.select %6165, %6125, %6166 : i1, i32 loc(#loc15)
    %6168 = llvm.xor %6162, %6167 : i32 loc(#loc15)
    %6169 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6170 = llvm.and %5773, %6169 : i32 loc(#loc15)
    %6171 = llvm.icmp "eq" %6170, %6125 : i32 loc(#loc15)
    %6172 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %6173 = llvm.select %6171, %6125, %6172 : i1, i32 loc(#loc15)
    %6174 = llvm.xor %6168, %6173 : i32 loc(#loc15)
    %6175 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6176 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6177 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6178 = llvm.mlir.constant(24 : i32) : i32 loc(#loc15)
    %6179 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6180 = llvm.and %5772, %6179 : i32 loc(#loc15)
    %6181 = llvm.icmp "eq" %6180, %6176 : i32 loc(#loc15)
    %6182 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6183 = llvm.select %6181, %6176, %6182 : i1, i32 loc(#loc15)
    %6184 = llvm.xor %6177, %6183 : i32 loc(#loc15)
    %6185 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6186 = llvm.and %5772, %6185 : i32 loc(#loc15)
    %6187 = llvm.icmp "eq" %6186, %6176 : i32 loc(#loc15)
    %6188 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6189 = llvm.select %6187, %6176, %6188 : i1, i32 loc(#loc15)
    %6190 = llvm.xor %6184, %6189 : i32 loc(#loc15)
    %6191 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6192 = llvm.and %5772, %6191 : i32 loc(#loc15)
    %6193 = llvm.icmp "eq" %6192, %6176 : i32 loc(#loc15)
    %6194 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6195 = llvm.select %6193, %6176, %6194 : i1, i32 loc(#loc15)
    %6196 = llvm.xor %6190, %6195 : i32 loc(#loc15)
    %6197 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6198 = llvm.and %5772, %6197 : i32 loc(#loc15)
    %6199 = llvm.icmp "eq" %6198, %6176 : i32 loc(#loc15)
    %6200 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6201 = llvm.select %6199, %6176, %6200 : i1, i32 loc(#loc15)
    %6202 = llvm.xor %6196, %6201 : i32 loc(#loc15)
    %6203 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6204 = llvm.and %5772, %6203 : i32 loc(#loc15)
    %6205 = llvm.icmp "eq" %6204, %6176 : i32 loc(#loc15)
    %6206 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6207 = llvm.select %6205, %6176, %6206 : i1, i32 loc(#loc15)
    %6208 = llvm.xor %6202, %6207 : i32 loc(#loc15)
    %6209 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6210 = llvm.and %5772, %6209 : i32 loc(#loc15)
    %6211 = llvm.icmp "eq" %6210, %6176 : i32 loc(#loc15)
    %6212 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6213 = llvm.select %6211, %6176, %6212 : i1, i32 loc(#loc15)
    %6214 = llvm.xor %6178, %6213 : i32 loc(#loc15)
    %6215 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6216 = llvm.and %5773, %6215 : i32 loc(#loc15)
    %6217 = llvm.icmp "eq" %6216, %6176 : i32 loc(#loc15)
    %6218 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6219 = llvm.select %6217, %6176, %6218 : i1, i32 loc(#loc15)
    %6220 = llvm.xor %6214, %6219 : i32 loc(#loc15)
    %6221 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6222 = llvm.and %5773, %6221 : i32 loc(#loc15)
    %6223 = llvm.icmp "eq" %6222, %6176 : i32 loc(#loc15)
    %6224 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6225 = llvm.select %6223, %6176, %6224 : i1, i32 loc(#loc15)
    %6226 = llvm.xor %6208, %6225 : i32 loc(#loc15)
    %6227 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6228 = llvm.select %6223, %6176, %6227 : i1, i32 loc(#loc15)
    %6229 = llvm.xor %6220, %6228 : i32 loc(#loc15)
    %6230 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6231 = llvm.mul %6226, %6123 : i32 loc(#loc15)
    %6232 = llvm.add %6230, %6231 : i32 loc(#loc15)
    %6233 = llvm.mul %6229, %6124 : i32 loc(#loc15)
    %6234 = llvm.add %6232, %6233 : i32 loc(#loc15)
    %6235 = llvm.getelementptr inbounds %5760[%6234] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6236 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6237 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6238 = llvm.insertelement %5765, %6236[%6237 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6238, %6235 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6239 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6240 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6241 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6242 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6243 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc15)
    %6244 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6245 = llvm.and %5772, %6244 : i32 loc(#loc15)
    %6246 = llvm.icmp "eq" %6245, %6242 : i32 loc(#loc15)
    %6247 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6248 = llvm.select %6246, %6242, %6247 : i1, i32 loc(#loc15)
    %6249 = llvm.xor %6243, %6248 : i32 loc(#loc15)
    %6250 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6251 = llvm.and %5772, %6250 : i32 loc(#loc15)
    %6252 = llvm.icmp "eq" %6251, %6242 : i32 loc(#loc15)
    %6253 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6254 = llvm.select %6252, %6242, %6253 : i1, i32 loc(#loc15)
    %6255 = llvm.xor %6249, %6254 : i32 loc(#loc15)
    %6256 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6257 = llvm.and %5772, %6256 : i32 loc(#loc15)
    %6258 = llvm.icmp "eq" %6257, %6242 : i32 loc(#loc15)
    %6259 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6260 = llvm.select %6258, %6242, %6259 : i1, i32 loc(#loc15)
    %6261 = llvm.xor %6255, %6260 : i32 loc(#loc15)
    %6262 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6263 = llvm.and %5772, %6262 : i32 loc(#loc15)
    %6264 = llvm.icmp "eq" %6263, %6242 : i32 loc(#loc15)
    %6265 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6266 = llvm.select %6264, %6242, %6265 : i1, i32 loc(#loc15)
    %6267 = llvm.xor %6261, %6266 : i32 loc(#loc15)
    %6268 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6269 = llvm.and %5772, %6268 : i32 loc(#loc15)
    %6270 = llvm.icmp "eq" %6269, %6242 : i32 loc(#loc15)
    %6271 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6272 = llvm.select %6270, %6242, %6271 : i1, i32 loc(#loc15)
    %6273 = llvm.xor %6267, %6272 : i32 loc(#loc15)
    %6274 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6275 = llvm.and %5772, %6274 : i32 loc(#loc15)
    %6276 = llvm.icmp "eq" %6275, %6242 : i32 loc(#loc15)
    %6277 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6278 = llvm.select %6276, %6242, %6277 : i1, i32 loc(#loc15)
    %6279 = llvm.xor %6273, %6278 : i32 loc(#loc15)
    %6280 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6281 = llvm.and %5773, %6280 : i32 loc(#loc15)
    %6282 = llvm.icmp "eq" %6281, %6242 : i32 loc(#loc15)
    %6283 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6284 = llvm.select %6282, %6242, %6283 : i1, i32 loc(#loc15)
    %6285 = llvm.xor %6279, %6284 : i32 loc(#loc15)
    %6286 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6287 = llvm.and %5773, %6286 : i32 loc(#loc15)
    %6288 = llvm.icmp "eq" %6287, %6242 : i32 loc(#loc15)
    %6289 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %6290 = llvm.select %6288, %6242, %6289 : i1, i32 loc(#loc15)
    %6291 = llvm.xor %6285, %6290 : i32 loc(#loc15)
    %6292 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6293 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6294 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6295 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6296 = llvm.and %5772, %6295 : i32 loc(#loc15)
    %6297 = llvm.icmp "eq" %6296, %6293 : i32 loc(#loc15)
    %6298 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6299 = llvm.select %6297, %6293, %6298 : i1, i32 loc(#loc15)
    %6300 = llvm.xor %6293, %6299 : i32 loc(#loc15)
    %6301 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6302 = llvm.and %5772, %6301 : i32 loc(#loc15)
    %6303 = llvm.icmp "eq" %6302, %6293 : i32 loc(#loc15)
    %6304 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6305 = llvm.select %6303, %6293, %6304 : i1, i32 loc(#loc15)
    %6306 = llvm.xor %6300, %6305 : i32 loc(#loc15)
    %6307 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6308 = llvm.and %5772, %6307 : i32 loc(#loc15)
    %6309 = llvm.icmp "eq" %6308, %6293 : i32 loc(#loc15)
    %6310 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6311 = llvm.select %6309, %6293, %6310 : i1, i32 loc(#loc15)
    %6312 = llvm.xor %6306, %6311 : i32 loc(#loc15)
    %6313 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6314 = llvm.and %5772, %6313 : i32 loc(#loc15)
    %6315 = llvm.icmp "eq" %6314, %6293 : i32 loc(#loc15)
    %6316 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6317 = llvm.select %6315, %6293, %6316 : i1, i32 loc(#loc15)
    %6318 = llvm.xor %6312, %6317 : i32 loc(#loc15)
    %6319 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6320 = llvm.and %5772, %6319 : i32 loc(#loc15)
    %6321 = llvm.icmp "eq" %6320, %6293 : i32 loc(#loc15)
    %6322 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6323 = llvm.select %6321, %6293, %6322 : i1, i32 loc(#loc15)
    %6324 = llvm.xor %6318, %6323 : i32 loc(#loc15)
    %6325 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6326 = llvm.and %5772, %6325 : i32 loc(#loc15)
    %6327 = llvm.icmp "eq" %6326, %6293 : i32 loc(#loc15)
    %6328 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6329 = llvm.select %6327, %6293, %6328 : i1, i32 loc(#loc15)
    %6330 = llvm.xor %6294, %6329 : i32 loc(#loc15)
    %6331 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6332 = llvm.and %5773, %6331 : i32 loc(#loc15)
    %6333 = llvm.icmp "eq" %6332, %6293 : i32 loc(#loc15)
    %6334 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6335 = llvm.select %6333, %6293, %6334 : i1, i32 loc(#loc15)
    %6336 = llvm.xor %6330, %6335 : i32 loc(#loc15)
    %6337 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6338 = llvm.and %5773, %6337 : i32 loc(#loc15)
    %6339 = llvm.icmp "eq" %6338, %6293 : i32 loc(#loc15)
    %6340 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6341 = llvm.select %6339, %6293, %6340 : i1, i32 loc(#loc15)
    %6342 = llvm.xor %6324, %6341 : i32 loc(#loc15)
    %6343 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6344 = llvm.select %6339, %6293, %6343 : i1, i32 loc(#loc15)
    %6345 = llvm.xor %6336, %6344 : i32 loc(#loc15)
    %6346 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6347 = llvm.mul %6342, %6240 : i32 loc(#loc15)
    %6348 = llvm.add %6346, %6347 : i32 loc(#loc15)
    %6349 = llvm.mul %6345, %6241 : i32 loc(#loc15)
    %6350 = llvm.add %6348, %6349 : i32 loc(#loc15)
    %6351 = llvm.getelementptr inbounds %5760[%6350] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6352 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6353 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6354 = llvm.insertelement %5766, %6352[%6353 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6354, %6351 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6355 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %6356 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6357 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6358 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6359 = llvm.mlir.constant(1296 : i32) : i32 loc(#loc15)
    %6360 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6361 = llvm.and %5772, %6360 : i32 loc(#loc15)
    %6362 = llvm.icmp "eq" %6361, %6358 : i32 loc(#loc15)
    %6363 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6364 = llvm.select %6362, %6358, %6363 : i1, i32 loc(#loc15)
    %6365 = llvm.xor %6359, %6364 : i32 loc(#loc15)
    %6366 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6367 = llvm.and %5772, %6366 : i32 loc(#loc15)
    %6368 = llvm.icmp "eq" %6367, %6358 : i32 loc(#loc15)
    %6369 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6370 = llvm.select %6368, %6358, %6369 : i1, i32 loc(#loc15)
    %6371 = llvm.xor %6365, %6370 : i32 loc(#loc15)
    %6372 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6373 = llvm.and %5772, %6372 : i32 loc(#loc15)
    %6374 = llvm.icmp "eq" %6373, %6358 : i32 loc(#loc15)
    %6375 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6376 = llvm.select %6374, %6358, %6375 : i1, i32 loc(#loc15)
    %6377 = llvm.xor %6371, %6376 : i32 loc(#loc15)
    %6378 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6379 = llvm.and %5772, %6378 : i32 loc(#loc15)
    %6380 = llvm.icmp "eq" %6379, %6358 : i32 loc(#loc15)
    %6381 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6382 = llvm.select %6380, %6358, %6381 : i1, i32 loc(#loc15)
    %6383 = llvm.xor %6377, %6382 : i32 loc(#loc15)
    %6384 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6385 = llvm.and %5772, %6384 : i32 loc(#loc15)
    %6386 = llvm.icmp "eq" %6385, %6358 : i32 loc(#loc15)
    %6387 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6388 = llvm.select %6386, %6358, %6387 : i1, i32 loc(#loc15)
    %6389 = llvm.xor %6383, %6388 : i32 loc(#loc15)
    %6390 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6391 = llvm.and %5772, %6390 : i32 loc(#loc15)
    %6392 = llvm.icmp "eq" %6391, %6358 : i32 loc(#loc15)
    %6393 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6394 = llvm.select %6392, %6358, %6393 : i1, i32 loc(#loc15)
    %6395 = llvm.xor %6389, %6394 : i32 loc(#loc15)
    %6396 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6397 = llvm.and %5773, %6396 : i32 loc(#loc15)
    %6398 = llvm.icmp "eq" %6397, %6358 : i32 loc(#loc15)
    %6399 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6400 = llvm.select %6398, %6358, %6399 : i1, i32 loc(#loc15)
    %6401 = llvm.xor %6395, %6400 : i32 loc(#loc15)
    %6402 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6403 = llvm.and %5773, %6402 : i32 loc(#loc15)
    %6404 = llvm.icmp "eq" %6403, %6358 : i32 loc(#loc15)
    %6405 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %6406 = llvm.select %6404, %6358, %6405 : i1, i32 loc(#loc15)
    %6407 = llvm.xor %6401, %6406 : i32 loc(#loc15)
    %6408 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6409 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6410 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6411 = llvm.mlir.constant(40 : i32) : i32 loc(#loc15)
    %6412 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6413 = llvm.and %5772, %6412 : i32 loc(#loc15)
    %6414 = llvm.icmp "eq" %6413, %6409 : i32 loc(#loc15)
    %6415 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6416 = llvm.select %6414, %6409, %6415 : i1, i32 loc(#loc15)
    %6417 = llvm.xor %6410, %6416 : i32 loc(#loc15)
    %6418 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6419 = llvm.and %5772, %6418 : i32 loc(#loc15)
    %6420 = llvm.icmp "eq" %6419, %6409 : i32 loc(#loc15)
    %6421 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6422 = llvm.select %6420, %6409, %6421 : i1, i32 loc(#loc15)
    %6423 = llvm.xor %6417, %6422 : i32 loc(#loc15)
    %6424 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6425 = llvm.and %5772, %6424 : i32 loc(#loc15)
    %6426 = llvm.icmp "eq" %6425, %6409 : i32 loc(#loc15)
    %6427 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6428 = llvm.select %6426, %6409, %6427 : i1, i32 loc(#loc15)
    %6429 = llvm.xor %6423, %6428 : i32 loc(#loc15)
    %6430 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6431 = llvm.and %5772, %6430 : i32 loc(#loc15)
    %6432 = llvm.icmp "eq" %6431, %6409 : i32 loc(#loc15)
    %6433 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6434 = llvm.select %6432, %6409, %6433 : i1, i32 loc(#loc15)
    %6435 = llvm.xor %6429, %6434 : i32 loc(#loc15)
    %6436 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6437 = llvm.and %5772, %6436 : i32 loc(#loc15)
    %6438 = llvm.icmp "eq" %6437, %6409 : i32 loc(#loc15)
    %6439 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6440 = llvm.select %6438, %6409, %6439 : i1, i32 loc(#loc15)
    %6441 = llvm.xor %6435, %6440 : i32 loc(#loc15)
    %6442 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6443 = llvm.and %5772, %6442 : i32 loc(#loc15)
    %6444 = llvm.icmp "eq" %6443, %6409 : i32 loc(#loc15)
    %6445 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6446 = llvm.select %6444, %6409, %6445 : i1, i32 loc(#loc15)
    %6447 = llvm.xor %6411, %6446 : i32 loc(#loc15)
    %6448 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6449 = llvm.and %5773, %6448 : i32 loc(#loc15)
    %6450 = llvm.icmp "eq" %6449, %6409 : i32 loc(#loc15)
    %6451 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6452 = llvm.select %6450, %6409, %6451 : i1, i32 loc(#loc15)
    %6453 = llvm.xor %6447, %6452 : i32 loc(#loc15)
    %6454 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6455 = llvm.and %5773, %6454 : i32 loc(#loc15)
    %6456 = llvm.icmp "eq" %6455, %6409 : i32 loc(#loc15)
    %6457 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6458 = llvm.select %6456, %6409, %6457 : i1, i32 loc(#loc15)
    %6459 = llvm.xor %6441, %6458 : i32 loc(#loc15)
    %6460 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6461 = llvm.select %6456, %6409, %6460 : i1, i32 loc(#loc15)
    %6462 = llvm.xor %6453, %6461 : i32 loc(#loc15)
    %6463 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6464 = llvm.mul %6459, %6356 : i32 loc(#loc15)
    %6465 = llvm.add %6463, %6464 : i32 loc(#loc15)
    %6466 = llvm.mul %6462, %6357 : i32 loc(#loc15)
    %6467 = llvm.add %6465, %6466 : i32 loc(#loc15)
    %6468 = llvm.getelementptr inbounds %5760[%6467] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6469 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6470 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6471 = llvm.insertelement %5767, %6469[%6470 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6471, %6468 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6472 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %6473 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6474 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6475 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6476 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc15)
    %6477 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6478 = llvm.and %5772, %6477 : i32 loc(#loc15)
    %6479 = llvm.icmp "eq" %6478, %6475 : i32 loc(#loc15)
    %6480 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6481 = llvm.select %6479, %6475, %6480 : i1, i32 loc(#loc15)
    %6482 = llvm.xor %6476, %6481 : i32 loc(#loc15)
    %6483 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6484 = llvm.and %5772, %6483 : i32 loc(#loc15)
    %6485 = llvm.icmp "eq" %6484, %6475 : i32 loc(#loc15)
    %6486 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6487 = llvm.select %6485, %6475, %6486 : i1, i32 loc(#loc15)
    %6488 = llvm.xor %6482, %6487 : i32 loc(#loc15)
    %6489 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6490 = llvm.and %5772, %6489 : i32 loc(#loc15)
    %6491 = llvm.icmp "eq" %6490, %6475 : i32 loc(#loc15)
    %6492 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6493 = llvm.select %6491, %6475, %6492 : i1, i32 loc(#loc15)
    %6494 = llvm.xor %6488, %6493 : i32 loc(#loc15)
    %6495 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6496 = llvm.and %5772, %6495 : i32 loc(#loc15)
    %6497 = llvm.icmp "eq" %6496, %6475 : i32 loc(#loc15)
    %6498 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6499 = llvm.select %6497, %6475, %6498 : i1, i32 loc(#loc15)
    %6500 = llvm.xor %6494, %6499 : i32 loc(#loc15)
    %6501 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6502 = llvm.and %5772, %6501 : i32 loc(#loc15)
    %6503 = llvm.icmp "eq" %6502, %6475 : i32 loc(#loc15)
    %6504 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6505 = llvm.select %6503, %6475, %6504 : i1, i32 loc(#loc15)
    %6506 = llvm.xor %6500, %6505 : i32 loc(#loc15)
    %6507 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6508 = llvm.and %5772, %6507 : i32 loc(#loc15)
    %6509 = llvm.icmp "eq" %6508, %6475 : i32 loc(#loc15)
    %6510 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6511 = llvm.select %6509, %6475, %6510 : i1, i32 loc(#loc15)
    %6512 = llvm.xor %6506, %6511 : i32 loc(#loc15)
    %6513 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6514 = llvm.and %5773, %6513 : i32 loc(#loc15)
    %6515 = llvm.icmp "eq" %6514, %6475 : i32 loc(#loc15)
    %6516 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6517 = llvm.select %6515, %6475, %6516 : i1, i32 loc(#loc15)
    %6518 = llvm.xor %6512, %6517 : i32 loc(#loc15)
    %6519 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6520 = llvm.and %5773, %6519 : i32 loc(#loc15)
    %6521 = llvm.icmp "eq" %6520, %6475 : i32 loc(#loc15)
    %6522 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %6523 = llvm.select %6521, %6475, %6522 : i1, i32 loc(#loc15)
    %6524 = llvm.xor %6518, %6523 : i32 loc(#loc15)
    %6525 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6526 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6527 = llvm.mlir.constant(48 : i32) : i32 loc(#loc15)
    %6528 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6529 = llvm.and %5772, %6528 : i32 loc(#loc15)
    %6530 = llvm.icmp "eq" %6529, %6526 : i32 loc(#loc15)
    %6531 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6532 = llvm.select %6530, %6526, %6531 : i1, i32 loc(#loc15)
    %6533 = llvm.xor %6526, %6532 : i32 loc(#loc15)
    %6534 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6535 = llvm.and %5772, %6534 : i32 loc(#loc15)
    %6536 = llvm.icmp "eq" %6535, %6526 : i32 loc(#loc15)
    %6537 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6538 = llvm.select %6536, %6526, %6537 : i1, i32 loc(#loc15)
    %6539 = llvm.xor %6533, %6538 : i32 loc(#loc15)
    %6540 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6541 = llvm.and %5772, %6540 : i32 loc(#loc15)
    %6542 = llvm.icmp "eq" %6541, %6526 : i32 loc(#loc15)
    %6543 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6544 = llvm.select %6542, %6526, %6543 : i1, i32 loc(#loc15)
    %6545 = llvm.xor %6539, %6544 : i32 loc(#loc15)
    %6546 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6547 = llvm.and %5772, %6546 : i32 loc(#loc15)
    %6548 = llvm.icmp "eq" %6547, %6526 : i32 loc(#loc15)
    %6549 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6550 = llvm.select %6548, %6526, %6549 : i1, i32 loc(#loc15)
    %6551 = llvm.xor %6545, %6550 : i32 loc(#loc15)
    %6552 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6553 = llvm.and %5772, %6552 : i32 loc(#loc15)
    %6554 = llvm.icmp "eq" %6553, %6526 : i32 loc(#loc15)
    %6555 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6556 = llvm.select %6554, %6526, %6555 : i1, i32 loc(#loc15)
    %6557 = llvm.xor %6551, %6556 : i32 loc(#loc15)
    %6558 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6559 = llvm.and %5772, %6558 : i32 loc(#loc15)
    %6560 = llvm.icmp "eq" %6559, %6526 : i32 loc(#loc15)
    %6561 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6562 = llvm.select %6560, %6526, %6561 : i1, i32 loc(#loc15)
    %6563 = llvm.xor %6527, %6562 : i32 loc(#loc15)
    %6564 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6565 = llvm.and %5773, %6564 : i32 loc(#loc15)
    %6566 = llvm.icmp "eq" %6565, %6526 : i32 loc(#loc15)
    %6567 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6568 = llvm.select %6566, %6526, %6567 : i1, i32 loc(#loc15)
    %6569 = llvm.xor %6563, %6568 : i32 loc(#loc15)
    %6570 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6571 = llvm.and %5773, %6570 : i32 loc(#loc15)
    %6572 = llvm.icmp "eq" %6571, %6526 : i32 loc(#loc15)
    %6573 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6574 = llvm.select %6572, %6526, %6573 : i1, i32 loc(#loc15)
    %6575 = llvm.xor %6557, %6574 : i32 loc(#loc15)
    %6576 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6577 = llvm.select %6572, %6526, %6576 : i1, i32 loc(#loc15)
    %6578 = llvm.xor %6569, %6577 : i32 loc(#loc15)
    %6579 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6580 = llvm.mul %6575, %6473 : i32 loc(#loc15)
    %6581 = llvm.add %6579, %6580 : i32 loc(#loc15)
    %6582 = llvm.mul %6578, %6474 : i32 loc(#loc15)
    %6583 = llvm.add %6581, %6582 : i32 loc(#loc15)
    %6584 = llvm.getelementptr inbounds %5760[%6583] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6585 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6586 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6587 = llvm.insertelement %5768, %6585[%6586 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6587, %6584 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6588 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %6589 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6590 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6591 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6592 = llvm.mlir.constant(1808 : i32) : i32 loc(#loc15)
    %6593 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6594 = llvm.and %5772, %6593 : i32 loc(#loc15)
    %6595 = llvm.icmp "eq" %6594, %6591 : i32 loc(#loc15)
    %6596 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6597 = llvm.select %6595, %6591, %6596 : i1, i32 loc(#loc15)
    %6598 = llvm.xor %6592, %6597 : i32 loc(#loc15)
    %6599 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6600 = llvm.and %5772, %6599 : i32 loc(#loc15)
    %6601 = llvm.icmp "eq" %6600, %6591 : i32 loc(#loc15)
    %6602 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6603 = llvm.select %6601, %6591, %6602 : i1, i32 loc(#loc15)
    %6604 = llvm.xor %6598, %6603 : i32 loc(#loc15)
    %6605 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6606 = llvm.and %5772, %6605 : i32 loc(#loc15)
    %6607 = llvm.icmp "eq" %6606, %6591 : i32 loc(#loc15)
    %6608 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6609 = llvm.select %6607, %6591, %6608 : i1, i32 loc(#loc15)
    %6610 = llvm.xor %6604, %6609 : i32 loc(#loc15)
    %6611 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6612 = llvm.and %5772, %6611 : i32 loc(#loc15)
    %6613 = llvm.icmp "eq" %6612, %6591 : i32 loc(#loc15)
    %6614 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6615 = llvm.select %6613, %6591, %6614 : i1, i32 loc(#loc15)
    %6616 = llvm.xor %6610, %6615 : i32 loc(#loc15)
    %6617 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6618 = llvm.and %5772, %6617 : i32 loc(#loc15)
    %6619 = llvm.icmp "eq" %6618, %6591 : i32 loc(#loc15)
    %6620 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6621 = llvm.select %6619, %6591, %6620 : i1, i32 loc(#loc15)
    %6622 = llvm.xor %6616, %6621 : i32 loc(#loc15)
    %6623 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6624 = llvm.and %5772, %6623 : i32 loc(#loc15)
    %6625 = llvm.icmp "eq" %6624, %6591 : i32 loc(#loc15)
    %6626 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6627 = llvm.select %6625, %6591, %6626 : i1, i32 loc(#loc15)
    %6628 = llvm.xor %6622, %6627 : i32 loc(#loc15)
    %6629 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6630 = llvm.and %5773, %6629 : i32 loc(#loc15)
    %6631 = llvm.icmp "eq" %6630, %6591 : i32 loc(#loc15)
    %6632 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6633 = llvm.select %6631, %6591, %6632 : i1, i32 loc(#loc15)
    %6634 = llvm.xor %6628, %6633 : i32 loc(#loc15)
    %6635 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6636 = llvm.and %5773, %6635 : i32 loc(#loc15)
    %6637 = llvm.icmp "eq" %6636, %6591 : i32 loc(#loc15)
    %6638 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %6639 = llvm.select %6637, %6591, %6638 : i1, i32 loc(#loc15)
    %6640 = llvm.xor %6634, %6639 : i32 loc(#loc15)
    %6641 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6642 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6643 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6644 = llvm.mlir.constant(56 : i32) : i32 loc(#loc15)
    %6645 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6646 = llvm.and %5772, %6645 : i32 loc(#loc15)
    %6647 = llvm.icmp "eq" %6646, %6642 : i32 loc(#loc15)
    %6648 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6649 = llvm.select %6647, %6642, %6648 : i1, i32 loc(#loc15)
    %6650 = llvm.xor %6643, %6649 : i32 loc(#loc15)
    %6651 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6652 = llvm.and %5772, %6651 : i32 loc(#loc15)
    %6653 = llvm.icmp "eq" %6652, %6642 : i32 loc(#loc15)
    %6654 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6655 = llvm.select %6653, %6642, %6654 : i1, i32 loc(#loc15)
    %6656 = llvm.xor %6650, %6655 : i32 loc(#loc15)
    %6657 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6658 = llvm.and %5772, %6657 : i32 loc(#loc15)
    %6659 = llvm.icmp "eq" %6658, %6642 : i32 loc(#loc15)
    %6660 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6661 = llvm.select %6659, %6642, %6660 : i1, i32 loc(#loc15)
    %6662 = llvm.xor %6656, %6661 : i32 loc(#loc15)
    %6663 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6664 = llvm.and %5772, %6663 : i32 loc(#loc15)
    %6665 = llvm.icmp "eq" %6664, %6642 : i32 loc(#loc15)
    %6666 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6667 = llvm.select %6665, %6642, %6666 : i1, i32 loc(#loc15)
    %6668 = llvm.xor %6662, %6667 : i32 loc(#loc15)
    %6669 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6670 = llvm.and %5772, %6669 : i32 loc(#loc15)
    %6671 = llvm.icmp "eq" %6670, %6642 : i32 loc(#loc15)
    %6672 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6673 = llvm.select %6671, %6642, %6672 : i1, i32 loc(#loc15)
    %6674 = llvm.xor %6668, %6673 : i32 loc(#loc15)
    %6675 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6676 = llvm.and %5772, %6675 : i32 loc(#loc15)
    %6677 = llvm.icmp "eq" %6676, %6642 : i32 loc(#loc15)
    %6678 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6679 = llvm.select %6677, %6642, %6678 : i1, i32 loc(#loc15)
    %6680 = llvm.xor %6644, %6679 : i32 loc(#loc15)
    %6681 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6682 = llvm.and %5773, %6681 : i32 loc(#loc15)
    %6683 = llvm.icmp "eq" %6682, %6642 : i32 loc(#loc15)
    %6684 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6685 = llvm.select %6683, %6642, %6684 : i1, i32 loc(#loc15)
    %6686 = llvm.xor %6680, %6685 : i32 loc(#loc15)
    %6687 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6688 = llvm.and %5773, %6687 : i32 loc(#loc15)
    %6689 = llvm.icmp "eq" %6688, %6642 : i32 loc(#loc15)
    %6690 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6691 = llvm.select %6689, %6642, %6690 : i1, i32 loc(#loc15)
    %6692 = llvm.xor %6674, %6691 : i32 loc(#loc15)
    %6693 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6694 = llvm.select %6689, %6642, %6693 : i1, i32 loc(#loc15)
    %6695 = llvm.xor %6686, %6694 : i32 loc(#loc15)
    %6696 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6697 = llvm.mul %6692, %6589 : i32 loc(#loc15)
    %6698 = llvm.add %6696, %6697 : i32 loc(#loc15)
    %6699 = llvm.mul %6695, %6590 : i32 loc(#loc15)
    %6700 = llvm.add %6698, %6699 : i32 loc(#loc15)
    %6701 = llvm.getelementptr inbounds %5760[%6700] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6702 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %6703 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6704 = llvm.insertelement %5769, %6702[%6703 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %6704, %6701 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %6705 = llvm.mlir.undef : !llvm.struct<(ptr<3>, i32, i32)> loc(#loc15)
    %6706 = llvm.insertvalue %5760, %6705[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %6707 = llvm.insertvalue %5761, %6706[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %6708 = llvm.insertvalue %5761, %6707[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    rocdl.barrier loc(#loc15)
    %6709 = llvm.extractvalue %6708[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %6710 = llvm.extractvalue %6708[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %6711 = llvm.extractvalue %6708[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %6712 = rocdl.workitem.id.x : i32 loc(#loc15)
    %6713 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %6714 = llvm.udiv %6712, %6713 : i32 loc(#loc15)
    %6715 = llvm.urem %6712, %6713 : i32 loc(#loc15)
    %6716 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6717 = llvm.urem %6714, %6716 : i32 loc(#loc15)
    %6718 = llvm.udiv %6714, %6716 : i32 loc(#loc15)
    %6719 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6720 = llvm.urem %6718, %6719 : i32 loc(#loc15)
    %6721 = llvm.udiv %6718, %6719 : i32 loc(#loc15)
    %6722 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6723 = llvm.urem %6720, %6722 : i32 loc(#loc15)
    %6724 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6725 = llvm.urem %6714, %6724 : i32 loc(#loc15)
    %6726 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6727 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6728 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6729 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6730 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6731 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %6732 = llvm.mul %6723, %6731 : i32 loc(#loc15)
    %6733 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6734 = llvm.urem %6715, %6730 : i32 loc(#loc15)
    %6735 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6736 = llvm.icmp "uge" %6715, %6729 : i32 loc(#loc15)
    %6737 = llvm.select %6736, %6735, %6728 : i1, i32 loc(#loc15)
    %6738 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6739 = llvm.add %6728, %6734 : i32 loc(#loc15)
    %6740 = llvm.add %6739, %6728 : i32 loc(#loc15)
    %6741 = llvm.add %6740, %6732 : i32 loc(#loc15)
    %6742 = llvm.add %6733, %6737 : i32 loc(#loc15)
    %6743 = llvm.add %6742, %6738 : i32 loc(#loc15)
    %6744 = llvm.add %6741, %6710 : i32 loc(#loc15)
    %6745 = llvm.add %6743, %6711 : i32 loc(#loc15)
    %6746 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %6747 = llvm.urem %6715, %6730 : i32 loc(#loc15)
    %6748 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6749 = llvm.icmp "uge" %6715, %6729 : i32 loc(#loc15)
    %6750 = llvm.select %6749, %6748, %6728 : i1, i32 loc(#loc15)
    %6751 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6752 = llvm.add %6728, %6747 : i32 loc(#loc15)
    %6753 = llvm.add %6752, %6728 : i32 loc(#loc15)
    %6754 = llvm.add %6753, %6732 : i32 loc(#loc15)
    %6755 = llvm.add %6746, %6750 : i32 loc(#loc15)
    %6756 = llvm.add %6755, %6751 : i32 loc(#loc15)
    %6757 = llvm.add %6754, %6710 : i32 loc(#loc15)
    %6758 = llvm.add %6756, %6711 : i32 loc(#loc15)
    %6759 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6760 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6761 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6762 = llvm.udiv %6744, %6760 : i32 loc(#loc15)
    %6763 = llvm.urem %6762, %6761 : i32 loc(#loc15)
    %6764 = llvm.udiv %6745, %6759 : i32 loc(#loc15)
    %6765 = llvm.xor %6764, %6763 : i32 loc(#loc15)
    %6766 = llvm.mul %6765, %6759 : i32 loc(#loc15)
    %6767 = llvm.urem %6745, %6759 : i32 loc(#loc15)
    %6768 = llvm.add %6766, %6767 : i32 loc(#loc15)
    %6769 = llvm.mul %6744, %6727 : i32 loc(#loc15)
    %6770 = llvm.mul %6768, %6726 : i32 loc(#loc15)
    %6771 = llvm.add %6769, %6770 : i32 loc(#loc15)
    %6772 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %6773 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6774 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6775 = llvm.udiv %6757, %6773 : i32 loc(#loc15)
    %6776 = llvm.urem %6775, %6774 : i32 loc(#loc15)
    %6777 = llvm.udiv %6758, %6772 : i32 loc(#loc15)
    %6778 = llvm.xor %6777, %6776 : i32 loc(#loc15)
    %6779 = llvm.mul %6778, %6772 : i32 loc(#loc15)
    %6780 = llvm.urem %6758, %6772 : i32 loc(#loc15)
    %6781 = llvm.add %6779, %6780 : i32 loc(#loc15)
    %6782 = llvm.mul %6757, %6727 : i32 loc(#loc15)
    %6783 = llvm.mul %6781, %6726 : i32 loc(#loc15)
    %6784 = llvm.add %6782, %6783 : i32 loc(#loc15)
    %6785 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6786 = llvm.mul %6785, %6727 : i32 loc(#loc15)
    %6787 = llvm.add %6786, %6771 : i32 loc(#loc15)
    %6788 = llvm.add %6786, %6784 : i32 loc(#loc15)
    %6789 = llvm.mul %6710, %6727 : i32 loc(#loc15)
    %6790 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6791 = llvm.sub %6790, %6789 : i32 loc(#loc15)
    %6792 = llvm.getelementptr %6709[%6791] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6793 = llvm.mul %6711, %6726 : i32 loc(#loc15)
    %6794 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6795 = llvm.sub %6794, %6793 : i32 loc(#loc15)
    %6796 = llvm.getelementptr %6792[%6795] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6797 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6798 = llvm.add %6725, %6797 : i32 loc(#loc15)
    %6799 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc15)
    %6800 = llvm.mul %6799, %6798 : i32 loc(#loc15)
    %6801 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6802 = llvm.add %6787, %6800 : i32 loc(#loc15)
    %6803 = llvm.getelementptr %6796[%6802] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6804 = llvm.load %6803 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc15)
    %6805 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6806 = llvm.extractelement %6804[%6805 : i32] : vector<8xbf16> loc(#loc15)
    %6807 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6808 = llvm.extractelement %6804[%6807 : i32] : vector<8xbf16> loc(#loc15)
    %6809 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6810 = llvm.extractelement %6804[%6809 : i32] : vector<8xbf16> loc(#loc15)
    %6811 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %6812 = llvm.extractelement %6804[%6811 : i32] : vector<8xbf16> loc(#loc15)
    %6813 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6814 = llvm.extractelement %6804[%6813 : i32] : vector<8xbf16> loc(#loc15)
    %6815 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %6816 = llvm.extractelement %6804[%6815 : i32] : vector<8xbf16> loc(#loc15)
    %6817 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %6818 = llvm.extractelement %6804[%6817 : i32] : vector<8xbf16> loc(#loc15)
    %6819 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %6820 = llvm.extractelement %6804[%6819 : i32] : vector<8xbf16> loc(#loc15)
    %6821 = llvm.add %6788, %6800 : i32 loc(#loc15)
    %6822 = llvm.getelementptr %6796[%6821] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %6823 = llvm.load %6822 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc15)
    %6824 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %6825 = llvm.extractelement %6823[%6824 : i32] : vector<8xbf16> loc(#loc15)
    %6826 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %6827 = llvm.extractelement %6823[%6826 : i32] : vector<8xbf16> loc(#loc15)
    %6828 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %6829 = llvm.extractelement %6823[%6828 : i32] : vector<8xbf16> loc(#loc15)
    %6830 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %6831 = llvm.extractelement %6823[%6830 : i32] : vector<8xbf16> loc(#loc15)
    %6832 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %6833 = llvm.extractelement %6823[%6832 : i32] : vector<8xbf16> loc(#loc15)
    %6834 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %6835 = llvm.extractelement %6823[%6834 : i32] : vector<8xbf16> loc(#loc15)
    %6836 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %6837 = llvm.extractelement %6823[%6836 : i32] : vector<8xbf16> loc(#loc15)
    %6838 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %6839 = llvm.extractelement %6823[%6838 : i32] : vector<8xbf16> loc(#loc15)
    %6840 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc15)
    %6841 = llvm.insertvalue %6806, %6840[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6842 = llvm.insertvalue %6808, %6841[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6843 = llvm.insertvalue %6810, %6842[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6844 = llvm.insertvalue %6812, %6843[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6845 = llvm.insertvalue %6814, %6844[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6846 = llvm.insertvalue %6816, %6845[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6847 = llvm.insertvalue %6818, %6846[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6848 = llvm.insertvalue %6820, %6847[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6849 = llvm.insertvalue %6825, %6848[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6850 = llvm.insertvalue %6827, %6849[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6851 = llvm.insertvalue %6829, %6850[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6852 = llvm.insertvalue %6831, %6851[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6853 = llvm.insertvalue %6833, %6852[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6854 = llvm.insertvalue %6835, %6853[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6855 = llvm.insertvalue %6837, %6854[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %6856 = llvm.insertvalue %6839, %6855[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    llvm.cond_br %4657, ^bb4, ^bb5 loc(#loc27)
  ^bb4:  // pred: ^bb3
    %6857 = llvm.extractvalue %6856[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6858 = llvm.extractvalue %6856[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6859 = llvm.extractvalue %6856[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6860 = llvm.extractvalue %6856[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6861 = llvm.extractvalue %6856[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6862 = llvm.extractvalue %6856[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6863 = llvm.extractvalue %6856[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6864 = llvm.extractvalue %6856[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6865 = llvm.extractvalue %6856[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6866 = llvm.extractvalue %6856[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6867 = llvm.extractvalue %6856[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6868 = llvm.extractvalue %6856[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6869 = llvm.extractvalue %6856[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6870 = llvm.extractvalue %6856[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6871 = llvm.extractvalue %6856[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6872 = llvm.extractvalue %6856[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6873 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %6874 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6875 = llvm.insertelement %6857, %6873[%6874 : i32] : vector<8xbf16> loc(#loc27)
    %6876 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6877 = llvm.insertelement %6858, %6875[%6876 : i32] : vector<8xbf16> loc(#loc27)
    %6878 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6879 = llvm.insertelement %6859, %6877[%6878 : i32] : vector<8xbf16> loc(#loc27)
    %6880 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6881 = llvm.insertelement %6860, %6879[%6880 : i32] : vector<8xbf16> loc(#loc27)
    %6882 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6883 = llvm.insertelement %6861, %6881[%6882 : i32] : vector<8xbf16> loc(#loc27)
    %6884 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %6885 = llvm.insertelement %6862, %6883[%6884 : i32] : vector<8xbf16> loc(#loc27)
    %6886 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %6887 = llvm.insertelement %6863, %6885[%6886 : i32] : vector<8xbf16> loc(#loc27)
    %6888 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %6889 = llvm.insertelement %6864, %6887[%6888 : i32] : vector<8xbf16> loc(#loc27)
    %6890 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %6891 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6892 = llvm.extractelement %6889[%6891 : i32] : vector<8xbf16> loc(#loc27)
    %6893 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6894 = llvm.insertelement %6892, %6890[%6893 : i32] : vector<8xbf16> loc(#loc27)
    %6895 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6896 = llvm.extractelement %6889[%6895 : i32] : vector<8xbf16> loc(#loc27)
    %6897 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6898 = llvm.insertelement %6896, %6894[%6897 : i32] : vector<8xbf16> loc(#loc27)
    %6899 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6900 = llvm.extractelement %6889[%6899 : i32] : vector<8xbf16> loc(#loc27)
    %6901 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6902 = llvm.insertelement %6900, %6898[%6901 : i32] : vector<8xbf16> loc(#loc27)
    %6903 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6904 = llvm.extractelement %6889[%6903 : i32] : vector<8xbf16> loc(#loc27)
    %6905 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6906 = llvm.insertelement %6904, %6902[%6905 : i32] : vector<8xbf16> loc(#loc27)
    %6907 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6908 = llvm.extractelement %6889[%6907 : i32] : vector<8xbf16> loc(#loc27)
    %6909 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6910 = llvm.insertelement %6908, %6906[%6909 : i32] : vector<8xbf16> loc(#loc27)
    %6911 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %6912 = llvm.extractelement %6889[%6911 : i32] : vector<8xbf16> loc(#loc27)
    %6913 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %6914 = llvm.insertelement %6912, %6910[%6913 : i32] : vector<8xbf16> loc(#loc27)
    %6915 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %6916 = llvm.extractelement %6889[%6915 : i32] : vector<8xbf16> loc(#loc27)
    %6917 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %6918 = llvm.insertelement %6916, %6914[%6917 : i32] : vector<8xbf16> loc(#loc27)
    %6919 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %6920 = llvm.extractelement %6889[%6919 : i32] : vector<8xbf16> loc(#loc27)
    %6921 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %6922 = llvm.insertelement %6920, %6918[%6921 : i32] : vector<8xbf16> loc(#loc27)
    %6923 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %6924 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6925 = llvm.insertelement %6865, %6923[%6924 : i32] : vector<8xbf16> loc(#loc27)
    %6926 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6927 = llvm.insertelement %6866, %6925[%6926 : i32] : vector<8xbf16> loc(#loc27)
    %6928 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6929 = llvm.insertelement %6867, %6927[%6928 : i32] : vector<8xbf16> loc(#loc27)
    %6930 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6931 = llvm.insertelement %6868, %6929[%6930 : i32] : vector<8xbf16> loc(#loc27)
    %6932 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6933 = llvm.insertelement %6869, %6931[%6932 : i32] : vector<8xbf16> loc(#loc27)
    %6934 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %6935 = llvm.insertelement %6870, %6933[%6934 : i32] : vector<8xbf16> loc(#loc27)
    %6936 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %6937 = llvm.insertelement %6871, %6935[%6936 : i32] : vector<8xbf16> loc(#loc27)
    %6938 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %6939 = llvm.insertelement %6872, %6937[%6938 : i32] : vector<8xbf16> loc(#loc27)
    %6940 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %6941 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6942 = llvm.extractelement %6939[%6941 : i32] : vector<8xbf16> loc(#loc27)
    %6943 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6944 = llvm.insertelement %6942, %6940[%6943 : i32] : vector<8xbf16> loc(#loc27)
    %6945 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6946 = llvm.extractelement %6939[%6945 : i32] : vector<8xbf16> loc(#loc27)
    %6947 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6948 = llvm.insertelement %6946, %6944[%6947 : i32] : vector<8xbf16> loc(#loc27)
    %6949 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6950 = llvm.extractelement %6939[%6949 : i32] : vector<8xbf16> loc(#loc27)
    %6951 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6952 = llvm.insertelement %6950, %6948[%6951 : i32] : vector<8xbf16> loc(#loc27)
    %6953 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6954 = llvm.extractelement %6939[%6953 : i32] : vector<8xbf16> loc(#loc27)
    %6955 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6956 = llvm.insertelement %6954, %6952[%6955 : i32] : vector<8xbf16> loc(#loc27)
    %6957 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6958 = llvm.extractelement %6939[%6957 : i32] : vector<8xbf16> loc(#loc27)
    %6959 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6960 = llvm.insertelement %6958, %6956[%6959 : i32] : vector<8xbf16> loc(#loc27)
    %6961 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %6962 = llvm.extractelement %6939[%6961 : i32] : vector<8xbf16> loc(#loc27)
    %6963 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %6964 = llvm.insertelement %6962, %6960[%6963 : i32] : vector<8xbf16> loc(#loc27)
    %6965 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %6966 = llvm.extractelement %6939[%6965 : i32] : vector<8xbf16> loc(#loc27)
    %6967 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %6968 = llvm.insertelement %6966, %6964[%6967 : i32] : vector<8xbf16> loc(#loc27)
    %6969 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %6970 = llvm.extractelement %6939[%6969 : i32] : vector<8xbf16> loc(#loc27)
    %6971 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %6972 = llvm.insertelement %6970, %6968[%6971 : i32] : vector<8xbf16> loc(#loc27)
    %6973 = llvm.extractvalue %5757[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6974 = llvm.extractvalue %5757[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6975 = llvm.extractvalue %5757[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6976 = llvm.extractvalue %5757[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6977 = llvm.extractvalue %5757[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6978 = llvm.extractvalue %5757[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6979 = llvm.extractvalue %5757[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6980 = llvm.extractvalue %5757[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6981 = llvm.extractvalue %5757[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6982 = llvm.extractvalue %5757[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6983 = llvm.extractvalue %5757[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6984 = llvm.extractvalue %5757[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6985 = llvm.extractvalue %5757[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6986 = llvm.extractvalue %5757[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6987 = llvm.extractvalue %5757[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6988 = llvm.extractvalue %5757[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %6989 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %6990 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %6991 = llvm.insertelement %6973, %6989[%6990 : i32] : vector<8xbf16> loc(#loc27)
    %6992 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %6993 = llvm.insertelement %6974, %6991[%6992 : i32] : vector<8xbf16> loc(#loc27)
    %6994 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %6995 = llvm.insertelement %6975, %6993[%6994 : i32] : vector<8xbf16> loc(#loc27)
    %6996 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %6997 = llvm.insertelement %6976, %6995[%6996 : i32] : vector<8xbf16> loc(#loc27)
    %6998 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %6999 = llvm.insertelement %6977, %6997[%6998 : i32] : vector<8xbf16> loc(#loc27)
    %7000 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7001 = llvm.insertelement %6978, %6999[%7000 : i32] : vector<8xbf16> loc(#loc27)
    %7002 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7003 = llvm.insertelement %6979, %7001[%7002 : i32] : vector<8xbf16> loc(#loc27)
    %7004 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7005 = llvm.insertelement %6980, %7003[%7004 : i32] : vector<8xbf16> loc(#loc27)
    %7006 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %7007 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7008 = llvm.extractelement %7005[%7007 : i32] : vector<8xbf16> loc(#loc27)
    %7009 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7010 = llvm.insertelement %7008, %7006[%7009 : i32] : vector<8xbf16> loc(#loc27)
    %7011 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7012 = llvm.extractelement %7005[%7011 : i32] : vector<8xbf16> loc(#loc27)
    %7013 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7014 = llvm.insertelement %7012, %7010[%7013 : i32] : vector<8xbf16> loc(#loc27)
    %7015 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7016 = llvm.extractelement %7005[%7015 : i32] : vector<8xbf16> loc(#loc27)
    %7017 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7018 = llvm.insertelement %7016, %7014[%7017 : i32] : vector<8xbf16> loc(#loc27)
    %7019 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7020 = llvm.extractelement %7005[%7019 : i32] : vector<8xbf16> loc(#loc27)
    %7021 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7022 = llvm.insertelement %7020, %7018[%7021 : i32] : vector<8xbf16> loc(#loc27)
    %7023 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7024 = llvm.extractelement %7005[%7023 : i32] : vector<8xbf16> loc(#loc27)
    %7025 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7026 = llvm.insertelement %7024, %7022[%7025 : i32] : vector<8xbf16> loc(#loc27)
    %7027 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7028 = llvm.extractelement %7005[%7027 : i32] : vector<8xbf16> loc(#loc27)
    %7029 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7030 = llvm.insertelement %7028, %7026[%7029 : i32] : vector<8xbf16> loc(#loc27)
    %7031 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7032 = llvm.extractelement %7005[%7031 : i32] : vector<8xbf16> loc(#loc27)
    %7033 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7034 = llvm.insertelement %7032, %7030[%7033 : i32] : vector<8xbf16> loc(#loc27)
    %7035 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7036 = llvm.extractelement %7005[%7035 : i32] : vector<8xbf16> loc(#loc27)
    %7037 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7038 = llvm.insertelement %7036, %7034[%7037 : i32] : vector<8xbf16> loc(#loc27)
    %7039 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %7040 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7041 = llvm.insertelement %6981, %7039[%7040 : i32] : vector<8xbf16> loc(#loc27)
    %7042 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7043 = llvm.insertelement %6982, %7041[%7042 : i32] : vector<8xbf16> loc(#loc27)
    %7044 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7045 = llvm.insertelement %6983, %7043[%7044 : i32] : vector<8xbf16> loc(#loc27)
    %7046 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7047 = llvm.insertelement %6984, %7045[%7046 : i32] : vector<8xbf16> loc(#loc27)
    %7048 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7049 = llvm.insertelement %6985, %7047[%7048 : i32] : vector<8xbf16> loc(#loc27)
    %7050 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7051 = llvm.insertelement %6986, %7049[%7050 : i32] : vector<8xbf16> loc(#loc27)
    %7052 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7053 = llvm.insertelement %6987, %7051[%7052 : i32] : vector<8xbf16> loc(#loc27)
    %7054 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7055 = llvm.insertelement %6988, %7053[%7054 : i32] : vector<8xbf16> loc(#loc27)
    %7056 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %7057 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7058 = llvm.extractelement %7055[%7057 : i32] : vector<8xbf16> loc(#loc27)
    %7059 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7060 = llvm.insertelement %7058, %7056[%7059 : i32] : vector<8xbf16> loc(#loc27)
    %7061 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7062 = llvm.extractelement %7055[%7061 : i32] : vector<8xbf16> loc(#loc27)
    %7063 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7064 = llvm.insertelement %7062, %7060[%7063 : i32] : vector<8xbf16> loc(#loc27)
    %7065 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7066 = llvm.extractelement %7055[%7065 : i32] : vector<8xbf16> loc(#loc27)
    %7067 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7068 = llvm.insertelement %7066, %7064[%7067 : i32] : vector<8xbf16> loc(#loc27)
    %7069 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7070 = llvm.extractelement %7055[%7069 : i32] : vector<8xbf16> loc(#loc27)
    %7071 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7072 = llvm.insertelement %7070, %7068[%7071 : i32] : vector<8xbf16> loc(#loc27)
    %7073 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7074 = llvm.extractelement %7055[%7073 : i32] : vector<8xbf16> loc(#loc27)
    %7075 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7076 = llvm.insertelement %7074, %7072[%7075 : i32] : vector<8xbf16> loc(#loc27)
    %7077 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7078 = llvm.extractelement %7055[%7077 : i32] : vector<8xbf16> loc(#loc27)
    %7079 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7080 = llvm.insertelement %7078, %7076[%7079 : i32] : vector<8xbf16> loc(#loc27)
    %7081 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7082 = llvm.extractelement %7055[%7081 : i32] : vector<8xbf16> loc(#loc27)
    %7083 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7084 = llvm.insertelement %7082, %7080[%7083 : i32] : vector<8xbf16> loc(#loc27)
    %7085 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7086 = llvm.extractelement %7055[%7085 : i32] : vector<8xbf16> loc(#loc27)
    %7087 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7088 = llvm.insertelement %7086, %7084[%7087 : i32] : vector<8xbf16> loc(#loc27)
    %7089 = llvm.extractvalue %1751[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7090 = llvm.extractvalue %1751[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7091 = llvm.extractvalue %1751[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7092 = llvm.extractvalue %1751[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7093 = llvm.extractvalue %1751[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7094 = llvm.extractvalue %1751[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7095 = llvm.extractvalue %1751[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7096 = llvm.extractvalue %1751[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7097 = llvm.extractvalue %1751[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7098 = llvm.extractvalue %1751[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7099 = llvm.extractvalue %1751[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7100 = llvm.extractvalue %1751[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7101 = llvm.extractvalue %1751[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7102 = llvm.extractvalue %1751[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7103 = llvm.extractvalue %1751[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7104 = llvm.extractvalue %1751[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7105 = llvm.mlir.undef : vector<16xf32> loc(#loc27)
    %7106 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7107 = llvm.insertelement %7089, %7105[%7106 : i32] : vector<16xf32> loc(#loc27)
    %7108 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7109 = llvm.insertelement %7090, %7107[%7108 : i32] : vector<16xf32> loc(#loc27)
    %7110 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7111 = llvm.insertelement %7091, %7109[%7110 : i32] : vector<16xf32> loc(#loc27)
    %7112 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7113 = llvm.insertelement %7092, %7111[%7112 : i32] : vector<16xf32> loc(#loc27)
    %7114 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7115 = llvm.insertelement %7093, %7113[%7114 : i32] : vector<16xf32> loc(#loc27)
    %7116 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7117 = llvm.insertelement %7094, %7115[%7116 : i32] : vector<16xf32> loc(#loc27)
    %7118 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7119 = llvm.insertelement %7095, %7117[%7118 : i32] : vector<16xf32> loc(#loc27)
    %7120 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7121 = llvm.insertelement %7096, %7119[%7120 : i32] : vector<16xf32> loc(#loc27)
    %7122 = llvm.mlir.constant(8 : i32) : i32 loc(#loc27)
    %7123 = llvm.insertelement %7097, %7121[%7122 : i32] : vector<16xf32> loc(#loc27)
    %7124 = llvm.mlir.constant(9 : i32) : i32 loc(#loc27)
    %7125 = llvm.insertelement %7098, %7123[%7124 : i32] : vector<16xf32> loc(#loc27)
    %7126 = llvm.mlir.constant(10 : i32) : i32 loc(#loc27)
    %7127 = llvm.insertelement %7099, %7125[%7126 : i32] : vector<16xf32> loc(#loc27)
    %7128 = llvm.mlir.constant(11 : i32) : i32 loc(#loc27)
    %7129 = llvm.insertelement %7100, %7127[%7128 : i32] : vector<16xf32> loc(#loc27)
    %7130 = llvm.mlir.constant(12 : i32) : i32 loc(#loc27)
    %7131 = llvm.insertelement %7101, %7129[%7130 : i32] : vector<16xf32> loc(#loc27)
    %7132 = llvm.mlir.constant(13 : i32) : i32 loc(#loc27)
    %7133 = llvm.insertelement %7102, %7131[%7132 : i32] : vector<16xf32> loc(#loc27)
    %7134 = llvm.mlir.constant(14 : i32) : i32 loc(#loc27)
    %7135 = llvm.insertelement %7103, %7133[%7134 : i32] : vector<16xf32> loc(#loc27)
    %7136 = llvm.mlir.constant(15 : i32) : i32 loc(#loc27)
    %7137 = llvm.insertelement %7104, %7135[%7136 : i32] : vector<16xf32> loc(#loc27)
    %7138 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7139 = rocdl.mfma.f32.32x32x16.bf16 %7038, %6922, %7137, %7138, %7138, %7138 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc27)
    %7140 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7141 = rocdl.mfma.f32.32x32x16.bf16 %7088, %6972, %7139, %7140, %7140, %7140 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc27)
    %7142 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %7143 = llvm.extractelement %7141[%7142 : i32] : vector<16xf32> loc(#loc27)
    %7144 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %7145 = llvm.extractelement %7141[%7144 : i32] : vector<16xf32> loc(#loc27)
    %7146 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %7147 = llvm.extractelement %7141[%7146 : i32] : vector<16xf32> loc(#loc27)
    %7148 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %7149 = llvm.extractelement %7141[%7148 : i32] : vector<16xf32> loc(#loc27)
    %7150 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %7151 = llvm.extractelement %7141[%7150 : i32] : vector<16xf32> loc(#loc27)
    %7152 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %7153 = llvm.extractelement %7141[%7152 : i32] : vector<16xf32> loc(#loc27)
    %7154 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %7155 = llvm.extractelement %7141[%7154 : i32] : vector<16xf32> loc(#loc27)
    %7156 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %7157 = llvm.extractelement %7141[%7156 : i32] : vector<16xf32> loc(#loc27)
    %7158 = llvm.mlir.constant(8 : i32) : i32 loc(#loc27)
    %7159 = llvm.extractelement %7141[%7158 : i32] : vector<16xf32> loc(#loc27)
    %7160 = llvm.mlir.constant(9 : i32) : i32 loc(#loc27)
    %7161 = llvm.extractelement %7141[%7160 : i32] : vector<16xf32> loc(#loc27)
    %7162 = llvm.mlir.constant(10 : i32) : i32 loc(#loc27)
    %7163 = llvm.extractelement %7141[%7162 : i32] : vector<16xf32> loc(#loc27)
    %7164 = llvm.mlir.constant(11 : i32) : i32 loc(#loc27)
    %7165 = llvm.extractelement %7141[%7164 : i32] : vector<16xf32> loc(#loc27)
    %7166 = llvm.mlir.constant(12 : i32) : i32 loc(#loc27)
    %7167 = llvm.extractelement %7141[%7166 : i32] : vector<16xf32> loc(#loc27)
    %7168 = llvm.mlir.constant(13 : i32) : i32 loc(#loc27)
    %7169 = llvm.extractelement %7141[%7168 : i32] : vector<16xf32> loc(#loc27)
    %7170 = llvm.mlir.constant(14 : i32) : i32 loc(#loc27)
    %7171 = llvm.extractelement %7141[%7170 : i32] : vector<16xf32> loc(#loc27)
    %7172 = llvm.mlir.constant(15 : i32) : i32 loc(#loc27)
    %7173 = llvm.extractelement %7141[%7172 : i32] : vector<16xf32> loc(#loc27)
    %7174 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc27)
    %7175 = llvm.insertvalue %7143, %7174[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7176 = llvm.insertvalue %7145, %7175[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7177 = llvm.insertvalue %7147, %7176[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7178 = llvm.insertvalue %7149, %7177[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7179 = llvm.insertvalue %7151, %7178[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7180 = llvm.insertvalue %7153, %7179[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7181 = llvm.insertvalue %7155, %7180[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7182 = llvm.insertvalue %7157, %7181[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7183 = llvm.insertvalue %7159, %7182[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7184 = llvm.insertvalue %7161, %7183[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7185 = llvm.insertvalue %7163, %7184[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7186 = llvm.insertvalue %7165, %7185[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7187 = llvm.insertvalue %7167, %7186[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7188 = llvm.insertvalue %7169, %7187[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7189 = llvm.insertvalue %7171, %7188[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7190 = llvm.insertvalue %7173, %7189[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %7191 = builtin.unrealized_conversion_cast %7190 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x64xf32, #mma> loc(#loc27)
    %7192 = builtin.unrealized_conversion_cast %7191 : tensor<64x64xf32, #mma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc27)
    llvm.br ^bb6(%7192 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc27)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%1751 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc27)
  ^bb6(%7193: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    %7194 = llvm.extractvalue %7193[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7195 = llvm.extractvalue %7193[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7196 = llvm.extractvalue %7193[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7197 = llvm.extractvalue %7193[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7198 = llvm.extractvalue %7193[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7199 = llvm.extractvalue %7193[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7200 = llvm.extractvalue %7193[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7201 = llvm.extractvalue %7193[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7202 = llvm.extractvalue %7193[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7203 = llvm.extractvalue %7193[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7204 = llvm.extractvalue %7193[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7205 = llvm.extractvalue %7193[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7206 = llvm.extractvalue %7193[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7207 = llvm.extractvalue %7193[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7208 = llvm.extractvalue %7193[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7209 = llvm.extractvalue %7193[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7210 = llvm.extractvalue %1751[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7211 = llvm.extractvalue %1751[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7212 = llvm.extractvalue %1751[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7213 = llvm.extractvalue %1751[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7214 = llvm.extractvalue %1751[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7215 = llvm.extractvalue %1751[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7216 = llvm.extractvalue %1751[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7217 = llvm.extractvalue %1751[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7218 = llvm.extractvalue %1751[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7219 = llvm.extractvalue %1751[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7220 = llvm.extractvalue %1751[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7221 = llvm.extractvalue %1751[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7222 = llvm.extractvalue %1751[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7223 = llvm.extractvalue %1751[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7224 = llvm.extractvalue %1751[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7225 = llvm.extractvalue %1751[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7226 = llvm.select %4657, %7194, %7210 : i1, f32 loc(#loc2)
    %7227 = llvm.select %4657, %7195, %7211 : i1, f32 loc(#loc2)
    %7228 = llvm.select %4657, %7196, %7212 : i1, f32 loc(#loc2)
    %7229 = llvm.select %4657, %7197, %7213 : i1, f32 loc(#loc2)
    %7230 = llvm.select %4657, %7198, %7214 : i1, f32 loc(#loc2)
    %7231 = llvm.select %4657, %7199, %7215 : i1, f32 loc(#loc2)
    %7232 = llvm.select %4657, %7200, %7216 : i1, f32 loc(#loc2)
    %7233 = llvm.select %4657, %7201, %7217 : i1, f32 loc(#loc2)
    %7234 = llvm.select %4657, %7202, %7218 : i1, f32 loc(#loc2)
    %7235 = llvm.select %4657, %7203, %7219 : i1, f32 loc(#loc2)
    %7236 = llvm.select %4657, %7204, %7220 : i1, f32 loc(#loc2)
    %7237 = llvm.select %4657, %7205, %7221 : i1, f32 loc(#loc2)
    %7238 = llvm.select %4657, %7206, %7222 : i1, f32 loc(#loc2)
    %7239 = llvm.select %4657, %7207, %7223 : i1, f32 loc(#loc2)
    %7240 = llvm.select %4657, %7208, %7224 : i1, f32 loc(#loc2)
    %7241 = llvm.select %4657, %7209, %7225 : i1, f32 loc(#loc2)
    %7242 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %7243 = llvm.insertvalue %7226, %7242[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7244 = llvm.insertvalue %7227, %7243[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7245 = llvm.insertvalue %7228, %7244[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7246 = llvm.insertvalue %7229, %7245[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7247 = llvm.insertvalue %7230, %7246[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7248 = llvm.insertvalue %7231, %7247[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7249 = llvm.insertvalue %7232, %7248[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7250 = llvm.insertvalue %7233, %7249[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7251 = llvm.insertvalue %7234, %7250[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7252 = llvm.insertvalue %7235, %7251[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7253 = llvm.insertvalue %7236, %7252[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7254 = llvm.insertvalue %7237, %7253[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7255 = llvm.insertvalue %7238, %7254[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7256 = llvm.insertvalue %7239, %7255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7257 = llvm.insertvalue %7240, %7256[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7258 = llvm.insertvalue %7241, %7257[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %7259 = builtin.unrealized_conversion_cast %7258 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x64xf32, #mma> loc(#loc2)
    %7260 = builtin.unrealized_conversion_cast %7259 : tensor<64x64xf32, #mma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc27)
    rocdl.barrier loc(#loc26)
    %7261 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7262 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %7263 = llvm.getelementptr %7262[%7261] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc26)
    %7264 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7265 = llvm.extractvalue %1753[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7266 = llvm.extractvalue %1753[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7267 = llvm.extractvalue %1753[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7268 = llvm.extractvalue %1753[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7269 = llvm.extractvalue %1753[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7270 = llvm.extractvalue %1753[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7271 = llvm.extractvalue %1753[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7272 = llvm.extractvalue %1753[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %7273 = rocdl.workitem.id.x : i32 loc(#loc26)
    %7274 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7275 = llvm.urem %7273, %7274 : i32 loc(#loc26)
    %7276 = llvm.udiv %7273, %7274 : i32 loc(#loc26)
    %7277 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7278 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7279 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7280 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7281 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7282 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7283 = llvm.and %7275, %7282 : i32 loc(#loc26)
    %7284 = llvm.icmp "eq" %7283, %7281 : i32 loc(#loc26)
    %7285 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7286 = llvm.select %7284, %7281, %7285 : i1, i32 loc(#loc26)
    %7287 = llvm.xor %7281, %7286 : i32 loc(#loc26)
    %7288 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7289 = llvm.and %7275, %7288 : i32 loc(#loc26)
    %7290 = llvm.icmp "eq" %7289, %7281 : i32 loc(#loc26)
    %7291 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7292 = llvm.select %7290, %7281, %7291 : i1, i32 loc(#loc26)
    %7293 = llvm.xor %7287, %7292 : i32 loc(#loc26)
    %7294 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7295 = llvm.and %7275, %7294 : i32 loc(#loc26)
    %7296 = llvm.icmp "eq" %7295, %7281 : i32 loc(#loc26)
    %7297 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7298 = llvm.select %7296, %7281, %7297 : i1, i32 loc(#loc26)
    %7299 = llvm.xor %7293, %7298 : i32 loc(#loc26)
    %7300 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7301 = llvm.and %7275, %7300 : i32 loc(#loc26)
    %7302 = llvm.icmp "eq" %7301, %7281 : i32 loc(#loc26)
    %7303 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7304 = llvm.select %7302, %7281, %7303 : i1, i32 loc(#loc26)
    %7305 = llvm.xor %7299, %7304 : i32 loc(#loc26)
    %7306 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7307 = llvm.and %7275, %7306 : i32 loc(#loc26)
    %7308 = llvm.icmp "eq" %7307, %7281 : i32 loc(#loc26)
    %7309 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7310 = llvm.select %7308, %7281, %7309 : i1, i32 loc(#loc26)
    %7311 = llvm.xor %7305, %7310 : i32 loc(#loc26)
    %7312 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7313 = llvm.and %7275, %7312 : i32 loc(#loc26)
    %7314 = llvm.icmp "eq" %7313, %7281 : i32 loc(#loc26)
    %7315 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7316 = llvm.select %7314, %7281, %7315 : i1, i32 loc(#loc26)
    %7317 = llvm.xor %7311, %7316 : i32 loc(#loc26)
    %7318 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7319 = llvm.and %7276, %7318 : i32 loc(#loc26)
    %7320 = llvm.icmp "eq" %7319, %7281 : i32 loc(#loc26)
    %7321 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7322 = llvm.select %7320, %7281, %7321 : i1, i32 loc(#loc26)
    %7323 = llvm.xor %7317, %7322 : i32 loc(#loc26)
    %7324 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7325 = llvm.and %7276, %7324 : i32 loc(#loc26)
    %7326 = llvm.icmp "eq" %7325, %7281 : i32 loc(#loc26)
    %7327 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %7328 = llvm.select %7326, %7281, %7327 : i1, i32 loc(#loc26)
    %7329 = llvm.xor %7323, %7328 : i32 loc(#loc26)
    %7330 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7331 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7332 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7333 = llvm.and %7275, %7332 : i32 loc(#loc26)
    %7334 = llvm.icmp "eq" %7333, %7331 : i32 loc(#loc26)
    %7335 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7336 = llvm.select %7334, %7331, %7335 : i1, i32 loc(#loc26)
    %7337 = llvm.xor %7331, %7336 : i32 loc(#loc26)
    %7338 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7339 = llvm.and %7275, %7338 : i32 loc(#loc26)
    %7340 = llvm.icmp "eq" %7339, %7331 : i32 loc(#loc26)
    %7341 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7342 = llvm.select %7340, %7331, %7341 : i1, i32 loc(#loc26)
    %7343 = llvm.xor %7337, %7342 : i32 loc(#loc26)
    %7344 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7345 = llvm.and %7275, %7344 : i32 loc(#loc26)
    %7346 = llvm.icmp "eq" %7345, %7331 : i32 loc(#loc26)
    %7347 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7348 = llvm.select %7346, %7331, %7347 : i1, i32 loc(#loc26)
    %7349 = llvm.xor %7343, %7348 : i32 loc(#loc26)
    %7350 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7351 = llvm.and %7275, %7350 : i32 loc(#loc26)
    %7352 = llvm.icmp "eq" %7351, %7331 : i32 loc(#loc26)
    %7353 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7354 = llvm.select %7352, %7331, %7353 : i1, i32 loc(#loc26)
    %7355 = llvm.xor %7349, %7354 : i32 loc(#loc26)
    %7356 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7357 = llvm.and %7275, %7356 : i32 loc(#loc26)
    %7358 = llvm.icmp "eq" %7357, %7331 : i32 loc(#loc26)
    %7359 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7360 = llvm.select %7358, %7331, %7359 : i1, i32 loc(#loc26)
    %7361 = llvm.xor %7355, %7360 : i32 loc(#loc26)
    %7362 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7363 = llvm.and %7275, %7362 : i32 loc(#loc26)
    %7364 = llvm.icmp "eq" %7363, %7331 : i32 loc(#loc26)
    %7365 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7366 = llvm.select %7364, %7331, %7365 : i1, i32 loc(#loc26)
    %7367 = llvm.xor %7331, %7366 : i32 loc(#loc26)
    %7368 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7369 = llvm.and %7276, %7368 : i32 loc(#loc26)
    %7370 = llvm.icmp "eq" %7369, %7331 : i32 loc(#loc26)
    %7371 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7372 = llvm.select %7370, %7331, %7371 : i1, i32 loc(#loc26)
    %7373 = llvm.xor %7367, %7372 : i32 loc(#loc26)
    %7374 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7375 = llvm.and %7276, %7374 : i32 loc(#loc26)
    %7376 = llvm.icmp "eq" %7375, %7331 : i32 loc(#loc26)
    %7377 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7378 = llvm.select %7376, %7331, %7377 : i1, i32 loc(#loc26)
    %7379 = llvm.xor %7361, %7378 : i32 loc(#loc26)
    %7380 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7381 = llvm.select %7376, %7331, %7380 : i1, i32 loc(#loc26)
    %7382 = llvm.xor %7373, %7381 : i32 loc(#loc26)
    %7383 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7384 = llvm.mul %7379, %7279 : i32 loc(#loc26)
    %7385 = llvm.add %7383, %7384 : i32 loc(#loc26)
    %7386 = llvm.mul %7382, %7280 : i32 loc(#loc26)
    %7387 = llvm.add %7385, %7386 : i32 loc(#loc26)
    %7388 = llvm.getelementptr inbounds %7263[%7387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %7389 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %7390 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7391 = llvm.insertelement %7265, %7389[%7390 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %7391, %7388 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %7392 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7393 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7394 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7395 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7396 = llvm.mlir.constant(272 : i32) : i32 loc(#loc26)
    %7397 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7398 = llvm.and %7275, %7397 : i32 loc(#loc26)
    %7399 = llvm.icmp "eq" %7398, %7395 : i32 loc(#loc26)
    %7400 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7401 = llvm.select %7399, %7395, %7400 : i1, i32 loc(#loc26)
    %7402 = llvm.xor %7396, %7401 : i32 loc(#loc26)
    %7403 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7404 = llvm.and %7275, %7403 : i32 loc(#loc26)
    %7405 = llvm.icmp "eq" %7404, %7395 : i32 loc(#loc26)
    %7406 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7407 = llvm.select %7405, %7395, %7406 : i1, i32 loc(#loc26)
    %7408 = llvm.xor %7402, %7407 : i32 loc(#loc26)
    %7409 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7410 = llvm.and %7275, %7409 : i32 loc(#loc26)
    %7411 = llvm.icmp "eq" %7410, %7395 : i32 loc(#loc26)
    %7412 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7413 = llvm.select %7411, %7395, %7412 : i1, i32 loc(#loc26)
    %7414 = llvm.xor %7408, %7413 : i32 loc(#loc26)
    %7415 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7416 = llvm.and %7275, %7415 : i32 loc(#loc26)
    %7417 = llvm.icmp "eq" %7416, %7395 : i32 loc(#loc26)
    %7418 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7419 = llvm.select %7417, %7395, %7418 : i1, i32 loc(#loc26)
    %7420 = llvm.xor %7414, %7419 : i32 loc(#loc26)
    %7421 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7422 = llvm.and %7275, %7421 : i32 loc(#loc26)
    %7423 = llvm.icmp "eq" %7422, %7395 : i32 loc(#loc26)
    %7424 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7425 = llvm.select %7423, %7395, %7424 : i1, i32 loc(#loc26)
    %7426 = llvm.xor %7420, %7425 : i32 loc(#loc26)
    %7427 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7428 = llvm.and %7275, %7427 : i32 loc(#loc26)
    %7429 = llvm.icmp "eq" %7428, %7395 : i32 loc(#loc26)
    %7430 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7431 = llvm.select %7429, %7395, %7430 : i1, i32 loc(#loc26)
    %7432 = llvm.xor %7426, %7431 : i32 loc(#loc26)
    %7433 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7434 = llvm.and %7276, %7433 : i32 loc(#loc26)
    %7435 = llvm.icmp "eq" %7434, %7395 : i32 loc(#loc26)
    %7436 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7437 = llvm.select %7435, %7395, %7436 : i1, i32 loc(#loc26)
    %7438 = llvm.xor %7432, %7437 : i32 loc(#loc26)
    %7439 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7440 = llvm.and %7276, %7439 : i32 loc(#loc26)
    %7441 = llvm.icmp "eq" %7440, %7395 : i32 loc(#loc26)
    %7442 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %7443 = llvm.select %7441, %7395, %7442 : i1, i32 loc(#loc26)
    %7444 = llvm.xor %7438, %7443 : i32 loc(#loc26)
    %7445 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7446 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7447 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7448 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7449 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7450 = llvm.and %7275, %7449 : i32 loc(#loc26)
    %7451 = llvm.icmp "eq" %7450, %7446 : i32 loc(#loc26)
    %7452 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7453 = llvm.select %7451, %7446, %7452 : i1, i32 loc(#loc26)
    %7454 = llvm.xor %7447, %7453 : i32 loc(#loc26)
    %7455 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7456 = llvm.and %7275, %7455 : i32 loc(#loc26)
    %7457 = llvm.icmp "eq" %7456, %7446 : i32 loc(#loc26)
    %7458 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7459 = llvm.select %7457, %7446, %7458 : i1, i32 loc(#loc26)
    %7460 = llvm.xor %7454, %7459 : i32 loc(#loc26)
    %7461 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7462 = llvm.and %7275, %7461 : i32 loc(#loc26)
    %7463 = llvm.icmp "eq" %7462, %7446 : i32 loc(#loc26)
    %7464 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7465 = llvm.select %7463, %7446, %7464 : i1, i32 loc(#loc26)
    %7466 = llvm.xor %7460, %7465 : i32 loc(#loc26)
    %7467 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7468 = llvm.and %7275, %7467 : i32 loc(#loc26)
    %7469 = llvm.icmp "eq" %7468, %7446 : i32 loc(#loc26)
    %7470 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7471 = llvm.select %7469, %7446, %7470 : i1, i32 loc(#loc26)
    %7472 = llvm.xor %7466, %7471 : i32 loc(#loc26)
    %7473 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7474 = llvm.and %7275, %7473 : i32 loc(#loc26)
    %7475 = llvm.icmp "eq" %7474, %7446 : i32 loc(#loc26)
    %7476 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7477 = llvm.select %7475, %7446, %7476 : i1, i32 loc(#loc26)
    %7478 = llvm.xor %7472, %7477 : i32 loc(#loc26)
    %7479 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7480 = llvm.and %7275, %7479 : i32 loc(#loc26)
    %7481 = llvm.icmp "eq" %7480, %7446 : i32 loc(#loc26)
    %7482 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7483 = llvm.select %7481, %7446, %7482 : i1, i32 loc(#loc26)
    %7484 = llvm.xor %7448, %7483 : i32 loc(#loc26)
    %7485 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7486 = llvm.and %7276, %7485 : i32 loc(#loc26)
    %7487 = llvm.icmp "eq" %7486, %7446 : i32 loc(#loc26)
    %7488 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7489 = llvm.select %7487, %7446, %7488 : i1, i32 loc(#loc26)
    %7490 = llvm.xor %7484, %7489 : i32 loc(#loc26)
    %7491 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7492 = llvm.and %7276, %7491 : i32 loc(#loc26)
    %7493 = llvm.icmp "eq" %7492, %7446 : i32 loc(#loc26)
    %7494 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7495 = llvm.select %7493, %7446, %7494 : i1, i32 loc(#loc26)
    %7496 = llvm.xor %7478, %7495 : i32 loc(#loc26)
    %7497 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7498 = llvm.select %7493, %7446, %7497 : i1, i32 loc(#loc26)
    %7499 = llvm.xor %7490, %7498 : i32 loc(#loc26)
    %7500 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7501 = llvm.mul %7496, %7393 : i32 loc(#loc26)
    %7502 = llvm.add %7500, %7501 : i32 loc(#loc26)
    %7503 = llvm.mul %7499, %7394 : i32 loc(#loc26)
    %7504 = llvm.add %7502, %7503 : i32 loc(#loc26)
    %7505 = llvm.getelementptr inbounds %7263[%7504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %7506 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %7507 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7508 = llvm.insertelement %7266, %7506[%7507 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %7508, %7505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %7509 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7510 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7511 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7512 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7513 = llvm.mlir.constant(512 : i32) : i32 loc(#loc26)
    %7514 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7515 = llvm.and %7275, %7514 : i32 loc(#loc26)
    %7516 = llvm.icmp "eq" %7515, %7512 : i32 loc(#loc26)
    %7517 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7518 = llvm.select %7516, %7512, %7517 : i1, i32 loc(#loc26)
    %7519 = llvm.xor %7513, %7518 : i32 loc(#loc26)
    %7520 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7521 = llvm.and %7275, %7520 : i32 loc(#loc26)
    %7522 = llvm.icmp "eq" %7521, %7512 : i32 loc(#loc26)
    %7523 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7524 = llvm.select %7522, %7512, %7523 : i1, i32 loc(#loc26)
    %7525 = llvm.xor %7519, %7524 : i32 loc(#loc26)
    %7526 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7527 = llvm.and %7275, %7526 : i32 loc(#loc26)
    %7528 = llvm.icmp "eq" %7527, %7512 : i32 loc(#loc26)
    %7529 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7530 = llvm.select %7528, %7512, %7529 : i1, i32 loc(#loc26)
    %7531 = llvm.xor %7525, %7530 : i32 loc(#loc26)
    %7532 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7533 = llvm.and %7275, %7532 : i32 loc(#loc26)
    %7534 = llvm.icmp "eq" %7533, %7512 : i32 loc(#loc26)
    %7535 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7536 = llvm.select %7534, %7512, %7535 : i1, i32 loc(#loc26)
    %7537 = llvm.xor %7531, %7536 : i32 loc(#loc26)
    %7538 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7539 = llvm.and %7275, %7538 : i32 loc(#loc26)
    %7540 = llvm.icmp "eq" %7539, %7512 : i32 loc(#loc26)
    %7541 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7542 = llvm.select %7540, %7512, %7541 : i1, i32 loc(#loc26)
    %7543 = llvm.xor %7537, %7542 : i32 loc(#loc26)
    %7544 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7545 = llvm.and %7275, %7544 : i32 loc(#loc26)
    %7546 = llvm.icmp "eq" %7545, %7512 : i32 loc(#loc26)
    %7547 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7548 = llvm.select %7546, %7512, %7547 : i1, i32 loc(#loc26)
    %7549 = llvm.xor %7543, %7548 : i32 loc(#loc26)
    %7550 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7551 = llvm.and %7276, %7550 : i32 loc(#loc26)
    %7552 = llvm.icmp "eq" %7551, %7512 : i32 loc(#loc26)
    %7553 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7554 = llvm.select %7552, %7512, %7553 : i1, i32 loc(#loc26)
    %7555 = llvm.xor %7549, %7554 : i32 loc(#loc26)
    %7556 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7557 = llvm.and %7276, %7556 : i32 loc(#loc26)
    %7558 = llvm.icmp "eq" %7557, %7512 : i32 loc(#loc26)
    %7559 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %7560 = llvm.select %7558, %7512, %7559 : i1, i32 loc(#loc26)
    %7561 = llvm.xor %7555, %7560 : i32 loc(#loc26)
    %7562 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7563 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7564 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7565 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7566 = llvm.and %7275, %7565 : i32 loc(#loc26)
    %7567 = llvm.icmp "eq" %7566, %7563 : i32 loc(#loc26)
    %7568 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7569 = llvm.select %7567, %7563, %7568 : i1, i32 loc(#loc26)
    %7570 = llvm.xor %7563, %7569 : i32 loc(#loc26)
    %7571 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7572 = llvm.and %7275, %7571 : i32 loc(#loc26)
    %7573 = llvm.icmp "eq" %7572, %7563 : i32 loc(#loc26)
    %7574 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7575 = llvm.select %7573, %7563, %7574 : i1, i32 loc(#loc26)
    %7576 = llvm.xor %7570, %7575 : i32 loc(#loc26)
    %7577 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7578 = llvm.and %7275, %7577 : i32 loc(#loc26)
    %7579 = llvm.icmp "eq" %7578, %7563 : i32 loc(#loc26)
    %7580 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7581 = llvm.select %7579, %7563, %7580 : i1, i32 loc(#loc26)
    %7582 = llvm.xor %7576, %7581 : i32 loc(#loc26)
    %7583 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7584 = llvm.and %7275, %7583 : i32 loc(#loc26)
    %7585 = llvm.icmp "eq" %7584, %7563 : i32 loc(#loc26)
    %7586 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7587 = llvm.select %7585, %7563, %7586 : i1, i32 loc(#loc26)
    %7588 = llvm.xor %7582, %7587 : i32 loc(#loc26)
    %7589 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7590 = llvm.and %7275, %7589 : i32 loc(#loc26)
    %7591 = llvm.icmp "eq" %7590, %7563 : i32 loc(#loc26)
    %7592 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7593 = llvm.select %7591, %7563, %7592 : i1, i32 loc(#loc26)
    %7594 = llvm.xor %7588, %7593 : i32 loc(#loc26)
    %7595 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7596 = llvm.and %7275, %7595 : i32 loc(#loc26)
    %7597 = llvm.icmp "eq" %7596, %7563 : i32 loc(#loc26)
    %7598 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7599 = llvm.select %7597, %7563, %7598 : i1, i32 loc(#loc26)
    %7600 = llvm.xor %7564, %7599 : i32 loc(#loc26)
    %7601 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7602 = llvm.and %7276, %7601 : i32 loc(#loc26)
    %7603 = llvm.icmp "eq" %7602, %7563 : i32 loc(#loc26)
    %7604 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7605 = llvm.select %7603, %7563, %7604 : i1, i32 loc(#loc26)
    %7606 = llvm.xor %7600, %7605 : i32 loc(#loc26)
    %7607 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7608 = llvm.and %7276, %7607 : i32 loc(#loc26)
    %7609 = llvm.icmp "eq" %7608, %7563 : i32 loc(#loc26)
    %7610 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7611 = llvm.select %7609, %7563, %7610 : i1, i32 loc(#loc26)
    %7612 = llvm.xor %7594, %7611 : i32 loc(#loc26)
    %7613 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7614 = llvm.select %7609, %7563, %7613 : i1, i32 loc(#loc26)
    %7615 = llvm.xor %7606, %7614 : i32 loc(#loc26)
    %7616 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7617 = llvm.mul %7612, %7510 : i32 loc(#loc26)
    %7618 = llvm.add %7616, %7617 : i32 loc(#loc26)
    %7619 = llvm.mul %7615, %7511 : i32 loc(#loc26)
    %7620 = llvm.add %7618, %7619 : i32 loc(#loc26)
    %7621 = llvm.getelementptr inbounds %7263[%7620] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %7622 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %7623 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7624 = llvm.insertelement %7267, %7622[%7623 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %7624, %7621 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %7625 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %7626 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7627 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7628 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7629 = llvm.mlir.constant(784 : i32) : i32 loc(#loc26)
    %7630 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7631 = llvm.and %7275, %7630 : i32 loc(#loc26)
    %7632 = llvm.icmp "eq" %7631, %7628 : i32 loc(#loc26)
    %7633 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7634 = llvm.select %7632, %7628, %7633 : i1, i32 loc(#loc26)
    %7635 = llvm.xor %7629, %7634 : i32 loc(#loc26)
    %7636 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7637 = llvm.and %7275, %7636 : i32 loc(#loc26)
    %7638 = llvm.icmp "eq" %7637, %7628 : i32 loc(#loc26)
    %7639 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7640 = llvm.select %7638, %7628, %7639 : i1, i32 loc(#loc26)
    %7641 = llvm.xor %7635, %7640 : i32 loc(#loc26)
    %7642 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7643 = llvm.and %7275, %7642 : i32 loc(#loc26)
    %7644 = llvm.icmp "eq" %7643, %7628 : i32 loc(#loc26)
    %7645 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7646 = llvm.select %7644, %7628, %7645 : i1, i32 loc(#loc26)
    %7647 = llvm.xor %7641, %7646 : i32 loc(#loc26)
    %7648 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7649 = llvm.and %7275, %7648 : i32 loc(#loc26)
    %7650 = llvm.icmp "eq" %7649, %7628 : i32 loc(#loc26)
    %7651 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7652 = llvm.select %7650, %7628, %7651 : i1, i32 loc(#loc26)
    %7653 = llvm.xor %7647, %7652 : i32 loc(#loc26)
    %7654 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7655 = llvm.and %7275, %7654 : i32 loc(#loc26)
    %7656 = llvm.icmp "eq" %7655, %7628 : i32 loc(#loc26)
    %7657 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7658 = llvm.select %7656, %7628, %7657 : i1, i32 loc(#loc26)
    %7659 = llvm.xor %7653, %7658 : i32 loc(#loc26)
    %7660 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7661 = llvm.and %7275, %7660 : i32 loc(#loc26)
    %7662 = llvm.icmp "eq" %7661, %7628 : i32 loc(#loc26)
    %7663 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7664 = llvm.select %7662, %7628, %7663 : i1, i32 loc(#loc26)
    %7665 = llvm.xor %7659, %7664 : i32 loc(#loc26)
    %7666 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7667 = llvm.and %7276, %7666 : i32 loc(#loc26)
    %7668 = llvm.icmp "eq" %7667, %7628 : i32 loc(#loc26)
    %7669 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7670 = llvm.select %7668, %7628, %7669 : i1, i32 loc(#loc26)
    %7671 = llvm.xor %7665, %7670 : i32 loc(#loc26)
    %7672 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7673 = llvm.and %7276, %7672 : i32 loc(#loc26)
    %7674 = llvm.icmp "eq" %7673, %7628 : i32 loc(#loc26)
    %7675 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %7676 = llvm.select %7674, %7628, %7675 : i1, i32 loc(#loc26)
    %7677 = llvm.xor %7671, %7676 : i32 loc(#loc26)
    %7678 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7679 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7680 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7681 = llvm.mlir.constant(24 : i32) : i32 loc(#loc26)
    %7682 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7683 = llvm.and %7275, %7682 : i32 loc(#loc26)
    %7684 = llvm.icmp "eq" %7683, %7679 : i32 loc(#loc26)
    %7685 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7686 = llvm.select %7684, %7679, %7685 : i1, i32 loc(#loc26)
    %7687 = llvm.xor %7680, %7686 : i32 loc(#loc26)
    %7688 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7689 = llvm.and %7275, %7688 : i32 loc(#loc26)
    %7690 = llvm.icmp "eq" %7689, %7679 : i32 loc(#loc26)
    %7691 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7692 = llvm.select %7690, %7679, %7691 : i1, i32 loc(#loc26)
    %7693 = llvm.xor %7687, %7692 : i32 loc(#loc26)
    %7694 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7695 = llvm.and %7275, %7694 : i32 loc(#loc26)
    %7696 = llvm.icmp "eq" %7695, %7679 : i32 loc(#loc26)
    %7697 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7698 = llvm.select %7696, %7679, %7697 : i1, i32 loc(#loc26)
    %7699 = llvm.xor %7693, %7698 : i32 loc(#loc26)
    %7700 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7701 = llvm.and %7275, %7700 : i32 loc(#loc26)
    %7702 = llvm.icmp "eq" %7701, %7679 : i32 loc(#loc26)
    %7703 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7704 = llvm.select %7702, %7679, %7703 : i1, i32 loc(#loc26)
    %7705 = llvm.xor %7699, %7704 : i32 loc(#loc26)
    %7706 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7707 = llvm.and %7275, %7706 : i32 loc(#loc26)
    %7708 = llvm.icmp "eq" %7707, %7679 : i32 loc(#loc26)
    %7709 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7710 = llvm.select %7708, %7679, %7709 : i1, i32 loc(#loc26)
    %7711 = llvm.xor %7705, %7710 : i32 loc(#loc26)
    %7712 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7713 = llvm.and %7275, %7712 : i32 loc(#loc26)
    %7714 = llvm.icmp "eq" %7713, %7679 : i32 loc(#loc26)
    %7715 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7716 = llvm.select %7714, %7679, %7715 : i1, i32 loc(#loc26)
    %7717 = llvm.xor %7681, %7716 : i32 loc(#loc26)
    %7718 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7719 = llvm.and %7276, %7718 : i32 loc(#loc26)
    %7720 = llvm.icmp "eq" %7719, %7679 : i32 loc(#loc26)
    %7721 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7722 = llvm.select %7720, %7679, %7721 : i1, i32 loc(#loc26)
    %7723 = llvm.xor %7717, %7722 : i32 loc(#loc26)
    %7724 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7725 = llvm.and %7276, %7724 : i32 loc(#loc26)
    %7726 = llvm.icmp "eq" %7725, %7679 : i32 loc(#loc26)
    %7727 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7728 = llvm.select %7726, %7679, %7727 : i1, i32 loc(#loc26)
    %7729 = llvm.xor %7711, %7728 : i32 loc(#loc26)
    %7730 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7731 = llvm.select %7726, %7679, %7730 : i1, i32 loc(#loc26)
    %7732 = llvm.xor %7723, %7731 : i32 loc(#loc26)
    %7733 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7734 = llvm.mul %7729, %7626 : i32 loc(#loc26)
    %7735 = llvm.add %7733, %7734 : i32 loc(#loc26)
    %7736 = llvm.mul %7732, %7627 : i32 loc(#loc26)
    %7737 = llvm.add %7735, %7736 : i32 loc(#loc26)
    %7738 = llvm.getelementptr inbounds %7263[%7737] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %7739 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %7740 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7741 = llvm.insertelement %7268, %7739[%7740 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %7741, %7738 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %7742 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7743 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7744 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7745 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7746 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc26)
    %7747 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7748 = llvm.and %7275, %7747 : i32 loc(#loc26)
    %7749 = llvm.icmp "eq" %7748, %7745 : i32 loc(#loc26)
    %7750 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7751 = llvm.select %7749, %7745, %7750 : i1, i32 loc(#loc26)
    %7752 = llvm.xor %7746, %7751 : i32 loc(#loc26)
    %7753 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7754 = llvm.and %7275, %7753 : i32 loc(#loc26)
    %7755 = llvm.icmp "eq" %7754, %7745 : i32 loc(#loc26)
    %7756 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7757 = llvm.select %7755, %7745, %7756 : i1, i32 loc(#loc26)
    %7758 = llvm.xor %7752, %7757 : i32 loc(#loc26)
    %7759 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7760 = llvm.and %7275, %7759 : i32 loc(#loc26)
    %7761 = llvm.icmp "eq" %7760, %7745 : i32 loc(#loc26)
    %7762 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7763 = llvm.select %7761, %7745, %7762 : i1, i32 loc(#loc26)
    %7764 = llvm.xor %7758, %7763 : i32 loc(#loc26)
    %7765 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7766 = llvm.and %7275, %7765 : i32 loc(#loc26)
    %7767 = llvm.icmp "eq" %7766, %7745 : i32 loc(#loc26)
    %7768 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7769 = llvm.select %7767, %7745, %7768 : i1, i32 loc(#loc26)
    %7770 = llvm.xor %7764, %7769 : i32 loc(#loc26)
    %7771 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7772 = llvm.and %7275, %7771 : i32 loc(#loc26)
    %7773 = llvm.icmp "eq" %7772, %7745 : i32 loc(#loc26)
    %7774 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7775 = llvm.select %7773, %7745, %7774 : i1, i32 loc(#loc26)
    %7776 = llvm.xor %7770, %7775 : i32 loc(#loc26)
    %7777 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7778 = llvm.and %7275, %7777 : i32 loc(#loc26)
    %7779 = llvm.icmp "eq" %7778, %7745 : i32 loc(#loc26)
    %7780 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7781 = llvm.select %7779, %7745, %7780 : i1, i32 loc(#loc26)
    %7782 = llvm.xor %7776, %7781 : i32 loc(#loc26)
    %7783 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7784 = llvm.and %7276, %7783 : i32 loc(#loc26)
    %7785 = llvm.icmp "eq" %7784, %7745 : i32 loc(#loc26)
    %7786 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7787 = llvm.select %7785, %7745, %7786 : i1, i32 loc(#loc26)
    %7788 = llvm.xor %7782, %7787 : i32 loc(#loc26)
    %7789 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7790 = llvm.and %7276, %7789 : i32 loc(#loc26)
    %7791 = llvm.icmp "eq" %7790, %7745 : i32 loc(#loc26)
    %7792 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %7793 = llvm.select %7791, %7745, %7792 : i1, i32 loc(#loc26)
    %7794 = llvm.xor %7788, %7793 : i32 loc(#loc26)
    %7795 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7796 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7797 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7798 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7799 = llvm.and %7275, %7798 : i32 loc(#loc26)
    %7800 = llvm.icmp "eq" %7799, %7796 : i32 loc(#loc26)
    %7801 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7802 = llvm.select %7800, %7796, %7801 : i1, i32 loc(#loc26)
    %7803 = llvm.xor %7796, %7802 : i32 loc(#loc26)
    %7804 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7805 = llvm.and %7275, %7804 : i32 loc(#loc26)
    %7806 = llvm.icmp "eq" %7805, %7796 : i32 loc(#loc26)
    %7807 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7808 = llvm.select %7806, %7796, %7807 : i1, i32 loc(#loc26)
    %7809 = llvm.xor %7803, %7808 : i32 loc(#loc26)
    %7810 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7811 = llvm.and %7275, %7810 : i32 loc(#loc26)
    %7812 = llvm.icmp "eq" %7811, %7796 : i32 loc(#loc26)
    %7813 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7814 = llvm.select %7812, %7796, %7813 : i1, i32 loc(#loc26)
    %7815 = llvm.xor %7809, %7814 : i32 loc(#loc26)
    %7816 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7817 = llvm.and %7275, %7816 : i32 loc(#loc26)
    %7818 = llvm.icmp "eq" %7817, %7796 : i32 loc(#loc26)
    %7819 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7820 = llvm.select %7818, %7796, %7819 : i1, i32 loc(#loc26)
    %7821 = llvm.xor %7815, %7820 : i32 loc(#loc26)
    %7822 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7823 = llvm.and %7275, %7822 : i32 loc(#loc26)
    %7824 = llvm.icmp "eq" %7823, %7796 : i32 loc(#loc26)
    %7825 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7826 = llvm.select %7824, %7796, %7825 : i1, i32 loc(#loc26)
    %7827 = llvm.xor %7821, %7826 : i32 loc(#loc26)
    %7828 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7829 = llvm.and %7275, %7828 : i32 loc(#loc26)
    %7830 = llvm.icmp "eq" %7829, %7796 : i32 loc(#loc26)
    %7831 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7832 = llvm.select %7830, %7796, %7831 : i1, i32 loc(#loc26)
    %7833 = llvm.xor %7797, %7832 : i32 loc(#loc26)
    %7834 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7835 = llvm.and %7276, %7834 : i32 loc(#loc26)
    %7836 = llvm.icmp "eq" %7835, %7796 : i32 loc(#loc26)
    %7837 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7838 = llvm.select %7836, %7796, %7837 : i1, i32 loc(#loc26)
    %7839 = llvm.xor %7833, %7838 : i32 loc(#loc26)
    %7840 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7841 = llvm.and %7276, %7840 : i32 loc(#loc26)
    %7842 = llvm.icmp "eq" %7841, %7796 : i32 loc(#loc26)
    %7843 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7844 = llvm.select %7842, %7796, %7843 : i1, i32 loc(#loc26)
    %7845 = llvm.xor %7827, %7844 : i32 loc(#loc26)
    %7846 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7847 = llvm.select %7842, %7796, %7846 : i1, i32 loc(#loc26)
    %7848 = llvm.xor %7839, %7847 : i32 loc(#loc26)
    %7849 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7850 = llvm.mul %7845, %7743 : i32 loc(#loc26)
    %7851 = llvm.add %7849, %7850 : i32 loc(#loc26)
    %7852 = llvm.mul %7848, %7744 : i32 loc(#loc26)
    %7853 = llvm.add %7851, %7852 : i32 loc(#loc26)
    %7854 = llvm.getelementptr inbounds %7263[%7853] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %7855 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %7856 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7857 = llvm.insertelement %7269, %7855[%7856 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %7857, %7854 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %7858 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %7859 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7860 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7861 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7862 = llvm.mlir.constant(1296 : i32) : i32 loc(#loc26)
    %7863 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7864 = llvm.and %7275, %7863 : i32 loc(#loc26)
    %7865 = llvm.icmp "eq" %7864, %7861 : i32 loc(#loc26)
    %7866 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7867 = llvm.select %7865, %7861, %7866 : i1, i32 loc(#loc26)
    %7868 = llvm.xor %7862, %7867 : i32 loc(#loc26)
    %7869 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7870 = llvm.and %7275, %7869 : i32 loc(#loc26)
    %7871 = llvm.icmp "eq" %7870, %7861 : i32 loc(#loc26)
    %7872 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7873 = llvm.select %7871, %7861, %7872 : i1, i32 loc(#loc26)
    %7874 = llvm.xor %7868, %7873 : i32 loc(#loc26)
    %7875 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7876 = llvm.and %7275, %7875 : i32 loc(#loc26)
    %7877 = llvm.icmp "eq" %7876, %7861 : i32 loc(#loc26)
    %7878 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7879 = llvm.select %7877, %7861, %7878 : i1, i32 loc(#loc26)
    %7880 = llvm.xor %7874, %7879 : i32 loc(#loc26)
    %7881 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7882 = llvm.and %7275, %7881 : i32 loc(#loc26)
    %7883 = llvm.icmp "eq" %7882, %7861 : i32 loc(#loc26)
    %7884 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7885 = llvm.select %7883, %7861, %7884 : i1, i32 loc(#loc26)
    %7886 = llvm.xor %7880, %7885 : i32 loc(#loc26)
    %7887 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7888 = llvm.and %7275, %7887 : i32 loc(#loc26)
    %7889 = llvm.icmp "eq" %7888, %7861 : i32 loc(#loc26)
    %7890 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7891 = llvm.select %7889, %7861, %7890 : i1, i32 loc(#loc26)
    %7892 = llvm.xor %7886, %7891 : i32 loc(#loc26)
    %7893 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7894 = llvm.and %7275, %7893 : i32 loc(#loc26)
    %7895 = llvm.icmp "eq" %7894, %7861 : i32 loc(#loc26)
    %7896 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7897 = llvm.select %7895, %7861, %7896 : i1, i32 loc(#loc26)
    %7898 = llvm.xor %7892, %7897 : i32 loc(#loc26)
    %7899 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7900 = llvm.and %7276, %7899 : i32 loc(#loc26)
    %7901 = llvm.icmp "eq" %7900, %7861 : i32 loc(#loc26)
    %7902 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %7903 = llvm.select %7901, %7861, %7902 : i1, i32 loc(#loc26)
    %7904 = llvm.xor %7898, %7903 : i32 loc(#loc26)
    %7905 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7906 = llvm.and %7276, %7905 : i32 loc(#loc26)
    %7907 = llvm.icmp "eq" %7906, %7861 : i32 loc(#loc26)
    %7908 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %7909 = llvm.select %7907, %7861, %7908 : i1, i32 loc(#loc26)
    %7910 = llvm.xor %7904, %7909 : i32 loc(#loc26)
    %7911 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7912 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7913 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7914 = llvm.mlir.constant(40 : i32) : i32 loc(#loc26)
    %7915 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7916 = llvm.and %7275, %7915 : i32 loc(#loc26)
    %7917 = llvm.icmp "eq" %7916, %7912 : i32 loc(#loc26)
    %7918 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7919 = llvm.select %7917, %7912, %7918 : i1, i32 loc(#loc26)
    %7920 = llvm.xor %7913, %7919 : i32 loc(#loc26)
    %7921 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7922 = llvm.and %7275, %7921 : i32 loc(#loc26)
    %7923 = llvm.icmp "eq" %7922, %7912 : i32 loc(#loc26)
    %7924 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7925 = llvm.select %7923, %7912, %7924 : i1, i32 loc(#loc26)
    %7926 = llvm.xor %7920, %7925 : i32 loc(#loc26)
    %7927 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7928 = llvm.and %7275, %7927 : i32 loc(#loc26)
    %7929 = llvm.icmp "eq" %7928, %7912 : i32 loc(#loc26)
    %7930 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7931 = llvm.select %7929, %7912, %7930 : i1, i32 loc(#loc26)
    %7932 = llvm.xor %7926, %7931 : i32 loc(#loc26)
    %7933 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7934 = llvm.and %7275, %7933 : i32 loc(#loc26)
    %7935 = llvm.icmp "eq" %7934, %7912 : i32 loc(#loc26)
    %7936 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7937 = llvm.select %7935, %7912, %7936 : i1, i32 loc(#loc26)
    %7938 = llvm.xor %7932, %7937 : i32 loc(#loc26)
    %7939 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7940 = llvm.and %7275, %7939 : i32 loc(#loc26)
    %7941 = llvm.icmp "eq" %7940, %7912 : i32 loc(#loc26)
    %7942 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %7943 = llvm.select %7941, %7912, %7942 : i1, i32 loc(#loc26)
    %7944 = llvm.xor %7938, %7943 : i32 loc(#loc26)
    %7945 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7946 = llvm.and %7275, %7945 : i32 loc(#loc26)
    %7947 = llvm.icmp "eq" %7946, %7912 : i32 loc(#loc26)
    %7948 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7949 = llvm.select %7947, %7912, %7948 : i1, i32 loc(#loc26)
    %7950 = llvm.xor %7914, %7949 : i32 loc(#loc26)
    %7951 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7952 = llvm.and %7276, %7951 : i32 loc(#loc26)
    %7953 = llvm.icmp "eq" %7952, %7912 : i32 loc(#loc26)
    %7954 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7955 = llvm.select %7953, %7912, %7954 : i1, i32 loc(#loc26)
    %7956 = llvm.xor %7950, %7955 : i32 loc(#loc26)
    %7957 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7958 = llvm.and %7276, %7957 : i32 loc(#loc26)
    %7959 = llvm.icmp "eq" %7958, %7912 : i32 loc(#loc26)
    %7960 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7961 = llvm.select %7959, %7912, %7960 : i1, i32 loc(#loc26)
    %7962 = llvm.xor %7944, %7961 : i32 loc(#loc26)
    %7963 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7964 = llvm.select %7959, %7912, %7963 : i1, i32 loc(#loc26)
    %7965 = llvm.xor %7956, %7964 : i32 loc(#loc26)
    %7966 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7967 = llvm.mul %7962, %7859 : i32 loc(#loc26)
    %7968 = llvm.add %7966, %7967 : i32 loc(#loc26)
    %7969 = llvm.mul %7965, %7860 : i32 loc(#loc26)
    %7970 = llvm.add %7968, %7969 : i32 loc(#loc26)
    %7971 = llvm.getelementptr inbounds %7263[%7970] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %7972 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %7973 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7974 = llvm.insertelement %7270, %7972[%7973 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %7974, %7971 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %7975 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %7976 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7977 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %7978 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %7979 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc26)
    %7980 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7981 = llvm.and %7275, %7980 : i32 loc(#loc26)
    %7982 = llvm.icmp "eq" %7981, %7978 : i32 loc(#loc26)
    %7983 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %7984 = llvm.select %7982, %7978, %7983 : i1, i32 loc(#loc26)
    %7985 = llvm.xor %7979, %7984 : i32 loc(#loc26)
    %7986 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7987 = llvm.and %7275, %7986 : i32 loc(#loc26)
    %7988 = llvm.icmp "eq" %7987, %7978 : i32 loc(#loc26)
    %7989 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %7990 = llvm.select %7988, %7978, %7989 : i1, i32 loc(#loc26)
    %7991 = llvm.xor %7985, %7990 : i32 loc(#loc26)
    %7992 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7993 = llvm.and %7275, %7992 : i32 loc(#loc26)
    %7994 = llvm.icmp "eq" %7993, %7978 : i32 loc(#loc26)
    %7995 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %7996 = llvm.select %7994, %7978, %7995 : i1, i32 loc(#loc26)
    %7997 = llvm.xor %7991, %7996 : i32 loc(#loc26)
    %7998 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %7999 = llvm.and %7275, %7998 : i32 loc(#loc26)
    %8000 = llvm.icmp "eq" %7999, %7978 : i32 loc(#loc26)
    %8001 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8002 = llvm.select %8000, %7978, %8001 : i1, i32 loc(#loc26)
    %8003 = llvm.xor %7997, %8002 : i32 loc(#loc26)
    %8004 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8005 = llvm.and %7275, %8004 : i32 loc(#loc26)
    %8006 = llvm.icmp "eq" %8005, %7978 : i32 loc(#loc26)
    %8007 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8008 = llvm.select %8006, %7978, %8007 : i1, i32 loc(#loc26)
    %8009 = llvm.xor %8003, %8008 : i32 loc(#loc26)
    %8010 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8011 = llvm.and %7275, %8010 : i32 loc(#loc26)
    %8012 = llvm.icmp "eq" %8011, %7978 : i32 loc(#loc26)
    %8013 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8014 = llvm.select %8012, %7978, %8013 : i1, i32 loc(#loc26)
    %8015 = llvm.xor %8009, %8014 : i32 loc(#loc26)
    %8016 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8017 = llvm.and %7276, %8016 : i32 loc(#loc26)
    %8018 = llvm.icmp "eq" %8017, %7978 : i32 loc(#loc26)
    %8019 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %8020 = llvm.select %8018, %7978, %8019 : i1, i32 loc(#loc26)
    %8021 = llvm.xor %8015, %8020 : i32 loc(#loc26)
    %8022 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8023 = llvm.and %7276, %8022 : i32 loc(#loc26)
    %8024 = llvm.icmp "eq" %8023, %7978 : i32 loc(#loc26)
    %8025 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %8026 = llvm.select %8024, %7978, %8025 : i1, i32 loc(#loc26)
    %8027 = llvm.xor %8021, %8026 : i32 loc(#loc26)
    %8028 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8029 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8030 = llvm.mlir.constant(48 : i32) : i32 loc(#loc26)
    %8031 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8032 = llvm.and %7275, %8031 : i32 loc(#loc26)
    %8033 = llvm.icmp "eq" %8032, %8029 : i32 loc(#loc26)
    %8034 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8035 = llvm.select %8033, %8029, %8034 : i1, i32 loc(#loc26)
    %8036 = llvm.xor %8029, %8035 : i32 loc(#loc26)
    %8037 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8038 = llvm.and %7275, %8037 : i32 loc(#loc26)
    %8039 = llvm.icmp "eq" %8038, %8029 : i32 loc(#loc26)
    %8040 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8041 = llvm.select %8039, %8029, %8040 : i1, i32 loc(#loc26)
    %8042 = llvm.xor %8036, %8041 : i32 loc(#loc26)
    %8043 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8044 = llvm.and %7275, %8043 : i32 loc(#loc26)
    %8045 = llvm.icmp "eq" %8044, %8029 : i32 loc(#loc26)
    %8046 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8047 = llvm.select %8045, %8029, %8046 : i1, i32 loc(#loc26)
    %8048 = llvm.xor %8042, %8047 : i32 loc(#loc26)
    %8049 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8050 = llvm.and %7275, %8049 : i32 loc(#loc26)
    %8051 = llvm.icmp "eq" %8050, %8029 : i32 loc(#loc26)
    %8052 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8053 = llvm.select %8051, %8029, %8052 : i1, i32 loc(#loc26)
    %8054 = llvm.xor %8048, %8053 : i32 loc(#loc26)
    %8055 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8056 = llvm.and %7275, %8055 : i32 loc(#loc26)
    %8057 = llvm.icmp "eq" %8056, %8029 : i32 loc(#loc26)
    %8058 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8059 = llvm.select %8057, %8029, %8058 : i1, i32 loc(#loc26)
    %8060 = llvm.xor %8054, %8059 : i32 loc(#loc26)
    %8061 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8062 = llvm.and %7275, %8061 : i32 loc(#loc26)
    %8063 = llvm.icmp "eq" %8062, %8029 : i32 loc(#loc26)
    %8064 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8065 = llvm.select %8063, %8029, %8064 : i1, i32 loc(#loc26)
    %8066 = llvm.xor %8030, %8065 : i32 loc(#loc26)
    %8067 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8068 = llvm.and %7276, %8067 : i32 loc(#loc26)
    %8069 = llvm.icmp "eq" %8068, %8029 : i32 loc(#loc26)
    %8070 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8071 = llvm.select %8069, %8029, %8070 : i1, i32 loc(#loc26)
    %8072 = llvm.xor %8066, %8071 : i32 loc(#loc26)
    %8073 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8074 = llvm.and %7276, %8073 : i32 loc(#loc26)
    %8075 = llvm.icmp "eq" %8074, %8029 : i32 loc(#loc26)
    %8076 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8077 = llvm.select %8075, %8029, %8076 : i1, i32 loc(#loc26)
    %8078 = llvm.xor %8060, %8077 : i32 loc(#loc26)
    %8079 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8080 = llvm.select %8075, %8029, %8079 : i1, i32 loc(#loc26)
    %8081 = llvm.xor %8072, %8080 : i32 loc(#loc26)
    %8082 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8083 = llvm.mul %8078, %7976 : i32 loc(#loc26)
    %8084 = llvm.add %8082, %8083 : i32 loc(#loc26)
    %8085 = llvm.mul %8081, %7977 : i32 loc(#loc26)
    %8086 = llvm.add %8084, %8085 : i32 loc(#loc26)
    %8087 = llvm.getelementptr inbounds %7263[%8086] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %8088 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %8089 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8090 = llvm.insertelement %7271, %8088[%8089 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %8090, %8087 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %8091 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %8092 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8093 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8094 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8095 = llvm.mlir.constant(1808 : i32) : i32 loc(#loc26)
    %8096 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8097 = llvm.and %7275, %8096 : i32 loc(#loc26)
    %8098 = llvm.icmp "eq" %8097, %8094 : i32 loc(#loc26)
    %8099 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8100 = llvm.select %8098, %8094, %8099 : i1, i32 loc(#loc26)
    %8101 = llvm.xor %8095, %8100 : i32 loc(#loc26)
    %8102 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8103 = llvm.and %7275, %8102 : i32 loc(#loc26)
    %8104 = llvm.icmp "eq" %8103, %8094 : i32 loc(#loc26)
    %8105 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8106 = llvm.select %8104, %8094, %8105 : i1, i32 loc(#loc26)
    %8107 = llvm.xor %8101, %8106 : i32 loc(#loc26)
    %8108 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8109 = llvm.and %7275, %8108 : i32 loc(#loc26)
    %8110 = llvm.icmp "eq" %8109, %8094 : i32 loc(#loc26)
    %8111 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8112 = llvm.select %8110, %8094, %8111 : i1, i32 loc(#loc26)
    %8113 = llvm.xor %8107, %8112 : i32 loc(#loc26)
    %8114 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8115 = llvm.and %7275, %8114 : i32 loc(#loc26)
    %8116 = llvm.icmp "eq" %8115, %8094 : i32 loc(#loc26)
    %8117 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8118 = llvm.select %8116, %8094, %8117 : i1, i32 loc(#loc26)
    %8119 = llvm.xor %8113, %8118 : i32 loc(#loc26)
    %8120 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8121 = llvm.and %7275, %8120 : i32 loc(#loc26)
    %8122 = llvm.icmp "eq" %8121, %8094 : i32 loc(#loc26)
    %8123 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8124 = llvm.select %8122, %8094, %8123 : i1, i32 loc(#loc26)
    %8125 = llvm.xor %8119, %8124 : i32 loc(#loc26)
    %8126 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8127 = llvm.and %7275, %8126 : i32 loc(#loc26)
    %8128 = llvm.icmp "eq" %8127, %8094 : i32 loc(#loc26)
    %8129 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8130 = llvm.select %8128, %8094, %8129 : i1, i32 loc(#loc26)
    %8131 = llvm.xor %8125, %8130 : i32 loc(#loc26)
    %8132 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8133 = llvm.and %7276, %8132 : i32 loc(#loc26)
    %8134 = llvm.icmp "eq" %8133, %8094 : i32 loc(#loc26)
    %8135 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %8136 = llvm.select %8134, %8094, %8135 : i1, i32 loc(#loc26)
    %8137 = llvm.xor %8131, %8136 : i32 loc(#loc26)
    %8138 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8139 = llvm.and %7276, %8138 : i32 loc(#loc26)
    %8140 = llvm.icmp "eq" %8139, %8094 : i32 loc(#loc26)
    %8141 = llvm.mlir.constant(136 : i32) : i32 loc(#loc26)
    %8142 = llvm.select %8140, %8094, %8141 : i1, i32 loc(#loc26)
    %8143 = llvm.xor %8137, %8142 : i32 loc(#loc26)
    %8144 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8145 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8146 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8147 = llvm.mlir.constant(56 : i32) : i32 loc(#loc26)
    %8148 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8149 = llvm.and %7275, %8148 : i32 loc(#loc26)
    %8150 = llvm.icmp "eq" %8149, %8145 : i32 loc(#loc26)
    %8151 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8152 = llvm.select %8150, %8145, %8151 : i1, i32 loc(#loc26)
    %8153 = llvm.xor %8146, %8152 : i32 loc(#loc26)
    %8154 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8155 = llvm.and %7275, %8154 : i32 loc(#loc26)
    %8156 = llvm.icmp "eq" %8155, %8145 : i32 loc(#loc26)
    %8157 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8158 = llvm.select %8156, %8145, %8157 : i1, i32 loc(#loc26)
    %8159 = llvm.xor %8153, %8158 : i32 loc(#loc26)
    %8160 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8161 = llvm.and %7275, %8160 : i32 loc(#loc26)
    %8162 = llvm.icmp "eq" %8161, %8145 : i32 loc(#loc26)
    %8163 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8164 = llvm.select %8162, %8145, %8163 : i1, i32 loc(#loc26)
    %8165 = llvm.xor %8159, %8164 : i32 loc(#loc26)
    %8166 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8167 = llvm.and %7275, %8166 : i32 loc(#loc26)
    %8168 = llvm.icmp "eq" %8167, %8145 : i32 loc(#loc26)
    %8169 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8170 = llvm.select %8168, %8145, %8169 : i1, i32 loc(#loc26)
    %8171 = llvm.xor %8165, %8170 : i32 loc(#loc26)
    %8172 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8173 = llvm.and %7275, %8172 : i32 loc(#loc26)
    %8174 = llvm.icmp "eq" %8173, %8145 : i32 loc(#loc26)
    %8175 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8176 = llvm.select %8174, %8145, %8175 : i1, i32 loc(#loc26)
    %8177 = llvm.xor %8171, %8176 : i32 loc(#loc26)
    %8178 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8179 = llvm.and %7275, %8178 : i32 loc(#loc26)
    %8180 = llvm.icmp "eq" %8179, %8145 : i32 loc(#loc26)
    %8181 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8182 = llvm.select %8180, %8145, %8181 : i1, i32 loc(#loc26)
    %8183 = llvm.xor %8147, %8182 : i32 loc(#loc26)
    %8184 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8185 = llvm.and %7276, %8184 : i32 loc(#loc26)
    %8186 = llvm.icmp "eq" %8185, %8145 : i32 loc(#loc26)
    %8187 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8188 = llvm.select %8186, %8145, %8187 : i1, i32 loc(#loc26)
    %8189 = llvm.xor %8183, %8188 : i32 loc(#loc26)
    %8190 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8191 = llvm.and %7276, %8190 : i32 loc(#loc26)
    %8192 = llvm.icmp "eq" %8191, %8145 : i32 loc(#loc26)
    %8193 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8194 = llvm.select %8192, %8145, %8193 : i1, i32 loc(#loc26)
    %8195 = llvm.xor %8177, %8194 : i32 loc(#loc26)
    %8196 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8197 = llvm.select %8192, %8145, %8196 : i1, i32 loc(#loc26)
    %8198 = llvm.xor %8189, %8197 : i32 loc(#loc26)
    %8199 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8200 = llvm.mul %8195, %8092 : i32 loc(#loc26)
    %8201 = llvm.add %8199, %8200 : i32 loc(#loc26)
    %8202 = llvm.mul %8198, %8093 : i32 loc(#loc26)
    %8203 = llvm.add %8201, %8202 : i32 loc(#loc26)
    %8204 = llvm.getelementptr inbounds %7263[%8203] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %8205 = llvm.mlir.undef : vector<1xbf16> loc(#loc26)
    %8206 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8207 = llvm.insertelement %7272, %8205[%8206 : i32] : vector<1xbf16> loc(#loc26)
    llvm.store %8207, %8204 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc26)
    %8208 = llvm.mlir.undef : !llvm.struct<(ptr<3>, i32, i32)> loc(#loc26)
    %8209 = llvm.insertvalue %7263, %8208[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %8210 = llvm.insertvalue %7264, %8209[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %8211 = llvm.insertvalue %7264, %8210[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    rocdl.barrier loc(#loc26)
    %8212 = llvm.extractvalue %8211[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %8213 = llvm.extractvalue %8211[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %8214 = llvm.extractvalue %8211[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc26)
    %8215 = rocdl.workitem.id.x : i32 loc(#loc26)
    %8216 = llvm.mlir.constant(64 : i32) : i32 loc(#loc26)
    %8217 = llvm.udiv %8215, %8216 : i32 loc(#loc26)
    %8218 = llvm.urem %8215, %8216 : i32 loc(#loc26)
    %8219 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8220 = llvm.urem %8217, %8219 : i32 loc(#loc26)
    %8221 = llvm.udiv %8217, %8219 : i32 loc(#loc26)
    %8222 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8223 = llvm.urem %8221, %8222 : i32 loc(#loc26)
    %8224 = llvm.udiv %8221, %8222 : i32 loc(#loc26)
    %8225 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8226 = llvm.urem %8220, %8225 : i32 loc(#loc26)
    %8227 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8228 = llvm.urem %8217, %8227 : i32 loc(#loc26)
    %8229 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8230 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8231 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8232 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8233 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8234 = llvm.mlir.constant(32 : i32) : i32 loc(#loc26)
    %8235 = llvm.mul %8226, %8234 : i32 loc(#loc26)
    %8236 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8237 = llvm.urem %8218, %8233 : i32 loc(#loc26)
    %8238 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8239 = llvm.icmp "uge" %8218, %8232 : i32 loc(#loc26)
    %8240 = llvm.select %8239, %8238, %8231 : i1, i32 loc(#loc26)
    %8241 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8242 = llvm.add %8231, %8237 : i32 loc(#loc26)
    %8243 = llvm.add %8242, %8231 : i32 loc(#loc26)
    %8244 = llvm.add %8243, %8235 : i32 loc(#loc26)
    %8245 = llvm.add %8236, %8240 : i32 loc(#loc26)
    %8246 = llvm.add %8245, %8241 : i32 loc(#loc26)
    %8247 = llvm.add %8244, %8214 : i32 loc(#loc26)
    %8248 = llvm.add %8246, %8213 : i32 loc(#loc26)
    %8249 = llvm.mlir.constant(16 : i32) : i32 loc(#loc26)
    %8250 = llvm.urem %8218, %8233 : i32 loc(#loc26)
    %8251 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8252 = llvm.icmp "uge" %8218, %8232 : i32 loc(#loc26)
    %8253 = llvm.select %8252, %8251, %8231 : i1, i32 loc(#loc26)
    %8254 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8255 = llvm.add %8231, %8250 : i32 loc(#loc26)
    %8256 = llvm.add %8255, %8231 : i32 loc(#loc26)
    %8257 = llvm.add %8256, %8235 : i32 loc(#loc26)
    %8258 = llvm.add %8249, %8253 : i32 loc(#loc26)
    %8259 = llvm.add %8258, %8254 : i32 loc(#loc26)
    %8260 = llvm.add %8257, %8214 : i32 loc(#loc26)
    %8261 = llvm.add %8259, %8213 : i32 loc(#loc26)
    %8262 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8263 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8264 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8265 = llvm.udiv %8247, %8263 : i32 loc(#loc26)
    %8266 = llvm.urem %8265, %8264 : i32 loc(#loc26)
    %8267 = llvm.udiv %8248, %8262 : i32 loc(#loc26)
    %8268 = llvm.xor %8267, %8266 : i32 loc(#loc26)
    %8269 = llvm.mul %8268, %8262 : i32 loc(#loc26)
    %8270 = llvm.urem %8248, %8262 : i32 loc(#loc26)
    %8271 = llvm.add %8269, %8270 : i32 loc(#loc26)
    %8272 = llvm.mul %8271, %8229 : i32 loc(#loc26)
    %8273 = llvm.mul %8247, %8230 : i32 loc(#loc26)
    %8274 = llvm.add %8272, %8273 : i32 loc(#loc26)
    %8275 = llvm.mlir.constant(8 : i32) : i32 loc(#loc26)
    %8276 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8277 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8278 = llvm.udiv %8260, %8276 : i32 loc(#loc26)
    %8279 = llvm.urem %8278, %8277 : i32 loc(#loc26)
    %8280 = llvm.udiv %8261, %8275 : i32 loc(#loc26)
    %8281 = llvm.xor %8280, %8279 : i32 loc(#loc26)
    %8282 = llvm.mul %8281, %8275 : i32 loc(#loc26)
    %8283 = llvm.urem %8261, %8275 : i32 loc(#loc26)
    %8284 = llvm.add %8282, %8283 : i32 loc(#loc26)
    %8285 = llvm.mul %8284, %8229 : i32 loc(#loc26)
    %8286 = llvm.mul %8260, %8230 : i32 loc(#loc26)
    %8287 = llvm.add %8285, %8286 : i32 loc(#loc26)
    %8288 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8289 = llvm.mul %8288, %8230 : i32 loc(#loc26)
    %8290 = llvm.add %8289, %8274 : i32 loc(#loc26)
    %8291 = llvm.add %8289, %8287 : i32 loc(#loc26)
    %8292 = llvm.mul %8213, %8229 : i32 loc(#loc26)
    %8293 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8294 = llvm.sub %8293, %8292 : i32 loc(#loc26)
    %8295 = llvm.getelementptr %8212[%8294] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %8296 = llvm.mul %8214, %8230 : i32 loc(#loc26)
    %8297 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8298 = llvm.sub %8297, %8296 : i32 loc(#loc26)
    %8299 = llvm.getelementptr %8295[%8298] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %8300 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8301 = llvm.add %8228, %8300 : i32 loc(#loc26)
    %8302 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc26)
    %8303 = llvm.mul %8302, %8301 : i32 loc(#loc26)
    %8304 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8305 = llvm.add %8290, %8303 : i32 loc(#loc26)
    %8306 = llvm.getelementptr %8299[%8305] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %8307 = llvm.load %8306 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc26)
    %8308 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8309 = llvm.extractelement %8307[%8308 : i32] : vector<8xbf16> loc(#loc26)
    %8310 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8311 = llvm.extractelement %8307[%8310 : i32] : vector<8xbf16> loc(#loc26)
    %8312 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8313 = llvm.extractelement %8307[%8312 : i32] : vector<8xbf16> loc(#loc26)
    %8314 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %8315 = llvm.extractelement %8307[%8314 : i32] : vector<8xbf16> loc(#loc26)
    %8316 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8317 = llvm.extractelement %8307[%8316 : i32] : vector<8xbf16> loc(#loc26)
    %8318 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %8319 = llvm.extractelement %8307[%8318 : i32] : vector<8xbf16> loc(#loc26)
    %8320 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %8321 = llvm.extractelement %8307[%8320 : i32] : vector<8xbf16> loc(#loc26)
    %8322 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %8323 = llvm.extractelement %8307[%8322 : i32] : vector<8xbf16> loc(#loc26)
    %8324 = llvm.add %8291, %8303 : i32 loc(#loc26)
    %8325 = llvm.getelementptr %8299[%8324] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc26)
    %8326 = llvm.load %8325 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc26)
    %8327 = llvm.mlir.constant(0 : i32) : i32 loc(#loc26)
    %8328 = llvm.extractelement %8326[%8327 : i32] : vector<8xbf16> loc(#loc26)
    %8329 = llvm.mlir.constant(1 : i32) : i32 loc(#loc26)
    %8330 = llvm.extractelement %8326[%8329 : i32] : vector<8xbf16> loc(#loc26)
    %8331 = llvm.mlir.constant(2 : i32) : i32 loc(#loc26)
    %8332 = llvm.extractelement %8326[%8331 : i32] : vector<8xbf16> loc(#loc26)
    %8333 = llvm.mlir.constant(3 : i32) : i32 loc(#loc26)
    %8334 = llvm.extractelement %8326[%8333 : i32] : vector<8xbf16> loc(#loc26)
    %8335 = llvm.mlir.constant(4 : i32) : i32 loc(#loc26)
    %8336 = llvm.extractelement %8326[%8335 : i32] : vector<8xbf16> loc(#loc26)
    %8337 = llvm.mlir.constant(5 : i32) : i32 loc(#loc26)
    %8338 = llvm.extractelement %8326[%8337 : i32] : vector<8xbf16> loc(#loc26)
    %8339 = llvm.mlir.constant(6 : i32) : i32 loc(#loc26)
    %8340 = llvm.extractelement %8326[%8339 : i32] : vector<8xbf16> loc(#loc26)
    %8341 = llvm.mlir.constant(7 : i32) : i32 loc(#loc26)
    %8342 = llvm.extractelement %8326[%8341 : i32] : vector<8xbf16> loc(#loc26)
    %8343 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc26)
    %8344 = llvm.insertvalue %8309, %8343[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8345 = llvm.insertvalue %8311, %8344[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8346 = llvm.insertvalue %8313, %8345[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8347 = llvm.insertvalue %8315, %8346[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8348 = llvm.insertvalue %8317, %8347[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8349 = llvm.insertvalue %8319, %8348[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8350 = llvm.insertvalue %8321, %8349[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8351 = llvm.insertvalue %8323, %8350[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8352 = llvm.insertvalue %8328, %8351[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8353 = llvm.insertvalue %8330, %8352[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8354 = llvm.insertvalue %8332, %8353[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8355 = llvm.insertvalue %8334, %8354[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8356 = llvm.insertvalue %8336, %8355[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8357 = llvm.insertvalue %8338, %8356[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8358 = llvm.insertvalue %8340, %8357[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    %8359 = llvm.insertvalue %8342, %8358[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc26)
    rocdl.barrier loc(#loc15)
    %8360 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8361 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %8362 = llvm.getelementptr %8361[%8360] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc15)
    %8363 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8364 = llvm.extractvalue %1755[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8365 = llvm.extractvalue %1755[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8366 = llvm.extractvalue %1755[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8367 = llvm.extractvalue %1755[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8368 = llvm.extractvalue %1755[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8369 = llvm.extractvalue %1755[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8370 = llvm.extractvalue %1755[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8371 = llvm.extractvalue %1755[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %8372 = rocdl.workitem.id.x : i32 loc(#loc15)
    %8373 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %8374 = llvm.urem %8372, %8373 : i32 loc(#loc15)
    %8375 = llvm.udiv %8372, %8373 : i32 loc(#loc15)
    %8376 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8377 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8378 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8379 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8380 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8381 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8382 = llvm.and %8374, %8381 : i32 loc(#loc15)
    %8383 = llvm.icmp "eq" %8382, %8380 : i32 loc(#loc15)
    %8384 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8385 = llvm.select %8383, %8380, %8384 : i1, i32 loc(#loc15)
    %8386 = llvm.xor %8380, %8385 : i32 loc(#loc15)
    %8387 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8388 = llvm.and %8374, %8387 : i32 loc(#loc15)
    %8389 = llvm.icmp "eq" %8388, %8380 : i32 loc(#loc15)
    %8390 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8391 = llvm.select %8389, %8380, %8390 : i1, i32 loc(#loc15)
    %8392 = llvm.xor %8386, %8391 : i32 loc(#loc15)
    %8393 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8394 = llvm.and %8374, %8393 : i32 loc(#loc15)
    %8395 = llvm.icmp "eq" %8394, %8380 : i32 loc(#loc15)
    %8396 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8397 = llvm.select %8395, %8380, %8396 : i1, i32 loc(#loc15)
    %8398 = llvm.xor %8392, %8397 : i32 loc(#loc15)
    %8399 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8400 = llvm.and %8374, %8399 : i32 loc(#loc15)
    %8401 = llvm.icmp "eq" %8400, %8380 : i32 loc(#loc15)
    %8402 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8403 = llvm.select %8401, %8380, %8402 : i1, i32 loc(#loc15)
    %8404 = llvm.xor %8398, %8403 : i32 loc(#loc15)
    %8405 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8406 = llvm.and %8374, %8405 : i32 loc(#loc15)
    %8407 = llvm.icmp "eq" %8406, %8380 : i32 loc(#loc15)
    %8408 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8409 = llvm.select %8407, %8380, %8408 : i1, i32 loc(#loc15)
    %8410 = llvm.xor %8404, %8409 : i32 loc(#loc15)
    %8411 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8412 = llvm.and %8374, %8411 : i32 loc(#loc15)
    %8413 = llvm.icmp "eq" %8412, %8380 : i32 loc(#loc15)
    %8414 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8415 = llvm.select %8413, %8380, %8414 : i1, i32 loc(#loc15)
    %8416 = llvm.xor %8410, %8415 : i32 loc(#loc15)
    %8417 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8418 = llvm.and %8375, %8417 : i32 loc(#loc15)
    %8419 = llvm.icmp "eq" %8418, %8380 : i32 loc(#loc15)
    %8420 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %8421 = llvm.select %8419, %8380, %8420 : i1, i32 loc(#loc15)
    %8422 = llvm.xor %8416, %8421 : i32 loc(#loc15)
    %8423 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8424 = llvm.and %8375, %8423 : i32 loc(#loc15)
    %8425 = llvm.icmp "eq" %8424, %8380 : i32 loc(#loc15)
    %8426 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %8427 = llvm.select %8425, %8380, %8426 : i1, i32 loc(#loc15)
    %8428 = llvm.xor %8422, %8427 : i32 loc(#loc15)
    %8429 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8430 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8431 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8432 = llvm.and %8374, %8431 : i32 loc(#loc15)
    %8433 = llvm.icmp "eq" %8432, %8430 : i32 loc(#loc15)
    %8434 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8435 = llvm.select %8433, %8430, %8434 : i1, i32 loc(#loc15)
    %8436 = llvm.xor %8430, %8435 : i32 loc(#loc15)
    %8437 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8438 = llvm.and %8374, %8437 : i32 loc(#loc15)
    %8439 = llvm.icmp "eq" %8438, %8430 : i32 loc(#loc15)
    %8440 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8441 = llvm.select %8439, %8430, %8440 : i1, i32 loc(#loc15)
    %8442 = llvm.xor %8436, %8441 : i32 loc(#loc15)
    %8443 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8444 = llvm.and %8374, %8443 : i32 loc(#loc15)
    %8445 = llvm.icmp "eq" %8444, %8430 : i32 loc(#loc15)
    %8446 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8447 = llvm.select %8445, %8430, %8446 : i1, i32 loc(#loc15)
    %8448 = llvm.xor %8442, %8447 : i32 loc(#loc15)
    %8449 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8450 = llvm.and %8374, %8449 : i32 loc(#loc15)
    %8451 = llvm.icmp "eq" %8450, %8430 : i32 loc(#loc15)
    %8452 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8453 = llvm.select %8451, %8430, %8452 : i1, i32 loc(#loc15)
    %8454 = llvm.xor %8448, %8453 : i32 loc(#loc15)
    %8455 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8456 = llvm.and %8374, %8455 : i32 loc(#loc15)
    %8457 = llvm.icmp "eq" %8456, %8430 : i32 loc(#loc15)
    %8458 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8459 = llvm.select %8457, %8430, %8458 : i1, i32 loc(#loc15)
    %8460 = llvm.xor %8454, %8459 : i32 loc(#loc15)
    %8461 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8462 = llvm.and %8374, %8461 : i32 loc(#loc15)
    %8463 = llvm.icmp "eq" %8462, %8430 : i32 loc(#loc15)
    %8464 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8465 = llvm.select %8463, %8430, %8464 : i1, i32 loc(#loc15)
    %8466 = llvm.xor %8430, %8465 : i32 loc(#loc15)
    %8467 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8468 = llvm.and %8375, %8467 : i32 loc(#loc15)
    %8469 = llvm.icmp "eq" %8468, %8430 : i32 loc(#loc15)
    %8470 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8471 = llvm.select %8469, %8430, %8470 : i1, i32 loc(#loc15)
    %8472 = llvm.xor %8466, %8471 : i32 loc(#loc15)
    %8473 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8474 = llvm.and %8375, %8473 : i32 loc(#loc15)
    %8475 = llvm.icmp "eq" %8474, %8430 : i32 loc(#loc15)
    %8476 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8477 = llvm.select %8475, %8430, %8476 : i1, i32 loc(#loc15)
    %8478 = llvm.xor %8460, %8477 : i32 loc(#loc15)
    %8479 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8480 = llvm.select %8475, %8430, %8479 : i1, i32 loc(#loc15)
    %8481 = llvm.xor %8472, %8480 : i32 loc(#loc15)
    %8482 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8483 = llvm.mul %8478, %8378 : i32 loc(#loc15)
    %8484 = llvm.add %8482, %8483 : i32 loc(#loc15)
    %8485 = llvm.mul %8481, %8379 : i32 loc(#loc15)
    %8486 = llvm.add %8484, %8485 : i32 loc(#loc15)
    %8487 = llvm.getelementptr inbounds %8362[%8486] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %8488 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %8489 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8490 = llvm.insertelement %8364, %8488[%8489 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %8490, %8487 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %8491 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8492 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8493 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8494 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8495 = llvm.mlir.constant(272 : i32) : i32 loc(#loc15)
    %8496 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8497 = llvm.and %8374, %8496 : i32 loc(#loc15)
    %8498 = llvm.icmp "eq" %8497, %8494 : i32 loc(#loc15)
    %8499 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8500 = llvm.select %8498, %8494, %8499 : i1, i32 loc(#loc15)
    %8501 = llvm.xor %8495, %8500 : i32 loc(#loc15)
    %8502 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8503 = llvm.and %8374, %8502 : i32 loc(#loc15)
    %8504 = llvm.icmp "eq" %8503, %8494 : i32 loc(#loc15)
    %8505 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8506 = llvm.select %8504, %8494, %8505 : i1, i32 loc(#loc15)
    %8507 = llvm.xor %8501, %8506 : i32 loc(#loc15)
    %8508 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8509 = llvm.and %8374, %8508 : i32 loc(#loc15)
    %8510 = llvm.icmp "eq" %8509, %8494 : i32 loc(#loc15)
    %8511 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8512 = llvm.select %8510, %8494, %8511 : i1, i32 loc(#loc15)
    %8513 = llvm.xor %8507, %8512 : i32 loc(#loc15)
    %8514 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8515 = llvm.and %8374, %8514 : i32 loc(#loc15)
    %8516 = llvm.icmp "eq" %8515, %8494 : i32 loc(#loc15)
    %8517 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8518 = llvm.select %8516, %8494, %8517 : i1, i32 loc(#loc15)
    %8519 = llvm.xor %8513, %8518 : i32 loc(#loc15)
    %8520 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8521 = llvm.and %8374, %8520 : i32 loc(#loc15)
    %8522 = llvm.icmp "eq" %8521, %8494 : i32 loc(#loc15)
    %8523 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8524 = llvm.select %8522, %8494, %8523 : i1, i32 loc(#loc15)
    %8525 = llvm.xor %8519, %8524 : i32 loc(#loc15)
    %8526 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8527 = llvm.and %8374, %8526 : i32 loc(#loc15)
    %8528 = llvm.icmp "eq" %8527, %8494 : i32 loc(#loc15)
    %8529 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8530 = llvm.select %8528, %8494, %8529 : i1, i32 loc(#loc15)
    %8531 = llvm.xor %8525, %8530 : i32 loc(#loc15)
    %8532 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8533 = llvm.and %8375, %8532 : i32 loc(#loc15)
    %8534 = llvm.icmp "eq" %8533, %8494 : i32 loc(#loc15)
    %8535 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %8536 = llvm.select %8534, %8494, %8535 : i1, i32 loc(#loc15)
    %8537 = llvm.xor %8531, %8536 : i32 loc(#loc15)
    %8538 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8539 = llvm.and %8375, %8538 : i32 loc(#loc15)
    %8540 = llvm.icmp "eq" %8539, %8494 : i32 loc(#loc15)
    %8541 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %8542 = llvm.select %8540, %8494, %8541 : i1, i32 loc(#loc15)
    %8543 = llvm.xor %8537, %8542 : i32 loc(#loc15)
    %8544 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8545 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8546 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8547 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8548 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8549 = llvm.and %8374, %8548 : i32 loc(#loc15)
    %8550 = llvm.icmp "eq" %8549, %8545 : i32 loc(#loc15)
    %8551 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8552 = llvm.select %8550, %8545, %8551 : i1, i32 loc(#loc15)
    %8553 = llvm.xor %8546, %8552 : i32 loc(#loc15)
    %8554 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8555 = llvm.and %8374, %8554 : i32 loc(#loc15)
    %8556 = llvm.icmp "eq" %8555, %8545 : i32 loc(#loc15)
    %8557 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8558 = llvm.select %8556, %8545, %8557 : i1, i32 loc(#loc15)
    %8559 = llvm.xor %8553, %8558 : i32 loc(#loc15)
    %8560 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8561 = llvm.and %8374, %8560 : i32 loc(#loc15)
    %8562 = llvm.icmp "eq" %8561, %8545 : i32 loc(#loc15)
    %8563 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8564 = llvm.select %8562, %8545, %8563 : i1, i32 loc(#loc15)
    %8565 = llvm.xor %8559, %8564 : i32 loc(#loc15)
    %8566 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8567 = llvm.and %8374, %8566 : i32 loc(#loc15)
    %8568 = llvm.icmp "eq" %8567, %8545 : i32 loc(#loc15)
    %8569 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8570 = llvm.select %8568, %8545, %8569 : i1, i32 loc(#loc15)
    %8571 = llvm.xor %8565, %8570 : i32 loc(#loc15)
    %8572 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8573 = llvm.and %8374, %8572 : i32 loc(#loc15)
    %8574 = llvm.icmp "eq" %8573, %8545 : i32 loc(#loc15)
    %8575 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8576 = llvm.select %8574, %8545, %8575 : i1, i32 loc(#loc15)
    %8577 = llvm.xor %8571, %8576 : i32 loc(#loc15)
    %8578 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8579 = llvm.and %8374, %8578 : i32 loc(#loc15)
    %8580 = llvm.icmp "eq" %8579, %8545 : i32 loc(#loc15)
    %8581 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8582 = llvm.select %8580, %8545, %8581 : i1, i32 loc(#loc15)
    %8583 = llvm.xor %8547, %8582 : i32 loc(#loc15)
    %8584 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8585 = llvm.and %8375, %8584 : i32 loc(#loc15)
    %8586 = llvm.icmp "eq" %8585, %8545 : i32 loc(#loc15)
    %8587 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8588 = llvm.select %8586, %8545, %8587 : i1, i32 loc(#loc15)
    %8589 = llvm.xor %8583, %8588 : i32 loc(#loc15)
    %8590 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8591 = llvm.and %8375, %8590 : i32 loc(#loc15)
    %8592 = llvm.icmp "eq" %8591, %8545 : i32 loc(#loc15)
    %8593 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8594 = llvm.select %8592, %8545, %8593 : i1, i32 loc(#loc15)
    %8595 = llvm.xor %8577, %8594 : i32 loc(#loc15)
    %8596 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8597 = llvm.select %8592, %8545, %8596 : i1, i32 loc(#loc15)
    %8598 = llvm.xor %8589, %8597 : i32 loc(#loc15)
    %8599 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8600 = llvm.mul %8595, %8492 : i32 loc(#loc15)
    %8601 = llvm.add %8599, %8600 : i32 loc(#loc15)
    %8602 = llvm.mul %8598, %8493 : i32 loc(#loc15)
    %8603 = llvm.add %8601, %8602 : i32 loc(#loc15)
    %8604 = llvm.getelementptr inbounds %8362[%8603] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %8605 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %8606 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8607 = llvm.insertelement %8365, %8605[%8606 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %8607, %8604 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %8608 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8609 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8610 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8611 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8612 = llvm.mlir.constant(512 : i32) : i32 loc(#loc15)
    %8613 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8614 = llvm.and %8374, %8613 : i32 loc(#loc15)
    %8615 = llvm.icmp "eq" %8614, %8611 : i32 loc(#loc15)
    %8616 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8617 = llvm.select %8615, %8611, %8616 : i1, i32 loc(#loc15)
    %8618 = llvm.xor %8612, %8617 : i32 loc(#loc15)
    %8619 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8620 = llvm.and %8374, %8619 : i32 loc(#loc15)
    %8621 = llvm.icmp "eq" %8620, %8611 : i32 loc(#loc15)
    %8622 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8623 = llvm.select %8621, %8611, %8622 : i1, i32 loc(#loc15)
    %8624 = llvm.xor %8618, %8623 : i32 loc(#loc15)
    %8625 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8626 = llvm.and %8374, %8625 : i32 loc(#loc15)
    %8627 = llvm.icmp "eq" %8626, %8611 : i32 loc(#loc15)
    %8628 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8629 = llvm.select %8627, %8611, %8628 : i1, i32 loc(#loc15)
    %8630 = llvm.xor %8624, %8629 : i32 loc(#loc15)
    %8631 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8632 = llvm.and %8374, %8631 : i32 loc(#loc15)
    %8633 = llvm.icmp "eq" %8632, %8611 : i32 loc(#loc15)
    %8634 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8635 = llvm.select %8633, %8611, %8634 : i1, i32 loc(#loc15)
    %8636 = llvm.xor %8630, %8635 : i32 loc(#loc15)
    %8637 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8638 = llvm.and %8374, %8637 : i32 loc(#loc15)
    %8639 = llvm.icmp "eq" %8638, %8611 : i32 loc(#loc15)
    %8640 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8641 = llvm.select %8639, %8611, %8640 : i1, i32 loc(#loc15)
    %8642 = llvm.xor %8636, %8641 : i32 loc(#loc15)
    %8643 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8644 = llvm.and %8374, %8643 : i32 loc(#loc15)
    %8645 = llvm.icmp "eq" %8644, %8611 : i32 loc(#loc15)
    %8646 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8647 = llvm.select %8645, %8611, %8646 : i1, i32 loc(#loc15)
    %8648 = llvm.xor %8642, %8647 : i32 loc(#loc15)
    %8649 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8650 = llvm.and %8375, %8649 : i32 loc(#loc15)
    %8651 = llvm.icmp "eq" %8650, %8611 : i32 loc(#loc15)
    %8652 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %8653 = llvm.select %8651, %8611, %8652 : i1, i32 loc(#loc15)
    %8654 = llvm.xor %8648, %8653 : i32 loc(#loc15)
    %8655 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8656 = llvm.and %8375, %8655 : i32 loc(#loc15)
    %8657 = llvm.icmp "eq" %8656, %8611 : i32 loc(#loc15)
    %8658 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %8659 = llvm.select %8657, %8611, %8658 : i1, i32 loc(#loc15)
    %8660 = llvm.xor %8654, %8659 : i32 loc(#loc15)
    %8661 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8662 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8663 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8664 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8665 = llvm.and %8374, %8664 : i32 loc(#loc15)
    %8666 = llvm.icmp "eq" %8665, %8662 : i32 loc(#loc15)
    %8667 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8668 = llvm.select %8666, %8662, %8667 : i1, i32 loc(#loc15)
    %8669 = llvm.xor %8662, %8668 : i32 loc(#loc15)
    %8670 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8671 = llvm.and %8374, %8670 : i32 loc(#loc15)
    %8672 = llvm.icmp "eq" %8671, %8662 : i32 loc(#loc15)
    %8673 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8674 = llvm.select %8672, %8662, %8673 : i1, i32 loc(#loc15)
    %8675 = llvm.xor %8669, %8674 : i32 loc(#loc15)
    %8676 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8677 = llvm.and %8374, %8676 : i32 loc(#loc15)
    %8678 = llvm.icmp "eq" %8677, %8662 : i32 loc(#loc15)
    %8679 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8680 = llvm.select %8678, %8662, %8679 : i1, i32 loc(#loc15)
    %8681 = llvm.xor %8675, %8680 : i32 loc(#loc15)
    %8682 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8683 = llvm.and %8374, %8682 : i32 loc(#loc15)
    %8684 = llvm.icmp "eq" %8683, %8662 : i32 loc(#loc15)
    %8685 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8686 = llvm.select %8684, %8662, %8685 : i1, i32 loc(#loc15)
    %8687 = llvm.xor %8681, %8686 : i32 loc(#loc15)
    %8688 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8689 = llvm.and %8374, %8688 : i32 loc(#loc15)
    %8690 = llvm.icmp "eq" %8689, %8662 : i32 loc(#loc15)
    %8691 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8692 = llvm.select %8690, %8662, %8691 : i1, i32 loc(#loc15)
    %8693 = llvm.xor %8687, %8692 : i32 loc(#loc15)
    %8694 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8695 = llvm.and %8374, %8694 : i32 loc(#loc15)
    %8696 = llvm.icmp "eq" %8695, %8662 : i32 loc(#loc15)
    %8697 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8698 = llvm.select %8696, %8662, %8697 : i1, i32 loc(#loc15)
    %8699 = llvm.xor %8663, %8698 : i32 loc(#loc15)
    %8700 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8701 = llvm.and %8375, %8700 : i32 loc(#loc15)
    %8702 = llvm.icmp "eq" %8701, %8662 : i32 loc(#loc15)
    %8703 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8704 = llvm.select %8702, %8662, %8703 : i1, i32 loc(#loc15)
    %8705 = llvm.xor %8699, %8704 : i32 loc(#loc15)
    %8706 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8707 = llvm.and %8375, %8706 : i32 loc(#loc15)
    %8708 = llvm.icmp "eq" %8707, %8662 : i32 loc(#loc15)
    %8709 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8710 = llvm.select %8708, %8662, %8709 : i1, i32 loc(#loc15)
    %8711 = llvm.xor %8693, %8710 : i32 loc(#loc15)
    %8712 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8713 = llvm.select %8708, %8662, %8712 : i1, i32 loc(#loc15)
    %8714 = llvm.xor %8705, %8713 : i32 loc(#loc15)
    %8715 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8716 = llvm.mul %8711, %8609 : i32 loc(#loc15)
    %8717 = llvm.add %8715, %8716 : i32 loc(#loc15)
    %8718 = llvm.mul %8714, %8610 : i32 loc(#loc15)
    %8719 = llvm.add %8717, %8718 : i32 loc(#loc15)
    %8720 = llvm.getelementptr inbounds %8362[%8719] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %8721 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %8722 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8723 = llvm.insertelement %8366, %8721[%8722 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %8723, %8720 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %8724 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %8725 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8726 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8727 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8728 = llvm.mlir.constant(784 : i32) : i32 loc(#loc15)
    %8729 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8730 = llvm.and %8374, %8729 : i32 loc(#loc15)
    %8731 = llvm.icmp "eq" %8730, %8727 : i32 loc(#loc15)
    %8732 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8733 = llvm.select %8731, %8727, %8732 : i1, i32 loc(#loc15)
    %8734 = llvm.xor %8728, %8733 : i32 loc(#loc15)
    %8735 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8736 = llvm.and %8374, %8735 : i32 loc(#loc15)
    %8737 = llvm.icmp "eq" %8736, %8727 : i32 loc(#loc15)
    %8738 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8739 = llvm.select %8737, %8727, %8738 : i1, i32 loc(#loc15)
    %8740 = llvm.xor %8734, %8739 : i32 loc(#loc15)
    %8741 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8742 = llvm.and %8374, %8741 : i32 loc(#loc15)
    %8743 = llvm.icmp "eq" %8742, %8727 : i32 loc(#loc15)
    %8744 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8745 = llvm.select %8743, %8727, %8744 : i1, i32 loc(#loc15)
    %8746 = llvm.xor %8740, %8745 : i32 loc(#loc15)
    %8747 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8748 = llvm.and %8374, %8747 : i32 loc(#loc15)
    %8749 = llvm.icmp "eq" %8748, %8727 : i32 loc(#loc15)
    %8750 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8751 = llvm.select %8749, %8727, %8750 : i1, i32 loc(#loc15)
    %8752 = llvm.xor %8746, %8751 : i32 loc(#loc15)
    %8753 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8754 = llvm.and %8374, %8753 : i32 loc(#loc15)
    %8755 = llvm.icmp "eq" %8754, %8727 : i32 loc(#loc15)
    %8756 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8757 = llvm.select %8755, %8727, %8756 : i1, i32 loc(#loc15)
    %8758 = llvm.xor %8752, %8757 : i32 loc(#loc15)
    %8759 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8760 = llvm.and %8374, %8759 : i32 loc(#loc15)
    %8761 = llvm.icmp "eq" %8760, %8727 : i32 loc(#loc15)
    %8762 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8763 = llvm.select %8761, %8727, %8762 : i1, i32 loc(#loc15)
    %8764 = llvm.xor %8758, %8763 : i32 loc(#loc15)
    %8765 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8766 = llvm.and %8375, %8765 : i32 loc(#loc15)
    %8767 = llvm.icmp "eq" %8766, %8727 : i32 loc(#loc15)
    %8768 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %8769 = llvm.select %8767, %8727, %8768 : i1, i32 loc(#loc15)
    %8770 = llvm.xor %8764, %8769 : i32 loc(#loc15)
    %8771 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8772 = llvm.and %8375, %8771 : i32 loc(#loc15)
    %8773 = llvm.icmp "eq" %8772, %8727 : i32 loc(#loc15)
    %8774 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %8775 = llvm.select %8773, %8727, %8774 : i1, i32 loc(#loc15)
    %8776 = llvm.xor %8770, %8775 : i32 loc(#loc15)
    %8777 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8778 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8779 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8780 = llvm.mlir.constant(24 : i32) : i32 loc(#loc15)
    %8781 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8782 = llvm.and %8374, %8781 : i32 loc(#loc15)
    %8783 = llvm.icmp "eq" %8782, %8778 : i32 loc(#loc15)
    %8784 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8785 = llvm.select %8783, %8778, %8784 : i1, i32 loc(#loc15)
    %8786 = llvm.xor %8779, %8785 : i32 loc(#loc15)
    %8787 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8788 = llvm.and %8374, %8787 : i32 loc(#loc15)
    %8789 = llvm.icmp "eq" %8788, %8778 : i32 loc(#loc15)
    %8790 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8791 = llvm.select %8789, %8778, %8790 : i1, i32 loc(#loc15)
    %8792 = llvm.xor %8786, %8791 : i32 loc(#loc15)
    %8793 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8794 = llvm.and %8374, %8793 : i32 loc(#loc15)
    %8795 = llvm.icmp "eq" %8794, %8778 : i32 loc(#loc15)
    %8796 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8797 = llvm.select %8795, %8778, %8796 : i1, i32 loc(#loc15)
    %8798 = llvm.xor %8792, %8797 : i32 loc(#loc15)
    %8799 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8800 = llvm.and %8374, %8799 : i32 loc(#loc15)
    %8801 = llvm.icmp "eq" %8800, %8778 : i32 loc(#loc15)
    %8802 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8803 = llvm.select %8801, %8778, %8802 : i1, i32 loc(#loc15)
    %8804 = llvm.xor %8798, %8803 : i32 loc(#loc15)
    %8805 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8806 = llvm.and %8374, %8805 : i32 loc(#loc15)
    %8807 = llvm.icmp "eq" %8806, %8778 : i32 loc(#loc15)
    %8808 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8809 = llvm.select %8807, %8778, %8808 : i1, i32 loc(#loc15)
    %8810 = llvm.xor %8804, %8809 : i32 loc(#loc15)
    %8811 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8812 = llvm.and %8374, %8811 : i32 loc(#loc15)
    %8813 = llvm.icmp "eq" %8812, %8778 : i32 loc(#loc15)
    %8814 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8815 = llvm.select %8813, %8778, %8814 : i1, i32 loc(#loc15)
    %8816 = llvm.xor %8780, %8815 : i32 loc(#loc15)
    %8817 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8818 = llvm.and %8375, %8817 : i32 loc(#loc15)
    %8819 = llvm.icmp "eq" %8818, %8778 : i32 loc(#loc15)
    %8820 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8821 = llvm.select %8819, %8778, %8820 : i1, i32 loc(#loc15)
    %8822 = llvm.xor %8816, %8821 : i32 loc(#loc15)
    %8823 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8824 = llvm.and %8375, %8823 : i32 loc(#loc15)
    %8825 = llvm.icmp "eq" %8824, %8778 : i32 loc(#loc15)
    %8826 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8827 = llvm.select %8825, %8778, %8826 : i1, i32 loc(#loc15)
    %8828 = llvm.xor %8810, %8827 : i32 loc(#loc15)
    %8829 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8830 = llvm.select %8825, %8778, %8829 : i1, i32 loc(#loc15)
    %8831 = llvm.xor %8822, %8830 : i32 loc(#loc15)
    %8832 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8833 = llvm.mul %8828, %8725 : i32 loc(#loc15)
    %8834 = llvm.add %8832, %8833 : i32 loc(#loc15)
    %8835 = llvm.mul %8831, %8726 : i32 loc(#loc15)
    %8836 = llvm.add %8834, %8835 : i32 loc(#loc15)
    %8837 = llvm.getelementptr inbounds %8362[%8836] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %8838 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %8839 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8840 = llvm.insertelement %8367, %8838[%8839 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %8840, %8837 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %8841 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8842 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8843 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8844 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8845 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc15)
    %8846 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8847 = llvm.and %8374, %8846 : i32 loc(#loc15)
    %8848 = llvm.icmp "eq" %8847, %8844 : i32 loc(#loc15)
    %8849 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8850 = llvm.select %8848, %8844, %8849 : i1, i32 loc(#loc15)
    %8851 = llvm.xor %8845, %8850 : i32 loc(#loc15)
    %8852 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8853 = llvm.and %8374, %8852 : i32 loc(#loc15)
    %8854 = llvm.icmp "eq" %8853, %8844 : i32 loc(#loc15)
    %8855 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8856 = llvm.select %8854, %8844, %8855 : i1, i32 loc(#loc15)
    %8857 = llvm.xor %8851, %8856 : i32 loc(#loc15)
    %8858 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8859 = llvm.and %8374, %8858 : i32 loc(#loc15)
    %8860 = llvm.icmp "eq" %8859, %8844 : i32 loc(#loc15)
    %8861 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8862 = llvm.select %8860, %8844, %8861 : i1, i32 loc(#loc15)
    %8863 = llvm.xor %8857, %8862 : i32 loc(#loc15)
    %8864 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8865 = llvm.and %8374, %8864 : i32 loc(#loc15)
    %8866 = llvm.icmp "eq" %8865, %8844 : i32 loc(#loc15)
    %8867 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8868 = llvm.select %8866, %8844, %8867 : i1, i32 loc(#loc15)
    %8869 = llvm.xor %8863, %8868 : i32 loc(#loc15)
    %8870 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8871 = llvm.and %8374, %8870 : i32 loc(#loc15)
    %8872 = llvm.icmp "eq" %8871, %8844 : i32 loc(#loc15)
    %8873 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8874 = llvm.select %8872, %8844, %8873 : i1, i32 loc(#loc15)
    %8875 = llvm.xor %8869, %8874 : i32 loc(#loc15)
    %8876 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8877 = llvm.and %8374, %8876 : i32 loc(#loc15)
    %8878 = llvm.icmp "eq" %8877, %8844 : i32 loc(#loc15)
    %8879 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8880 = llvm.select %8878, %8844, %8879 : i1, i32 loc(#loc15)
    %8881 = llvm.xor %8875, %8880 : i32 loc(#loc15)
    %8882 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8883 = llvm.and %8375, %8882 : i32 loc(#loc15)
    %8884 = llvm.icmp "eq" %8883, %8844 : i32 loc(#loc15)
    %8885 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %8886 = llvm.select %8884, %8844, %8885 : i1, i32 loc(#loc15)
    %8887 = llvm.xor %8881, %8886 : i32 loc(#loc15)
    %8888 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8889 = llvm.and %8375, %8888 : i32 loc(#loc15)
    %8890 = llvm.icmp "eq" %8889, %8844 : i32 loc(#loc15)
    %8891 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %8892 = llvm.select %8890, %8844, %8891 : i1, i32 loc(#loc15)
    %8893 = llvm.xor %8887, %8892 : i32 loc(#loc15)
    %8894 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8895 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8896 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8897 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8898 = llvm.and %8374, %8897 : i32 loc(#loc15)
    %8899 = llvm.icmp "eq" %8898, %8895 : i32 loc(#loc15)
    %8900 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8901 = llvm.select %8899, %8895, %8900 : i1, i32 loc(#loc15)
    %8902 = llvm.xor %8895, %8901 : i32 loc(#loc15)
    %8903 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8904 = llvm.and %8374, %8903 : i32 loc(#loc15)
    %8905 = llvm.icmp "eq" %8904, %8895 : i32 loc(#loc15)
    %8906 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8907 = llvm.select %8905, %8895, %8906 : i1, i32 loc(#loc15)
    %8908 = llvm.xor %8902, %8907 : i32 loc(#loc15)
    %8909 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8910 = llvm.and %8374, %8909 : i32 loc(#loc15)
    %8911 = llvm.icmp "eq" %8910, %8895 : i32 loc(#loc15)
    %8912 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8913 = llvm.select %8911, %8895, %8912 : i1, i32 loc(#loc15)
    %8914 = llvm.xor %8908, %8913 : i32 loc(#loc15)
    %8915 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8916 = llvm.and %8374, %8915 : i32 loc(#loc15)
    %8917 = llvm.icmp "eq" %8916, %8895 : i32 loc(#loc15)
    %8918 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8919 = llvm.select %8917, %8895, %8918 : i1, i32 loc(#loc15)
    %8920 = llvm.xor %8914, %8919 : i32 loc(#loc15)
    %8921 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8922 = llvm.and %8374, %8921 : i32 loc(#loc15)
    %8923 = llvm.icmp "eq" %8922, %8895 : i32 loc(#loc15)
    %8924 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8925 = llvm.select %8923, %8895, %8924 : i1, i32 loc(#loc15)
    %8926 = llvm.xor %8920, %8925 : i32 loc(#loc15)
    %8927 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8928 = llvm.and %8374, %8927 : i32 loc(#loc15)
    %8929 = llvm.icmp "eq" %8928, %8895 : i32 loc(#loc15)
    %8930 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8931 = llvm.select %8929, %8895, %8930 : i1, i32 loc(#loc15)
    %8932 = llvm.xor %8896, %8931 : i32 loc(#loc15)
    %8933 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8934 = llvm.and %8375, %8933 : i32 loc(#loc15)
    %8935 = llvm.icmp "eq" %8934, %8895 : i32 loc(#loc15)
    %8936 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8937 = llvm.select %8935, %8895, %8936 : i1, i32 loc(#loc15)
    %8938 = llvm.xor %8932, %8937 : i32 loc(#loc15)
    %8939 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8940 = llvm.and %8375, %8939 : i32 loc(#loc15)
    %8941 = llvm.icmp "eq" %8940, %8895 : i32 loc(#loc15)
    %8942 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8943 = llvm.select %8941, %8895, %8942 : i1, i32 loc(#loc15)
    %8944 = llvm.xor %8926, %8943 : i32 loc(#loc15)
    %8945 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8946 = llvm.select %8941, %8895, %8945 : i1, i32 loc(#loc15)
    %8947 = llvm.xor %8938, %8946 : i32 loc(#loc15)
    %8948 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8949 = llvm.mul %8944, %8842 : i32 loc(#loc15)
    %8950 = llvm.add %8948, %8949 : i32 loc(#loc15)
    %8951 = llvm.mul %8947, %8843 : i32 loc(#loc15)
    %8952 = llvm.add %8950, %8951 : i32 loc(#loc15)
    %8953 = llvm.getelementptr inbounds %8362[%8952] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %8954 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %8955 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8956 = llvm.insertelement %8368, %8954[%8955 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %8956, %8953 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %8957 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %8958 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8959 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8960 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %8961 = llvm.mlir.constant(1296 : i32) : i32 loc(#loc15)
    %8962 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8963 = llvm.and %8374, %8962 : i32 loc(#loc15)
    %8964 = llvm.icmp "eq" %8963, %8960 : i32 loc(#loc15)
    %8965 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8966 = llvm.select %8964, %8960, %8965 : i1, i32 loc(#loc15)
    %8967 = llvm.xor %8961, %8966 : i32 loc(#loc15)
    %8968 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8969 = llvm.and %8374, %8968 : i32 loc(#loc15)
    %8970 = llvm.icmp "eq" %8969, %8960 : i32 loc(#loc15)
    %8971 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %8972 = llvm.select %8970, %8960, %8971 : i1, i32 loc(#loc15)
    %8973 = llvm.xor %8967, %8972 : i32 loc(#loc15)
    %8974 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8975 = llvm.and %8374, %8974 : i32 loc(#loc15)
    %8976 = llvm.icmp "eq" %8975, %8960 : i32 loc(#loc15)
    %8977 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %8978 = llvm.select %8976, %8960, %8977 : i1, i32 loc(#loc15)
    %8979 = llvm.xor %8973, %8978 : i32 loc(#loc15)
    %8980 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8981 = llvm.and %8374, %8980 : i32 loc(#loc15)
    %8982 = llvm.icmp "eq" %8981, %8960 : i32 loc(#loc15)
    %8983 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %8984 = llvm.select %8982, %8960, %8983 : i1, i32 loc(#loc15)
    %8985 = llvm.xor %8979, %8984 : i32 loc(#loc15)
    %8986 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8987 = llvm.and %8374, %8986 : i32 loc(#loc15)
    %8988 = llvm.icmp "eq" %8987, %8960 : i32 loc(#loc15)
    %8989 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %8990 = llvm.select %8988, %8960, %8989 : i1, i32 loc(#loc15)
    %8991 = llvm.xor %8985, %8990 : i32 loc(#loc15)
    %8992 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8993 = llvm.and %8374, %8992 : i32 loc(#loc15)
    %8994 = llvm.icmp "eq" %8993, %8960 : i32 loc(#loc15)
    %8995 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %8996 = llvm.select %8994, %8960, %8995 : i1, i32 loc(#loc15)
    %8997 = llvm.xor %8991, %8996 : i32 loc(#loc15)
    %8998 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %8999 = llvm.and %8375, %8998 : i32 loc(#loc15)
    %9000 = llvm.icmp "eq" %8999, %8960 : i32 loc(#loc15)
    %9001 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %9002 = llvm.select %9000, %8960, %9001 : i1, i32 loc(#loc15)
    %9003 = llvm.xor %8997, %9002 : i32 loc(#loc15)
    %9004 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9005 = llvm.and %8375, %9004 : i32 loc(#loc15)
    %9006 = llvm.icmp "eq" %9005, %8960 : i32 loc(#loc15)
    %9007 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %9008 = llvm.select %9006, %8960, %9007 : i1, i32 loc(#loc15)
    %9009 = llvm.xor %9003, %9008 : i32 loc(#loc15)
    %9010 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9011 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9012 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9013 = llvm.mlir.constant(40 : i32) : i32 loc(#loc15)
    %9014 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9015 = llvm.and %8374, %9014 : i32 loc(#loc15)
    %9016 = llvm.icmp "eq" %9015, %9011 : i32 loc(#loc15)
    %9017 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9018 = llvm.select %9016, %9011, %9017 : i1, i32 loc(#loc15)
    %9019 = llvm.xor %9012, %9018 : i32 loc(#loc15)
    %9020 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9021 = llvm.and %8374, %9020 : i32 loc(#loc15)
    %9022 = llvm.icmp "eq" %9021, %9011 : i32 loc(#loc15)
    %9023 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9024 = llvm.select %9022, %9011, %9023 : i1, i32 loc(#loc15)
    %9025 = llvm.xor %9019, %9024 : i32 loc(#loc15)
    %9026 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9027 = llvm.and %8374, %9026 : i32 loc(#loc15)
    %9028 = llvm.icmp "eq" %9027, %9011 : i32 loc(#loc15)
    %9029 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9030 = llvm.select %9028, %9011, %9029 : i1, i32 loc(#loc15)
    %9031 = llvm.xor %9025, %9030 : i32 loc(#loc15)
    %9032 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9033 = llvm.and %8374, %9032 : i32 loc(#loc15)
    %9034 = llvm.icmp "eq" %9033, %9011 : i32 loc(#loc15)
    %9035 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9036 = llvm.select %9034, %9011, %9035 : i1, i32 loc(#loc15)
    %9037 = llvm.xor %9031, %9036 : i32 loc(#loc15)
    %9038 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9039 = llvm.and %8374, %9038 : i32 loc(#loc15)
    %9040 = llvm.icmp "eq" %9039, %9011 : i32 loc(#loc15)
    %9041 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9042 = llvm.select %9040, %9011, %9041 : i1, i32 loc(#loc15)
    %9043 = llvm.xor %9037, %9042 : i32 loc(#loc15)
    %9044 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9045 = llvm.and %8374, %9044 : i32 loc(#loc15)
    %9046 = llvm.icmp "eq" %9045, %9011 : i32 loc(#loc15)
    %9047 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9048 = llvm.select %9046, %9011, %9047 : i1, i32 loc(#loc15)
    %9049 = llvm.xor %9013, %9048 : i32 loc(#loc15)
    %9050 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9051 = llvm.and %8375, %9050 : i32 loc(#loc15)
    %9052 = llvm.icmp "eq" %9051, %9011 : i32 loc(#loc15)
    %9053 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9054 = llvm.select %9052, %9011, %9053 : i1, i32 loc(#loc15)
    %9055 = llvm.xor %9049, %9054 : i32 loc(#loc15)
    %9056 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9057 = llvm.and %8375, %9056 : i32 loc(#loc15)
    %9058 = llvm.icmp "eq" %9057, %9011 : i32 loc(#loc15)
    %9059 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9060 = llvm.select %9058, %9011, %9059 : i1, i32 loc(#loc15)
    %9061 = llvm.xor %9043, %9060 : i32 loc(#loc15)
    %9062 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9063 = llvm.select %9058, %9011, %9062 : i1, i32 loc(#loc15)
    %9064 = llvm.xor %9055, %9063 : i32 loc(#loc15)
    %9065 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9066 = llvm.mul %9061, %8958 : i32 loc(#loc15)
    %9067 = llvm.add %9065, %9066 : i32 loc(#loc15)
    %9068 = llvm.mul %9064, %8959 : i32 loc(#loc15)
    %9069 = llvm.add %9067, %9068 : i32 loc(#loc15)
    %9070 = llvm.getelementptr inbounds %8362[%9069] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9071 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %9072 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9073 = llvm.insertelement %8369, %9071[%9072 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %9073, %9070 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %9074 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %9075 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9076 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9077 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9078 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc15)
    %9079 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9080 = llvm.and %8374, %9079 : i32 loc(#loc15)
    %9081 = llvm.icmp "eq" %9080, %9077 : i32 loc(#loc15)
    %9082 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9083 = llvm.select %9081, %9077, %9082 : i1, i32 loc(#loc15)
    %9084 = llvm.xor %9078, %9083 : i32 loc(#loc15)
    %9085 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9086 = llvm.and %8374, %9085 : i32 loc(#loc15)
    %9087 = llvm.icmp "eq" %9086, %9077 : i32 loc(#loc15)
    %9088 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9089 = llvm.select %9087, %9077, %9088 : i1, i32 loc(#loc15)
    %9090 = llvm.xor %9084, %9089 : i32 loc(#loc15)
    %9091 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9092 = llvm.and %8374, %9091 : i32 loc(#loc15)
    %9093 = llvm.icmp "eq" %9092, %9077 : i32 loc(#loc15)
    %9094 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9095 = llvm.select %9093, %9077, %9094 : i1, i32 loc(#loc15)
    %9096 = llvm.xor %9090, %9095 : i32 loc(#loc15)
    %9097 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9098 = llvm.and %8374, %9097 : i32 loc(#loc15)
    %9099 = llvm.icmp "eq" %9098, %9077 : i32 loc(#loc15)
    %9100 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9101 = llvm.select %9099, %9077, %9100 : i1, i32 loc(#loc15)
    %9102 = llvm.xor %9096, %9101 : i32 loc(#loc15)
    %9103 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9104 = llvm.and %8374, %9103 : i32 loc(#loc15)
    %9105 = llvm.icmp "eq" %9104, %9077 : i32 loc(#loc15)
    %9106 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9107 = llvm.select %9105, %9077, %9106 : i1, i32 loc(#loc15)
    %9108 = llvm.xor %9102, %9107 : i32 loc(#loc15)
    %9109 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9110 = llvm.and %8374, %9109 : i32 loc(#loc15)
    %9111 = llvm.icmp "eq" %9110, %9077 : i32 loc(#loc15)
    %9112 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9113 = llvm.select %9111, %9077, %9112 : i1, i32 loc(#loc15)
    %9114 = llvm.xor %9108, %9113 : i32 loc(#loc15)
    %9115 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9116 = llvm.and %8375, %9115 : i32 loc(#loc15)
    %9117 = llvm.icmp "eq" %9116, %9077 : i32 loc(#loc15)
    %9118 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %9119 = llvm.select %9117, %9077, %9118 : i1, i32 loc(#loc15)
    %9120 = llvm.xor %9114, %9119 : i32 loc(#loc15)
    %9121 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9122 = llvm.and %8375, %9121 : i32 loc(#loc15)
    %9123 = llvm.icmp "eq" %9122, %9077 : i32 loc(#loc15)
    %9124 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %9125 = llvm.select %9123, %9077, %9124 : i1, i32 loc(#loc15)
    %9126 = llvm.xor %9120, %9125 : i32 loc(#loc15)
    %9127 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9128 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9129 = llvm.mlir.constant(48 : i32) : i32 loc(#loc15)
    %9130 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9131 = llvm.and %8374, %9130 : i32 loc(#loc15)
    %9132 = llvm.icmp "eq" %9131, %9128 : i32 loc(#loc15)
    %9133 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9134 = llvm.select %9132, %9128, %9133 : i1, i32 loc(#loc15)
    %9135 = llvm.xor %9128, %9134 : i32 loc(#loc15)
    %9136 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9137 = llvm.and %8374, %9136 : i32 loc(#loc15)
    %9138 = llvm.icmp "eq" %9137, %9128 : i32 loc(#loc15)
    %9139 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9140 = llvm.select %9138, %9128, %9139 : i1, i32 loc(#loc15)
    %9141 = llvm.xor %9135, %9140 : i32 loc(#loc15)
    %9142 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9143 = llvm.and %8374, %9142 : i32 loc(#loc15)
    %9144 = llvm.icmp "eq" %9143, %9128 : i32 loc(#loc15)
    %9145 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9146 = llvm.select %9144, %9128, %9145 : i1, i32 loc(#loc15)
    %9147 = llvm.xor %9141, %9146 : i32 loc(#loc15)
    %9148 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9149 = llvm.and %8374, %9148 : i32 loc(#loc15)
    %9150 = llvm.icmp "eq" %9149, %9128 : i32 loc(#loc15)
    %9151 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9152 = llvm.select %9150, %9128, %9151 : i1, i32 loc(#loc15)
    %9153 = llvm.xor %9147, %9152 : i32 loc(#loc15)
    %9154 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9155 = llvm.and %8374, %9154 : i32 loc(#loc15)
    %9156 = llvm.icmp "eq" %9155, %9128 : i32 loc(#loc15)
    %9157 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9158 = llvm.select %9156, %9128, %9157 : i1, i32 loc(#loc15)
    %9159 = llvm.xor %9153, %9158 : i32 loc(#loc15)
    %9160 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9161 = llvm.and %8374, %9160 : i32 loc(#loc15)
    %9162 = llvm.icmp "eq" %9161, %9128 : i32 loc(#loc15)
    %9163 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9164 = llvm.select %9162, %9128, %9163 : i1, i32 loc(#loc15)
    %9165 = llvm.xor %9129, %9164 : i32 loc(#loc15)
    %9166 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9167 = llvm.and %8375, %9166 : i32 loc(#loc15)
    %9168 = llvm.icmp "eq" %9167, %9128 : i32 loc(#loc15)
    %9169 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9170 = llvm.select %9168, %9128, %9169 : i1, i32 loc(#loc15)
    %9171 = llvm.xor %9165, %9170 : i32 loc(#loc15)
    %9172 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9173 = llvm.and %8375, %9172 : i32 loc(#loc15)
    %9174 = llvm.icmp "eq" %9173, %9128 : i32 loc(#loc15)
    %9175 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9176 = llvm.select %9174, %9128, %9175 : i1, i32 loc(#loc15)
    %9177 = llvm.xor %9159, %9176 : i32 loc(#loc15)
    %9178 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9179 = llvm.select %9174, %9128, %9178 : i1, i32 loc(#loc15)
    %9180 = llvm.xor %9171, %9179 : i32 loc(#loc15)
    %9181 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9182 = llvm.mul %9177, %9075 : i32 loc(#loc15)
    %9183 = llvm.add %9181, %9182 : i32 loc(#loc15)
    %9184 = llvm.mul %9180, %9076 : i32 loc(#loc15)
    %9185 = llvm.add %9183, %9184 : i32 loc(#loc15)
    %9186 = llvm.getelementptr inbounds %8362[%9185] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9187 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %9188 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9189 = llvm.insertelement %8370, %9187[%9188 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %9189, %9186 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %9190 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %9191 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9192 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9193 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9194 = llvm.mlir.constant(1808 : i32) : i32 loc(#loc15)
    %9195 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9196 = llvm.and %8374, %9195 : i32 loc(#loc15)
    %9197 = llvm.icmp "eq" %9196, %9193 : i32 loc(#loc15)
    %9198 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9199 = llvm.select %9197, %9193, %9198 : i1, i32 loc(#loc15)
    %9200 = llvm.xor %9194, %9199 : i32 loc(#loc15)
    %9201 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9202 = llvm.and %8374, %9201 : i32 loc(#loc15)
    %9203 = llvm.icmp "eq" %9202, %9193 : i32 loc(#loc15)
    %9204 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9205 = llvm.select %9203, %9193, %9204 : i1, i32 loc(#loc15)
    %9206 = llvm.xor %9200, %9205 : i32 loc(#loc15)
    %9207 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9208 = llvm.and %8374, %9207 : i32 loc(#loc15)
    %9209 = llvm.icmp "eq" %9208, %9193 : i32 loc(#loc15)
    %9210 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9211 = llvm.select %9209, %9193, %9210 : i1, i32 loc(#loc15)
    %9212 = llvm.xor %9206, %9211 : i32 loc(#loc15)
    %9213 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9214 = llvm.and %8374, %9213 : i32 loc(#loc15)
    %9215 = llvm.icmp "eq" %9214, %9193 : i32 loc(#loc15)
    %9216 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9217 = llvm.select %9215, %9193, %9216 : i1, i32 loc(#loc15)
    %9218 = llvm.xor %9212, %9217 : i32 loc(#loc15)
    %9219 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9220 = llvm.and %8374, %9219 : i32 loc(#loc15)
    %9221 = llvm.icmp "eq" %9220, %9193 : i32 loc(#loc15)
    %9222 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9223 = llvm.select %9221, %9193, %9222 : i1, i32 loc(#loc15)
    %9224 = llvm.xor %9218, %9223 : i32 loc(#loc15)
    %9225 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9226 = llvm.and %8374, %9225 : i32 loc(#loc15)
    %9227 = llvm.icmp "eq" %9226, %9193 : i32 loc(#loc15)
    %9228 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9229 = llvm.select %9227, %9193, %9228 : i1, i32 loc(#loc15)
    %9230 = llvm.xor %9224, %9229 : i32 loc(#loc15)
    %9231 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9232 = llvm.and %8375, %9231 : i32 loc(#loc15)
    %9233 = llvm.icmp "eq" %9232, %9193 : i32 loc(#loc15)
    %9234 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %9235 = llvm.select %9233, %9193, %9234 : i1, i32 loc(#loc15)
    %9236 = llvm.xor %9230, %9235 : i32 loc(#loc15)
    %9237 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9238 = llvm.and %8375, %9237 : i32 loc(#loc15)
    %9239 = llvm.icmp "eq" %9238, %9193 : i32 loc(#loc15)
    %9240 = llvm.mlir.constant(136 : i32) : i32 loc(#loc15)
    %9241 = llvm.select %9239, %9193, %9240 : i1, i32 loc(#loc15)
    %9242 = llvm.xor %9236, %9241 : i32 loc(#loc15)
    %9243 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9244 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9245 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9246 = llvm.mlir.constant(56 : i32) : i32 loc(#loc15)
    %9247 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9248 = llvm.and %8374, %9247 : i32 loc(#loc15)
    %9249 = llvm.icmp "eq" %9248, %9244 : i32 loc(#loc15)
    %9250 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9251 = llvm.select %9249, %9244, %9250 : i1, i32 loc(#loc15)
    %9252 = llvm.xor %9245, %9251 : i32 loc(#loc15)
    %9253 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9254 = llvm.and %8374, %9253 : i32 loc(#loc15)
    %9255 = llvm.icmp "eq" %9254, %9244 : i32 loc(#loc15)
    %9256 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9257 = llvm.select %9255, %9244, %9256 : i1, i32 loc(#loc15)
    %9258 = llvm.xor %9252, %9257 : i32 loc(#loc15)
    %9259 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9260 = llvm.and %8374, %9259 : i32 loc(#loc15)
    %9261 = llvm.icmp "eq" %9260, %9244 : i32 loc(#loc15)
    %9262 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9263 = llvm.select %9261, %9244, %9262 : i1, i32 loc(#loc15)
    %9264 = llvm.xor %9258, %9263 : i32 loc(#loc15)
    %9265 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9266 = llvm.and %8374, %9265 : i32 loc(#loc15)
    %9267 = llvm.icmp "eq" %9266, %9244 : i32 loc(#loc15)
    %9268 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9269 = llvm.select %9267, %9244, %9268 : i1, i32 loc(#loc15)
    %9270 = llvm.xor %9264, %9269 : i32 loc(#loc15)
    %9271 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9272 = llvm.and %8374, %9271 : i32 loc(#loc15)
    %9273 = llvm.icmp "eq" %9272, %9244 : i32 loc(#loc15)
    %9274 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9275 = llvm.select %9273, %9244, %9274 : i1, i32 loc(#loc15)
    %9276 = llvm.xor %9270, %9275 : i32 loc(#loc15)
    %9277 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9278 = llvm.and %8374, %9277 : i32 loc(#loc15)
    %9279 = llvm.icmp "eq" %9278, %9244 : i32 loc(#loc15)
    %9280 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9281 = llvm.select %9279, %9244, %9280 : i1, i32 loc(#loc15)
    %9282 = llvm.xor %9246, %9281 : i32 loc(#loc15)
    %9283 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9284 = llvm.and %8375, %9283 : i32 loc(#loc15)
    %9285 = llvm.icmp "eq" %9284, %9244 : i32 loc(#loc15)
    %9286 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9287 = llvm.select %9285, %9244, %9286 : i1, i32 loc(#loc15)
    %9288 = llvm.xor %9282, %9287 : i32 loc(#loc15)
    %9289 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9290 = llvm.and %8375, %9289 : i32 loc(#loc15)
    %9291 = llvm.icmp "eq" %9290, %9244 : i32 loc(#loc15)
    %9292 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9293 = llvm.select %9291, %9244, %9292 : i1, i32 loc(#loc15)
    %9294 = llvm.xor %9276, %9293 : i32 loc(#loc15)
    %9295 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9296 = llvm.select %9291, %9244, %9295 : i1, i32 loc(#loc15)
    %9297 = llvm.xor %9288, %9296 : i32 loc(#loc15)
    %9298 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9299 = llvm.mul %9294, %9191 : i32 loc(#loc15)
    %9300 = llvm.add %9298, %9299 : i32 loc(#loc15)
    %9301 = llvm.mul %9297, %9192 : i32 loc(#loc15)
    %9302 = llvm.add %9300, %9301 : i32 loc(#loc15)
    %9303 = llvm.getelementptr inbounds %8362[%9302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9304 = llvm.mlir.undef : vector<1xbf16> loc(#loc15)
    %9305 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9306 = llvm.insertelement %8371, %9304[%9305 : i32] : vector<1xbf16> loc(#loc15)
    llvm.store %9306, %9303 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc15)
    %9307 = llvm.mlir.undef : !llvm.struct<(ptr<3>, i32, i32)> loc(#loc15)
    %9308 = llvm.insertvalue %8362, %9307[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %9309 = llvm.insertvalue %8363, %9308[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %9310 = llvm.insertvalue %8363, %9309[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    rocdl.barrier loc(#loc15)
    %9311 = llvm.extractvalue %9310[0] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %9312 = llvm.extractvalue %9310[1] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %9313 = llvm.extractvalue %9310[2] : !llvm.struct<(ptr<3>, i32, i32)>  loc(#loc15)
    %9314 = rocdl.workitem.id.x : i32 loc(#loc15)
    %9315 = llvm.mlir.constant(64 : i32) : i32 loc(#loc15)
    %9316 = llvm.udiv %9314, %9315 : i32 loc(#loc15)
    %9317 = llvm.urem %9314, %9315 : i32 loc(#loc15)
    %9318 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9319 = llvm.urem %9316, %9318 : i32 loc(#loc15)
    %9320 = llvm.udiv %9316, %9318 : i32 loc(#loc15)
    %9321 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9322 = llvm.urem %9320, %9321 : i32 loc(#loc15)
    %9323 = llvm.udiv %9320, %9321 : i32 loc(#loc15)
    %9324 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9325 = llvm.urem %9322, %9324 : i32 loc(#loc15)
    %9326 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9327 = llvm.urem %9316, %9326 : i32 loc(#loc15)
    %9328 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9329 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9330 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9331 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9332 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9333 = llvm.mlir.constant(32 : i32) : i32 loc(#loc15)
    %9334 = llvm.mul %9325, %9333 : i32 loc(#loc15)
    %9335 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9336 = llvm.urem %9317, %9332 : i32 loc(#loc15)
    %9337 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9338 = llvm.icmp "uge" %9317, %9331 : i32 loc(#loc15)
    %9339 = llvm.select %9338, %9337, %9330 : i1, i32 loc(#loc15)
    %9340 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9341 = llvm.add %9330, %9336 : i32 loc(#loc15)
    %9342 = llvm.add %9341, %9330 : i32 loc(#loc15)
    %9343 = llvm.add %9342, %9334 : i32 loc(#loc15)
    %9344 = llvm.add %9335, %9339 : i32 loc(#loc15)
    %9345 = llvm.add %9344, %9340 : i32 loc(#loc15)
    %9346 = llvm.add %9343, %9312 : i32 loc(#loc15)
    %9347 = llvm.add %9345, %9313 : i32 loc(#loc15)
    %9348 = llvm.mlir.constant(16 : i32) : i32 loc(#loc15)
    %9349 = llvm.urem %9317, %9332 : i32 loc(#loc15)
    %9350 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9351 = llvm.icmp "uge" %9317, %9331 : i32 loc(#loc15)
    %9352 = llvm.select %9351, %9350, %9330 : i1, i32 loc(#loc15)
    %9353 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9354 = llvm.add %9330, %9349 : i32 loc(#loc15)
    %9355 = llvm.add %9354, %9330 : i32 loc(#loc15)
    %9356 = llvm.add %9355, %9334 : i32 loc(#loc15)
    %9357 = llvm.add %9348, %9352 : i32 loc(#loc15)
    %9358 = llvm.add %9357, %9353 : i32 loc(#loc15)
    %9359 = llvm.add %9356, %9312 : i32 loc(#loc15)
    %9360 = llvm.add %9358, %9313 : i32 loc(#loc15)
    %9361 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9362 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9363 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9364 = llvm.udiv %9346, %9362 : i32 loc(#loc15)
    %9365 = llvm.urem %9364, %9363 : i32 loc(#loc15)
    %9366 = llvm.udiv %9347, %9361 : i32 loc(#loc15)
    %9367 = llvm.xor %9366, %9365 : i32 loc(#loc15)
    %9368 = llvm.mul %9367, %9361 : i32 loc(#loc15)
    %9369 = llvm.urem %9347, %9361 : i32 loc(#loc15)
    %9370 = llvm.add %9368, %9369 : i32 loc(#loc15)
    %9371 = llvm.mul %9346, %9329 : i32 loc(#loc15)
    %9372 = llvm.mul %9370, %9328 : i32 loc(#loc15)
    %9373 = llvm.add %9371, %9372 : i32 loc(#loc15)
    %9374 = llvm.mlir.constant(8 : i32) : i32 loc(#loc15)
    %9375 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9376 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9377 = llvm.udiv %9359, %9375 : i32 loc(#loc15)
    %9378 = llvm.urem %9377, %9376 : i32 loc(#loc15)
    %9379 = llvm.udiv %9360, %9374 : i32 loc(#loc15)
    %9380 = llvm.xor %9379, %9378 : i32 loc(#loc15)
    %9381 = llvm.mul %9380, %9374 : i32 loc(#loc15)
    %9382 = llvm.urem %9360, %9374 : i32 loc(#loc15)
    %9383 = llvm.add %9381, %9382 : i32 loc(#loc15)
    %9384 = llvm.mul %9359, %9329 : i32 loc(#loc15)
    %9385 = llvm.mul %9383, %9328 : i32 loc(#loc15)
    %9386 = llvm.add %9384, %9385 : i32 loc(#loc15)
    %9387 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9388 = llvm.mul %9387, %9329 : i32 loc(#loc15)
    %9389 = llvm.add %9388, %9373 : i32 loc(#loc15)
    %9390 = llvm.add %9388, %9386 : i32 loc(#loc15)
    %9391 = llvm.mul %9312, %9329 : i32 loc(#loc15)
    %9392 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9393 = llvm.sub %9392, %9391 : i32 loc(#loc15)
    %9394 = llvm.getelementptr %9311[%9393] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9395 = llvm.mul %9313, %9328 : i32 loc(#loc15)
    %9396 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9397 = llvm.sub %9396, %9395 : i32 loc(#loc15)
    %9398 = llvm.getelementptr %9394[%9397] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9399 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9400 = llvm.add %9327, %9399 : i32 loc(#loc15)
    %9401 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc15)
    %9402 = llvm.mul %9401, %9400 : i32 loc(#loc15)
    %9403 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9404 = llvm.add %9389, %9402 : i32 loc(#loc15)
    %9405 = llvm.getelementptr %9398[%9404] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9406 = llvm.load %9405 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc15)
    %9407 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9408 = llvm.extractelement %9406[%9407 : i32] : vector<8xbf16> loc(#loc15)
    %9409 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9410 = llvm.extractelement %9406[%9409 : i32] : vector<8xbf16> loc(#loc15)
    %9411 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9412 = llvm.extractelement %9406[%9411 : i32] : vector<8xbf16> loc(#loc15)
    %9413 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %9414 = llvm.extractelement %9406[%9413 : i32] : vector<8xbf16> loc(#loc15)
    %9415 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9416 = llvm.extractelement %9406[%9415 : i32] : vector<8xbf16> loc(#loc15)
    %9417 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %9418 = llvm.extractelement %9406[%9417 : i32] : vector<8xbf16> loc(#loc15)
    %9419 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %9420 = llvm.extractelement %9406[%9419 : i32] : vector<8xbf16> loc(#loc15)
    %9421 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %9422 = llvm.extractelement %9406[%9421 : i32] : vector<8xbf16> loc(#loc15)
    %9423 = llvm.add %9390, %9402 : i32 loc(#loc15)
    %9424 = llvm.getelementptr %9398[%9423] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc15)
    %9425 = llvm.load %9424 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc15)
    %9426 = llvm.mlir.constant(0 : i32) : i32 loc(#loc15)
    %9427 = llvm.extractelement %9425[%9426 : i32] : vector<8xbf16> loc(#loc15)
    %9428 = llvm.mlir.constant(1 : i32) : i32 loc(#loc15)
    %9429 = llvm.extractelement %9425[%9428 : i32] : vector<8xbf16> loc(#loc15)
    %9430 = llvm.mlir.constant(2 : i32) : i32 loc(#loc15)
    %9431 = llvm.extractelement %9425[%9430 : i32] : vector<8xbf16> loc(#loc15)
    %9432 = llvm.mlir.constant(3 : i32) : i32 loc(#loc15)
    %9433 = llvm.extractelement %9425[%9432 : i32] : vector<8xbf16> loc(#loc15)
    %9434 = llvm.mlir.constant(4 : i32) : i32 loc(#loc15)
    %9435 = llvm.extractelement %9425[%9434 : i32] : vector<8xbf16> loc(#loc15)
    %9436 = llvm.mlir.constant(5 : i32) : i32 loc(#loc15)
    %9437 = llvm.extractelement %9425[%9436 : i32] : vector<8xbf16> loc(#loc15)
    %9438 = llvm.mlir.constant(6 : i32) : i32 loc(#loc15)
    %9439 = llvm.extractelement %9425[%9438 : i32] : vector<8xbf16> loc(#loc15)
    %9440 = llvm.mlir.constant(7 : i32) : i32 loc(#loc15)
    %9441 = llvm.extractelement %9425[%9440 : i32] : vector<8xbf16> loc(#loc15)
    %9442 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc15)
    %9443 = llvm.insertvalue %9408, %9442[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9444 = llvm.insertvalue %9410, %9443[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9445 = llvm.insertvalue %9412, %9444[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9446 = llvm.insertvalue %9414, %9445[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9447 = llvm.insertvalue %9416, %9446[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9448 = llvm.insertvalue %9418, %9447[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9449 = llvm.insertvalue %9420, %9448[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9450 = llvm.insertvalue %9422, %9449[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9451 = llvm.insertvalue %9427, %9450[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9452 = llvm.insertvalue %9429, %9451[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9453 = llvm.insertvalue %9431, %9452[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9454 = llvm.insertvalue %9433, %9453[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9455 = llvm.insertvalue %9435, %9454[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9456 = llvm.insertvalue %9437, %9455[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9457 = llvm.insertvalue %9439, %9456[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    %9458 = llvm.insertvalue %9441, %9457[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc15)
    llvm.cond_br %4658, ^bb8, ^bb9 loc(#loc27)
  ^bb8:  // pred: ^bb7
    %9459 = llvm.extractvalue %9458[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9460 = llvm.extractvalue %9458[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9461 = llvm.extractvalue %9458[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9462 = llvm.extractvalue %9458[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9463 = llvm.extractvalue %9458[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9464 = llvm.extractvalue %9458[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9465 = llvm.extractvalue %9458[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9466 = llvm.extractvalue %9458[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9467 = llvm.extractvalue %9458[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9468 = llvm.extractvalue %9458[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9469 = llvm.extractvalue %9458[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9470 = llvm.extractvalue %9458[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9471 = llvm.extractvalue %9458[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9472 = llvm.extractvalue %9458[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9473 = llvm.extractvalue %9458[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9474 = llvm.extractvalue %9458[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9475 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9476 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9477 = llvm.insertelement %9459, %9475[%9476 : i32] : vector<8xbf16> loc(#loc27)
    %9478 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9479 = llvm.insertelement %9460, %9477[%9478 : i32] : vector<8xbf16> loc(#loc27)
    %9480 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9481 = llvm.insertelement %9461, %9479[%9480 : i32] : vector<8xbf16> loc(#loc27)
    %9482 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9483 = llvm.insertelement %9462, %9481[%9482 : i32] : vector<8xbf16> loc(#loc27)
    %9484 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9485 = llvm.insertelement %9463, %9483[%9484 : i32] : vector<8xbf16> loc(#loc27)
    %9486 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9487 = llvm.insertelement %9464, %9485[%9486 : i32] : vector<8xbf16> loc(#loc27)
    %9488 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9489 = llvm.insertelement %9465, %9487[%9488 : i32] : vector<8xbf16> loc(#loc27)
    %9490 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9491 = llvm.insertelement %9466, %9489[%9490 : i32] : vector<8xbf16> loc(#loc27)
    %9492 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9493 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9494 = llvm.extractelement %9491[%9493 : i32] : vector<8xbf16> loc(#loc27)
    %9495 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9496 = llvm.insertelement %9494, %9492[%9495 : i32] : vector<8xbf16> loc(#loc27)
    %9497 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9498 = llvm.extractelement %9491[%9497 : i32] : vector<8xbf16> loc(#loc27)
    %9499 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9500 = llvm.insertelement %9498, %9496[%9499 : i32] : vector<8xbf16> loc(#loc27)
    %9501 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9502 = llvm.extractelement %9491[%9501 : i32] : vector<8xbf16> loc(#loc27)
    %9503 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9504 = llvm.insertelement %9502, %9500[%9503 : i32] : vector<8xbf16> loc(#loc27)
    %9505 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9506 = llvm.extractelement %9491[%9505 : i32] : vector<8xbf16> loc(#loc27)
    %9507 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9508 = llvm.insertelement %9506, %9504[%9507 : i32] : vector<8xbf16> loc(#loc27)
    %9509 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9510 = llvm.extractelement %9491[%9509 : i32] : vector<8xbf16> loc(#loc27)
    %9511 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9512 = llvm.insertelement %9510, %9508[%9511 : i32] : vector<8xbf16> loc(#loc27)
    %9513 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9514 = llvm.extractelement %9491[%9513 : i32] : vector<8xbf16> loc(#loc27)
    %9515 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9516 = llvm.insertelement %9514, %9512[%9515 : i32] : vector<8xbf16> loc(#loc27)
    %9517 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9518 = llvm.extractelement %9491[%9517 : i32] : vector<8xbf16> loc(#loc27)
    %9519 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9520 = llvm.insertelement %9518, %9516[%9519 : i32] : vector<8xbf16> loc(#loc27)
    %9521 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9522 = llvm.extractelement %9491[%9521 : i32] : vector<8xbf16> loc(#loc27)
    %9523 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9524 = llvm.insertelement %9522, %9520[%9523 : i32] : vector<8xbf16> loc(#loc27)
    %9525 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9526 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9527 = llvm.insertelement %9467, %9525[%9526 : i32] : vector<8xbf16> loc(#loc27)
    %9528 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9529 = llvm.insertelement %9468, %9527[%9528 : i32] : vector<8xbf16> loc(#loc27)
    %9530 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9531 = llvm.insertelement %9469, %9529[%9530 : i32] : vector<8xbf16> loc(#loc27)
    %9532 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9533 = llvm.insertelement %9470, %9531[%9532 : i32] : vector<8xbf16> loc(#loc27)
    %9534 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9535 = llvm.insertelement %9471, %9533[%9534 : i32] : vector<8xbf16> loc(#loc27)
    %9536 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9537 = llvm.insertelement %9472, %9535[%9536 : i32] : vector<8xbf16> loc(#loc27)
    %9538 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9539 = llvm.insertelement %9473, %9537[%9538 : i32] : vector<8xbf16> loc(#loc27)
    %9540 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9541 = llvm.insertelement %9474, %9539[%9540 : i32] : vector<8xbf16> loc(#loc27)
    %9542 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9543 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9544 = llvm.extractelement %9541[%9543 : i32] : vector<8xbf16> loc(#loc27)
    %9545 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9546 = llvm.insertelement %9544, %9542[%9545 : i32] : vector<8xbf16> loc(#loc27)
    %9547 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9548 = llvm.extractelement %9541[%9547 : i32] : vector<8xbf16> loc(#loc27)
    %9549 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9550 = llvm.insertelement %9548, %9546[%9549 : i32] : vector<8xbf16> loc(#loc27)
    %9551 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9552 = llvm.extractelement %9541[%9551 : i32] : vector<8xbf16> loc(#loc27)
    %9553 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9554 = llvm.insertelement %9552, %9550[%9553 : i32] : vector<8xbf16> loc(#loc27)
    %9555 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9556 = llvm.extractelement %9541[%9555 : i32] : vector<8xbf16> loc(#loc27)
    %9557 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9558 = llvm.insertelement %9556, %9554[%9557 : i32] : vector<8xbf16> loc(#loc27)
    %9559 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9560 = llvm.extractelement %9541[%9559 : i32] : vector<8xbf16> loc(#loc27)
    %9561 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9562 = llvm.insertelement %9560, %9558[%9561 : i32] : vector<8xbf16> loc(#loc27)
    %9563 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9564 = llvm.extractelement %9541[%9563 : i32] : vector<8xbf16> loc(#loc27)
    %9565 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9566 = llvm.insertelement %9564, %9562[%9565 : i32] : vector<8xbf16> loc(#loc27)
    %9567 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9568 = llvm.extractelement %9541[%9567 : i32] : vector<8xbf16> loc(#loc27)
    %9569 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9570 = llvm.insertelement %9568, %9566[%9569 : i32] : vector<8xbf16> loc(#loc27)
    %9571 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9572 = llvm.extractelement %9541[%9571 : i32] : vector<8xbf16> loc(#loc27)
    %9573 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9574 = llvm.insertelement %9572, %9570[%9573 : i32] : vector<8xbf16> loc(#loc27)
    %9575 = llvm.extractvalue %8359[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9576 = llvm.extractvalue %8359[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9577 = llvm.extractvalue %8359[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9578 = llvm.extractvalue %8359[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9579 = llvm.extractvalue %8359[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9580 = llvm.extractvalue %8359[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9581 = llvm.extractvalue %8359[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9582 = llvm.extractvalue %8359[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9583 = llvm.extractvalue %8359[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9584 = llvm.extractvalue %8359[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9585 = llvm.extractvalue %8359[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9586 = llvm.extractvalue %8359[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9587 = llvm.extractvalue %8359[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9588 = llvm.extractvalue %8359[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9589 = llvm.extractvalue %8359[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9590 = llvm.extractvalue %8359[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc27)
    %9591 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9592 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9593 = llvm.insertelement %9575, %9591[%9592 : i32] : vector<8xbf16> loc(#loc27)
    %9594 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9595 = llvm.insertelement %9576, %9593[%9594 : i32] : vector<8xbf16> loc(#loc27)
    %9596 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9597 = llvm.insertelement %9577, %9595[%9596 : i32] : vector<8xbf16> loc(#loc27)
    %9598 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9599 = llvm.insertelement %9578, %9597[%9598 : i32] : vector<8xbf16> loc(#loc27)
    %9600 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9601 = llvm.insertelement %9579, %9599[%9600 : i32] : vector<8xbf16> loc(#loc27)
    %9602 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9603 = llvm.insertelement %9580, %9601[%9602 : i32] : vector<8xbf16> loc(#loc27)
    %9604 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9605 = llvm.insertelement %9581, %9603[%9604 : i32] : vector<8xbf16> loc(#loc27)
    %9606 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9607 = llvm.insertelement %9582, %9605[%9606 : i32] : vector<8xbf16> loc(#loc27)
    %9608 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9609 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9610 = llvm.extractelement %9607[%9609 : i32] : vector<8xbf16> loc(#loc27)
    %9611 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9612 = llvm.insertelement %9610, %9608[%9611 : i32] : vector<8xbf16> loc(#loc27)
    %9613 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9614 = llvm.extractelement %9607[%9613 : i32] : vector<8xbf16> loc(#loc27)
    %9615 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9616 = llvm.insertelement %9614, %9612[%9615 : i32] : vector<8xbf16> loc(#loc27)
    %9617 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9618 = llvm.extractelement %9607[%9617 : i32] : vector<8xbf16> loc(#loc27)
    %9619 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9620 = llvm.insertelement %9618, %9616[%9619 : i32] : vector<8xbf16> loc(#loc27)
    %9621 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9622 = llvm.extractelement %9607[%9621 : i32] : vector<8xbf16> loc(#loc27)
    %9623 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9624 = llvm.insertelement %9622, %9620[%9623 : i32] : vector<8xbf16> loc(#loc27)
    %9625 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9626 = llvm.extractelement %9607[%9625 : i32] : vector<8xbf16> loc(#loc27)
    %9627 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9628 = llvm.insertelement %9626, %9624[%9627 : i32] : vector<8xbf16> loc(#loc27)
    %9629 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9630 = llvm.extractelement %9607[%9629 : i32] : vector<8xbf16> loc(#loc27)
    %9631 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9632 = llvm.insertelement %9630, %9628[%9631 : i32] : vector<8xbf16> loc(#loc27)
    %9633 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9634 = llvm.extractelement %9607[%9633 : i32] : vector<8xbf16> loc(#loc27)
    %9635 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9636 = llvm.insertelement %9634, %9632[%9635 : i32] : vector<8xbf16> loc(#loc27)
    %9637 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9638 = llvm.extractelement %9607[%9637 : i32] : vector<8xbf16> loc(#loc27)
    %9639 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9640 = llvm.insertelement %9638, %9636[%9639 : i32] : vector<8xbf16> loc(#loc27)
    %9641 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9642 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9643 = llvm.insertelement %9583, %9641[%9642 : i32] : vector<8xbf16> loc(#loc27)
    %9644 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9645 = llvm.insertelement %9584, %9643[%9644 : i32] : vector<8xbf16> loc(#loc27)
    %9646 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9647 = llvm.insertelement %9585, %9645[%9646 : i32] : vector<8xbf16> loc(#loc27)
    %9648 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9649 = llvm.insertelement %9586, %9647[%9648 : i32] : vector<8xbf16> loc(#loc27)
    %9650 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9651 = llvm.insertelement %9587, %9649[%9650 : i32] : vector<8xbf16> loc(#loc27)
    %9652 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9653 = llvm.insertelement %9588, %9651[%9652 : i32] : vector<8xbf16> loc(#loc27)
    %9654 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9655 = llvm.insertelement %9589, %9653[%9654 : i32] : vector<8xbf16> loc(#loc27)
    %9656 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9657 = llvm.insertelement %9590, %9655[%9656 : i32] : vector<8xbf16> loc(#loc27)
    %9658 = llvm.mlir.undef : vector<8xbf16> loc(#loc27)
    %9659 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9660 = llvm.extractelement %9657[%9659 : i32] : vector<8xbf16> loc(#loc27)
    %9661 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9662 = llvm.insertelement %9660, %9658[%9661 : i32] : vector<8xbf16> loc(#loc27)
    %9663 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9664 = llvm.extractelement %9657[%9663 : i32] : vector<8xbf16> loc(#loc27)
    %9665 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9666 = llvm.insertelement %9664, %9662[%9665 : i32] : vector<8xbf16> loc(#loc27)
    %9667 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9668 = llvm.extractelement %9657[%9667 : i32] : vector<8xbf16> loc(#loc27)
    %9669 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9670 = llvm.insertelement %9668, %9666[%9669 : i32] : vector<8xbf16> loc(#loc27)
    %9671 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9672 = llvm.extractelement %9657[%9671 : i32] : vector<8xbf16> loc(#loc27)
    %9673 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9674 = llvm.insertelement %9672, %9670[%9673 : i32] : vector<8xbf16> loc(#loc27)
    %9675 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9676 = llvm.extractelement %9657[%9675 : i32] : vector<8xbf16> loc(#loc27)
    %9677 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9678 = llvm.insertelement %9676, %9674[%9677 : i32] : vector<8xbf16> loc(#loc27)
    %9679 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9680 = llvm.extractelement %9657[%9679 : i32] : vector<8xbf16> loc(#loc27)
    %9681 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9682 = llvm.insertelement %9680, %9678[%9681 : i32] : vector<8xbf16> loc(#loc27)
    %9683 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9684 = llvm.extractelement %9657[%9683 : i32] : vector<8xbf16> loc(#loc27)
    %9685 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9686 = llvm.insertelement %9684, %9682[%9685 : i32] : vector<8xbf16> loc(#loc27)
    %9687 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9688 = llvm.extractelement %9657[%9687 : i32] : vector<8xbf16> loc(#loc27)
    %9689 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9690 = llvm.insertelement %9688, %9686[%9689 : i32] : vector<8xbf16> loc(#loc27)
    %9691 = llvm.extractvalue %7258[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9692 = llvm.extractvalue %7258[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9693 = llvm.extractvalue %7258[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9694 = llvm.extractvalue %7258[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9695 = llvm.extractvalue %7258[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9696 = llvm.extractvalue %7258[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9697 = llvm.extractvalue %7258[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9698 = llvm.extractvalue %7258[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9699 = llvm.extractvalue %7258[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9700 = llvm.extractvalue %7258[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9701 = llvm.extractvalue %7258[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9702 = llvm.extractvalue %7258[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9703 = llvm.extractvalue %7258[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9704 = llvm.extractvalue %7258[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9705 = llvm.extractvalue %7258[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9706 = llvm.extractvalue %7258[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9707 = llvm.mlir.undef : vector<16xf32> loc(#loc27)
    %9708 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9709 = llvm.insertelement %9691, %9707[%9708 : i32] : vector<16xf32> loc(#loc27)
    %9710 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9711 = llvm.insertelement %9692, %9709[%9710 : i32] : vector<16xf32> loc(#loc27)
    %9712 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9713 = llvm.insertelement %9693, %9711[%9712 : i32] : vector<16xf32> loc(#loc27)
    %9714 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9715 = llvm.insertelement %9694, %9713[%9714 : i32] : vector<16xf32> loc(#loc27)
    %9716 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9717 = llvm.insertelement %9695, %9715[%9716 : i32] : vector<16xf32> loc(#loc27)
    %9718 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9719 = llvm.insertelement %9696, %9717[%9718 : i32] : vector<16xf32> loc(#loc27)
    %9720 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9721 = llvm.insertelement %9697, %9719[%9720 : i32] : vector<16xf32> loc(#loc27)
    %9722 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9723 = llvm.insertelement %9698, %9721[%9722 : i32] : vector<16xf32> loc(#loc27)
    %9724 = llvm.mlir.constant(8 : i32) : i32 loc(#loc27)
    %9725 = llvm.insertelement %9699, %9723[%9724 : i32] : vector<16xf32> loc(#loc27)
    %9726 = llvm.mlir.constant(9 : i32) : i32 loc(#loc27)
    %9727 = llvm.insertelement %9700, %9725[%9726 : i32] : vector<16xf32> loc(#loc27)
    %9728 = llvm.mlir.constant(10 : i32) : i32 loc(#loc27)
    %9729 = llvm.insertelement %9701, %9727[%9728 : i32] : vector<16xf32> loc(#loc27)
    %9730 = llvm.mlir.constant(11 : i32) : i32 loc(#loc27)
    %9731 = llvm.insertelement %9702, %9729[%9730 : i32] : vector<16xf32> loc(#loc27)
    %9732 = llvm.mlir.constant(12 : i32) : i32 loc(#loc27)
    %9733 = llvm.insertelement %9703, %9731[%9732 : i32] : vector<16xf32> loc(#loc27)
    %9734 = llvm.mlir.constant(13 : i32) : i32 loc(#loc27)
    %9735 = llvm.insertelement %9704, %9733[%9734 : i32] : vector<16xf32> loc(#loc27)
    %9736 = llvm.mlir.constant(14 : i32) : i32 loc(#loc27)
    %9737 = llvm.insertelement %9705, %9735[%9736 : i32] : vector<16xf32> loc(#loc27)
    %9738 = llvm.mlir.constant(15 : i32) : i32 loc(#loc27)
    %9739 = llvm.insertelement %9706, %9737[%9738 : i32] : vector<16xf32> loc(#loc27)
    %9740 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9741 = rocdl.mfma.f32.32x32x16.bf16 %9640, %9524, %9739, %9740, %9740, %9740 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc27)
    %9742 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9743 = rocdl.mfma.f32.32x32x16.bf16 %9690, %9574, %9741, %9742, %9742, %9742 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc27)
    %9744 = llvm.mlir.constant(0 : i32) : i32 loc(#loc27)
    %9745 = llvm.extractelement %9743[%9744 : i32] : vector<16xf32> loc(#loc27)
    %9746 = llvm.mlir.constant(1 : i32) : i32 loc(#loc27)
    %9747 = llvm.extractelement %9743[%9746 : i32] : vector<16xf32> loc(#loc27)
    %9748 = llvm.mlir.constant(2 : i32) : i32 loc(#loc27)
    %9749 = llvm.extractelement %9743[%9748 : i32] : vector<16xf32> loc(#loc27)
    %9750 = llvm.mlir.constant(3 : i32) : i32 loc(#loc27)
    %9751 = llvm.extractelement %9743[%9750 : i32] : vector<16xf32> loc(#loc27)
    %9752 = llvm.mlir.constant(4 : i32) : i32 loc(#loc27)
    %9753 = llvm.extractelement %9743[%9752 : i32] : vector<16xf32> loc(#loc27)
    %9754 = llvm.mlir.constant(5 : i32) : i32 loc(#loc27)
    %9755 = llvm.extractelement %9743[%9754 : i32] : vector<16xf32> loc(#loc27)
    %9756 = llvm.mlir.constant(6 : i32) : i32 loc(#loc27)
    %9757 = llvm.extractelement %9743[%9756 : i32] : vector<16xf32> loc(#loc27)
    %9758 = llvm.mlir.constant(7 : i32) : i32 loc(#loc27)
    %9759 = llvm.extractelement %9743[%9758 : i32] : vector<16xf32> loc(#loc27)
    %9760 = llvm.mlir.constant(8 : i32) : i32 loc(#loc27)
    %9761 = llvm.extractelement %9743[%9760 : i32] : vector<16xf32> loc(#loc27)
    %9762 = llvm.mlir.constant(9 : i32) : i32 loc(#loc27)
    %9763 = llvm.extractelement %9743[%9762 : i32] : vector<16xf32> loc(#loc27)
    %9764 = llvm.mlir.constant(10 : i32) : i32 loc(#loc27)
    %9765 = llvm.extractelement %9743[%9764 : i32] : vector<16xf32> loc(#loc27)
    %9766 = llvm.mlir.constant(11 : i32) : i32 loc(#loc27)
    %9767 = llvm.extractelement %9743[%9766 : i32] : vector<16xf32> loc(#loc27)
    %9768 = llvm.mlir.constant(12 : i32) : i32 loc(#loc27)
    %9769 = llvm.extractelement %9743[%9768 : i32] : vector<16xf32> loc(#loc27)
    %9770 = llvm.mlir.constant(13 : i32) : i32 loc(#loc27)
    %9771 = llvm.extractelement %9743[%9770 : i32] : vector<16xf32> loc(#loc27)
    %9772 = llvm.mlir.constant(14 : i32) : i32 loc(#loc27)
    %9773 = llvm.extractelement %9743[%9772 : i32] : vector<16xf32> loc(#loc27)
    %9774 = llvm.mlir.constant(15 : i32) : i32 loc(#loc27)
    %9775 = llvm.extractelement %9743[%9774 : i32] : vector<16xf32> loc(#loc27)
    %9776 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc27)
    %9777 = llvm.insertvalue %9745, %9776[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9778 = llvm.insertvalue %9747, %9777[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9779 = llvm.insertvalue %9749, %9778[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9780 = llvm.insertvalue %9751, %9779[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9781 = llvm.insertvalue %9753, %9780[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9782 = llvm.insertvalue %9755, %9781[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9783 = llvm.insertvalue %9757, %9782[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9784 = llvm.insertvalue %9759, %9783[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9785 = llvm.insertvalue %9761, %9784[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9786 = llvm.insertvalue %9763, %9785[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9787 = llvm.insertvalue %9765, %9786[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9788 = llvm.insertvalue %9767, %9787[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9789 = llvm.insertvalue %9769, %9788[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9790 = llvm.insertvalue %9771, %9789[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9791 = llvm.insertvalue %9773, %9790[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9792 = llvm.insertvalue %9775, %9791[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc27)
    %9793 = builtin.unrealized_conversion_cast %9792 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x64xf32, #mma> loc(#loc27)
    %9794 = builtin.unrealized_conversion_cast %9793 : tensor<64x64xf32, #mma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc27)
    llvm.br ^bb10(%9794 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc27)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%7260 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc27)
  ^bb10(%9795: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc27)
  ^bb11:  // pred: ^bb10
    %9796 = llvm.extractvalue %9795[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9797 = llvm.extractvalue %9795[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9798 = llvm.extractvalue %9795[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9799 = llvm.extractvalue %9795[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9800 = llvm.extractvalue %9795[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9801 = llvm.extractvalue %9795[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9802 = llvm.extractvalue %9795[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9803 = llvm.extractvalue %9795[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9804 = llvm.extractvalue %9795[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9805 = llvm.extractvalue %9795[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9806 = llvm.extractvalue %9795[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9807 = llvm.extractvalue %9795[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9808 = llvm.extractvalue %9795[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9809 = llvm.extractvalue %9795[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9810 = llvm.extractvalue %9795[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9811 = llvm.extractvalue %9795[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9812 = llvm.extractvalue %7258[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9813 = llvm.extractvalue %7258[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9814 = llvm.extractvalue %7258[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9815 = llvm.extractvalue %7258[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9816 = llvm.extractvalue %7258[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9817 = llvm.extractvalue %7258[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9818 = llvm.extractvalue %7258[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9819 = llvm.extractvalue %7258[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9820 = llvm.extractvalue %7258[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9821 = llvm.extractvalue %7258[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9822 = llvm.extractvalue %7258[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9823 = llvm.extractvalue %7258[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9824 = llvm.extractvalue %7258[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9825 = llvm.extractvalue %7258[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9826 = llvm.extractvalue %7258[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9827 = llvm.extractvalue %7258[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9828 = llvm.select %4658, %9796, %9812 : i1, f32 loc(#loc2)
    %9829 = llvm.select %4658, %9797, %9813 : i1, f32 loc(#loc2)
    %9830 = llvm.select %4658, %9798, %9814 : i1, f32 loc(#loc2)
    %9831 = llvm.select %4658, %9799, %9815 : i1, f32 loc(#loc2)
    %9832 = llvm.select %4658, %9800, %9816 : i1, f32 loc(#loc2)
    %9833 = llvm.select %4658, %9801, %9817 : i1, f32 loc(#loc2)
    %9834 = llvm.select %4658, %9802, %9818 : i1, f32 loc(#loc2)
    %9835 = llvm.select %4658, %9803, %9819 : i1, f32 loc(#loc2)
    %9836 = llvm.select %4658, %9804, %9820 : i1, f32 loc(#loc2)
    %9837 = llvm.select %4658, %9805, %9821 : i1, f32 loc(#loc2)
    %9838 = llvm.select %4658, %9806, %9822 : i1, f32 loc(#loc2)
    %9839 = llvm.select %4658, %9807, %9823 : i1, f32 loc(#loc2)
    %9840 = llvm.select %4658, %9808, %9824 : i1, f32 loc(#loc2)
    %9841 = llvm.select %4658, %9809, %9825 : i1, f32 loc(#loc2)
    %9842 = llvm.select %4658, %9810, %9826 : i1, f32 loc(#loc2)
    %9843 = llvm.select %4658, %9811, %9827 : i1, f32 loc(#loc2)
    %9844 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %9845 = llvm.insertvalue %9828, %9844[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9846 = llvm.insertvalue %9829, %9845[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9847 = llvm.insertvalue %9830, %9846[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9848 = llvm.insertvalue %9831, %9847[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9849 = llvm.insertvalue %9832, %9848[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9850 = llvm.insertvalue %9833, %9849[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9851 = llvm.insertvalue %9834, %9850[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9852 = llvm.insertvalue %9835, %9851[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9853 = llvm.insertvalue %9836, %9852[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9854 = llvm.insertvalue %9837, %9853[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9855 = llvm.insertvalue %9838, %9854[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9856 = llvm.insertvalue %9839, %9855[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9857 = llvm.insertvalue %9840, %9856[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9858 = llvm.insertvalue %9841, %9857[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9859 = llvm.insertvalue %9842, %9858[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9860 = llvm.insertvalue %9843, %9859[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %9861 = llvm.extractvalue %1665[0] : !llvm.struct<(i32)>  loc(#loc28)
    %9862 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc28)
    %9863 = llvm.insertvalue %9861, %9862[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9864 = llvm.insertvalue %9861, %9863[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9865 = llvm.insertvalue %9861, %9864[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9866 = llvm.insertvalue %9861, %9865[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9867 = llvm.insertvalue %9861, %9866[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9868 = llvm.insertvalue %9861, %9867[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9869 = llvm.insertvalue %9861, %9868[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9870 = llvm.insertvalue %9861, %9869[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9871 = llvm.insertvalue %9861, %9870[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9872 = llvm.insertvalue %9861, %9871[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9873 = llvm.insertvalue %9861, %9872[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9874 = llvm.insertvalue %9861, %9873[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9875 = llvm.insertvalue %9861, %9874[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9876 = llvm.insertvalue %9861, %9875[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9877 = llvm.insertvalue %9861, %9876[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9878 = llvm.insertvalue %9861, %9877[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc28)
    %9879 = llvm.extractvalue %1554[0] : !llvm.struct<(i32)>  loc(#loc29)
    %9880 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc29)
    %9881 = llvm.insertvalue %9879, %9880[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9882 = llvm.insertvalue %9879, %9881[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9883 = llvm.insertvalue %9879, %9882[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9884 = llvm.insertvalue %9879, %9883[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9885 = llvm.insertvalue %9879, %9884[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9886 = llvm.insertvalue %9879, %9885[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9887 = llvm.insertvalue %9879, %9886[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9888 = llvm.insertvalue %9879, %9887[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9889 = llvm.insertvalue %9879, %9888[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9890 = llvm.insertvalue %9879, %9889[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9891 = llvm.insertvalue %9879, %9890[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9892 = llvm.insertvalue %9879, %9891[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9893 = llvm.insertvalue %9879, %9892[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9894 = llvm.insertvalue %9879, %9893[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9895 = llvm.insertvalue %9879, %9894[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9896 = llvm.insertvalue %9879, %9895[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9897 = llvm.mul %43, %arg8 : i32 loc(#loc29)
    %9898 = llvm.bitcast %arg8 : i32 to i32 loc(#loc29)
    %9899 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc29)
    %9900 = llvm.insertvalue %9898, %9899[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9901 = llvm.insertvalue %9898, %9900[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9902 = llvm.insertvalue %9898, %9901[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9903 = llvm.insertvalue %9898, %9902[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9904 = llvm.insertvalue %9898, %9903[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9905 = llvm.insertvalue %9898, %9904[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9906 = llvm.insertvalue %9898, %9905[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9907 = llvm.insertvalue %9898, %9906[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9908 = llvm.insertvalue %9898, %9907[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9909 = llvm.insertvalue %9898, %9908[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9910 = llvm.insertvalue %9898, %9909[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9911 = llvm.insertvalue %9898, %9910[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9912 = llvm.insertvalue %9898, %9911[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9913 = llvm.insertvalue %9898, %9912[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9914 = llvm.insertvalue %9898, %9913[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9915 = llvm.insertvalue %9898, %9914[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9916 = llvm.extractvalue %9896[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9917 = llvm.extractvalue %9896[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9918 = llvm.extractvalue %9896[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9919 = llvm.extractvalue %9896[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9920 = llvm.extractvalue %9896[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9921 = llvm.extractvalue %9896[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9922 = llvm.extractvalue %9896[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9923 = llvm.extractvalue %9896[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9924 = llvm.extractvalue %9896[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9925 = llvm.extractvalue %9896[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9926 = llvm.extractvalue %9896[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9927 = llvm.extractvalue %9896[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9928 = llvm.extractvalue %9896[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9929 = llvm.extractvalue %9896[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9930 = llvm.extractvalue %9896[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9931 = llvm.extractvalue %9896[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9932 = llvm.extractvalue %9915[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9933 = llvm.extractvalue %9915[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9934 = llvm.extractvalue %9915[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9935 = llvm.extractvalue %9915[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9936 = llvm.extractvalue %9915[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9937 = llvm.extractvalue %9915[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9938 = llvm.extractvalue %9915[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9939 = llvm.extractvalue %9915[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9940 = llvm.extractvalue %9915[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9941 = llvm.extractvalue %9915[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9942 = llvm.extractvalue %9915[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9943 = llvm.extractvalue %9915[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9944 = llvm.extractvalue %9915[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9945 = llvm.extractvalue %9915[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9946 = llvm.extractvalue %9915[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9947 = llvm.extractvalue %9915[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9948 = llvm.mul %9916, %9932 : i32 loc(#loc29)
    %9949 = llvm.mul %9917, %9933 : i32 loc(#loc29)
    %9950 = llvm.mul %9918, %9934 : i32 loc(#loc29)
    %9951 = llvm.mul %9919, %9935 : i32 loc(#loc29)
    %9952 = llvm.mul %9920, %9936 : i32 loc(#loc29)
    %9953 = llvm.mul %9921, %9937 : i32 loc(#loc29)
    %9954 = llvm.mul %9922, %9938 : i32 loc(#loc29)
    %9955 = llvm.mul %9923, %9939 : i32 loc(#loc29)
    %9956 = llvm.mul %9924, %9940 : i32 loc(#loc29)
    %9957 = llvm.mul %9925, %9941 : i32 loc(#loc29)
    %9958 = llvm.mul %9926, %9942 : i32 loc(#loc29)
    %9959 = llvm.mul %9927, %9943 : i32 loc(#loc29)
    %9960 = llvm.mul %9928, %9944 : i32 loc(#loc29)
    %9961 = llvm.mul %9929, %9945 : i32 loc(#loc29)
    %9962 = llvm.mul %9930, %9946 : i32 loc(#loc29)
    %9963 = llvm.mul %9931, %9947 : i32 loc(#loc29)
    %9964 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc29)
    %9965 = llvm.insertvalue %9948, %9964[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9966 = llvm.insertvalue %9949, %9965[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9967 = llvm.insertvalue %9950, %9966[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9968 = llvm.insertvalue %9951, %9967[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9969 = llvm.insertvalue %9952, %9968[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9970 = llvm.insertvalue %9953, %9969[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9971 = llvm.insertvalue %9954, %9970[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9972 = llvm.insertvalue %9955, %9971[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9973 = llvm.insertvalue %9956, %9972[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9974 = llvm.insertvalue %9957, %9973[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9975 = llvm.insertvalue %9958, %9974[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9976 = llvm.insertvalue %9959, %9975[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9977 = llvm.insertvalue %9960, %9976[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9978 = llvm.insertvalue %9961, %9977[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9979 = llvm.insertvalue %9962, %9978[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9980 = llvm.insertvalue %9963, %9979[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc29)
    %9981 = llvm.getelementptr %arg0[%9897] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc29)
    %9982 = llvm.extractvalue %1748[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9983 = llvm.extractvalue %1748[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9984 = llvm.extractvalue %1748[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9985 = llvm.extractvalue %1748[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9986 = llvm.extractvalue %1748[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9987 = llvm.extractvalue %1748[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9988 = llvm.extractvalue %1748[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9989 = llvm.extractvalue %1748[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9990 = llvm.extractvalue %1748[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9991 = llvm.extractvalue %1748[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9992 = llvm.extractvalue %1748[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9993 = llvm.extractvalue %1748[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9994 = llvm.extractvalue %1748[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9995 = llvm.extractvalue %1748[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9996 = llvm.extractvalue %1748[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9997 = llvm.extractvalue %1748[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %9998 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc30)
    %9999 = llvm.insertvalue %9982, %9998[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10000 = llvm.insertvalue %9983, %9999[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10001 = llvm.insertvalue %9984, %10000[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10002 = llvm.insertvalue %9985, %10001[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10003 = llvm.insertvalue %9986, %10002[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10004 = llvm.insertvalue %9987, %10003[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10005 = llvm.insertvalue %9988, %10004[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10006 = llvm.insertvalue %9989, %10005[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10007 = llvm.insertvalue %9990, %10006[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10008 = llvm.insertvalue %9991, %10007[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10009 = llvm.insertvalue %9992, %10008[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10010 = llvm.insertvalue %9993, %10009[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10011 = llvm.insertvalue %9994, %10010[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10012 = llvm.insertvalue %9995, %10011[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10013 = llvm.insertvalue %9996, %10012[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10014 = llvm.insertvalue %9997, %10013[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc30)
    %10015 = llvm.extractvalue %9980[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10016 = llvm.extractvalue %9980[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10017 = llvm.extractvalue %9980[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10018 = llvm.extractvalue %9980[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10019 = llvm.extractvalue %9980[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10020 = llvm.extractvalue %9980[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10021 = llvm.extractvalue %9980[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10022 = llvm.extractvalue %9980[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10023 = llvm.extractvalue %9980[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10024 = llvm.extractvalue %9980[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10025 = llvm.extractvalue %9980[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10026 = llvm.extractvalue %9980[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10027 = llvm.extractvalue %9980[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10028 = llvm.extractvalue %9980[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10029 = llvm.extractvalue %9980[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10030 = llvm.extractvalue %9980[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10031 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc31)
    %10032 = llvm.insertvalue %10030, %10031[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10033 = llvm.insertvalue %10030, %10032[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10034 = llvm.insertvalue %10030, %10033[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10035 = llvm.insertvalue %10030, %10034[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10036 = llvm.insertvalue %10030, %10035[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10037 = llvm.insertvalue %10030, %10036[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10038 = llvm.insertvalue %10030, %10037[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10039 = llvm.insertvalue %10030, %10038[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10040 = llvm.insertvalue %10030, %10039[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10041 = llvm.insertvalue %10030, %10040[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10042 = llvm.insertvalue %10030, %10041[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10043 = llvm.insertvalue %10030, %10042[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10044 = llvm.insertvalue %10030, %10043[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10045 = llvm.insertvalue %10030, %10044[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10046 = llvm.insertvalue %10030, %10045[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10047 = llvm.insertvalue %10030, %10046[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10048 = llvm.extractvalue %1657[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10049 = llvm.extractvalue %1657[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10050 = llvm.extractvalue %1657[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10051 = llvm.extractvalue %1657[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10052 = llvm.extractvalue %1657[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10053 = llvm.extractvalue %1657[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10054 = llvm.extractvalue %1657[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10055 = llvm.extractvalue %1657[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10056 = llvm.extractvalue %1657[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10057 = llvm.extractvalue %1657[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10058 = llvm.extractvalue %1657[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10059 = llvm.extractvalue %1657[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10060 = llvm.extractvalue %1657[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10061 = llvm.extractvalue %1657[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10062 = llvm.extractvalue %1657[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10063 = llvm.extractvalue %1657[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10064 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc31)
    %10065 = llvm.insertvalue %10048, %10064[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10066 = llvm.insertvalue %10049, %10065[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10067 = llvm.insertvalue %10050, %10066[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10068 = llvm.insertvalue %10051, %10067[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10069 = llvm.insertvalue %10052, %10068[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10070 = llvm.insertvalue %10053, %10069[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10071 = llvm.insertvalue %10054, %10070[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10072 = llvm.insertvalue %10055, %10071[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10073 = llvm.insertvalue %10056, %10072[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10074 = llvm.insertvalue %10057, %10073[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10075 = llvm.insertvalue %10058, %10074[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10076 = llvm.insertvalue %10059, %10075[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10077 = llvm.insertvalue %10060, %10076[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10078 = llvm.insertvalue %10061, %10077[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10079 = llvm.insertvalue %10062, %10078[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10080 = llvm.insertvalue %10063, %10079[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10081 = llvm.extractvalue %10080[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10082 = llvm.extractvalue %10080[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10083 = llvm.extractvalue %10080[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10084 = llvm.extractvalue %10080[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10085 = llvm.extractvalue %10080[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10086 = llvm.extractvalue %10080[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10087 = llvm.extractvalue %10080[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10088 = llvm.extractvalue %10080[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10089 = llvm.extractvalue %10080[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10090 = llvm.extractvalue %10080[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10091 = llvm.extractvalue %10080[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10092 = llvm.extractvalue %10080[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10093 = llvm.extractvalue %10080[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10094 = llvm.extractvalue %10080[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10095 = llvm.extractvalue %10080[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10096 = llvm.extractvalue %10080[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10097 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc31)
    %10098 = llvm.insertvalue %10081, %10097[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10099 = llvm.insertvalue %10082, %10098[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10100 = llvm.insertvalue %10083, %10099[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10101 = llvm.insertvalue %10084, %10100[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10102 = llvm.insertvalue %10085, %10101[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10103 = llvm.insertvalue %10086, %10102[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10104 = llvm.insertvalue %10087, %10103[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10105 = llvm.insertvalue %10088, %10104[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10106 = llvm.insertvalue %10089, %10105[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10107 = llvm.insertvalue %10090, %10106[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10108 = llvm.insertvalue %10091, %10107[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10109 = llvm.insertvalue %10092, %10108[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10110 = llvm.insertvalue %10093, %10109[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10111 = llvm.insertvalue %10094, %10110[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10112 = llvm.insertvalue %10095, %10111[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10113 = llvm.insertvalue %10096, %10112[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10114 = llvm.getelementptr %9981[%648] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc31)
    %10115 = llvm.extractvalue %10113[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10116 = llvm.extractvalue %10113[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10117 = llvm.extractvalue %10113[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10118 = llvm.extractvalue %10113[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10119 = llvm.extractvalue %10113[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10120 = llvm.extractvalue %10113[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10121 = llvm.extractvalue %10113[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10122 = llvm.extractvalue %10113[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10123 = llvm.extractvalue %10113[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10124 = llvm.extractvalue %10113[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10125 = llvm.extractvalue %10113[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10126 = llvm.extractvalue %10113[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10127 = llvm.extractvalue %10113[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10128 = llvm.extractvalue %10113[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10129 = llvm.extractvalue %10113[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10130 = llvm.extractvalue %10113[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10131 = llvm.extractvalue %10047[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10132 = llvm.extractvalue %10047[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10133 = llvm.extractvalue %10047[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10134 = llvm.extractvalue %10047[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10135 = llvm.extractvalue %10047[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10136 = llvm.extractvalue %10047[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10137 = llvm.extractvalue %10047[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10138 = llvm.extractvalue %10047[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10139 = llvm.extractvalue %10047[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10140 = llvm.extractvalue %10047[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10141 = llvm.extractvalue %10047[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10142 = llvm.extractvalue %10047[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10143 = llvm.extractvalue %10047[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10144 = llvm.extractvalue %10047[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10145 = llvm.extractvalue %10047[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10146 = llvm.extractvalue %10047[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10147 = llvm.add %10115, %10131 : i32 loc(#loc31)
    %10148 = llvm.add %10116, %10132 : i32 loc(#loc31)
    %10149 = llvm.add %10117, %10133 : i32 loc(#loc31)
    %10150 = llvm.add %10118, %10134 : i32 loc(#loc31)
    %10151 = llvm.add %10119, %10135 : i32 loc(#loc31)
    %10152 = llvm.add %10120, %10136 : i32 loc(#loc31)
    %10153 = llvm.add %10121, %10137 : i32 loc(#loc31)
    %10154 = llvm.add %10122, %10138 : i32 loc(#loc31)
    %10155 = llvm.add %10123, %10139 : i32 loc(#loc31)
    %10156 = llvm.add %10124, %10140 : i32 loc(#loc31)
    %10157 = llvm.add %10125, %10141 : i32 loc(#loc31)
    %10158 = llvm.add %10126, %10142 : i32 loc(#loc31)
    %10159 = llvm.add %10127, %10143 : i32 loc(#loc31)
    %10160 = llvm.add %10128, %10144 : i32 loc(#loc31)
    %10161 = llvm.add %10129, %10145 : i32 loc(#loc31)
    %10162 = llvm.add %10130, %10146 : i32 loc(#loc31)
    %10163 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc31)
    %10164 = llvm.insertvalue %10147, %10163[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10165 = llvm.insertvalue %10148, %10164[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10166 = llvm.insertvalue %10149, %10165[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10167 = llvm.insertvalue %10150, %10166[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10168 = llvm.insertvalue %10151, %10167[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10169 = llvm.insertvalue %10152, %10168[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10170 = llvm.insertvalue %10153, %10169[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10171 = llvm.insertvalue %10154, %10170[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10172 = llvm.insertvalue %10155, %10171[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10173 = llvm.insertvalue %10156, %10172[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10174 = llvm.insertvalue %10157, %10173[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10175 = llvm.insertvalue %10158, %10174[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10176 = llvm.insertvalue %10159, %10175[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10177 = llvm.insertvalue %10160, %10176[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10178 = llvm.insertvalue %10161, %10177[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10179 = llvm.insertvalue %10162, %10178[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc31)
    %10180 = llvm.bitcast %arg3 : i32 to i32 loc(#loc32)
    %10181 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc32)
    %10182 = llvm.insertvalue %10180, %10181[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10183 = llvm.insertvalue %10180, %10182[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10184 = llvm.insertvalue %10180, %10183[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10185 = llvm.insertvalue %10180, %10184[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10186 = llvm.insertvalue %10180, %10185[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10187 = llvm.insertvalue %10180, %10186[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10188 = llvm.insertvalue %10180, %10187[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10189 = llvm.insertvalue %10180, %10188[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10190 = llvm.insertvalue %10180, %10189[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10191 = llvm.insertvalue %10180, %10190[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10192 = llvm.insertvalue %10180, %10191[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10193 = llvm.insertvalue %10180, %10192[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10194 = llvm.insertvalue %10180, %10193[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10195 = llvm.insertvalue %10180, %10194[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10196 = llvm.insertvalue %10180, %10195[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10197 = llvm.insertvalue %10180, %10196[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10198 = llvm.extractvalue %9878[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10199 = llvm.extractvalue %9878[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10200 = llvm.extractvalue %9878[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10201 = llvm.extractvalue %9878[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10202 = llvm.extractvalue %9878[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10203 = llvm.extractvalue %9878[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10204 = llvm.extractvalue %9878[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10205 = llvm.extractvalue %9878[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10206 = llvm.extractvalue %9878[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10207 = llvm.extractvalue %9878[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10208 = llvm.extractvalue %9878[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10209 = llvm.extractvalue %9878[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10210 = llvm.extractvalue %9878[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10211 = llvm.extractvalue %9878[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10212 = llvm.extractvalue %9878[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10213 = llvm.extractvalue %9878[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10214 = llvm.extractvalue %10197[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10215 = llvm.extractvalue %10197[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10216 = llvm.extractvalue %10197[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10217 = llvm.extractvalue %10197[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10218 = llvm.extractvalue %10197[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10219 = llvm.extractvalue %10197[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10220 = llvm.extractvalue %10197[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10221 = llvm.extractvalue %10197[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10222 = llvm.extractvalue %10197[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10223 = llvm.extractvalue %10197[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10224 = llvm.extractvalue %10197[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10225 = llvm.extractvalue %10197[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10226 = llvm.extractvalue %10197[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10227 = llvm.extractvalue %10197[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10228 = llvm.extractvalue %10197[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10229 = llvm.extractvalue %10197[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc32)
    %10230 = llvm.icmp "slt" %10198, %10214 : i32 loc(#loc32)
    %10231 = llvm.icmp "slt" %10199, %10215 : i32 loc(#loc32)
    %10232 = llvm.icmp "slt" %10200, %10216 : i32 loc(#loc32)
    %10233 = llvm.icmp "slt" %10201, %10217 : i32 loc(#loc32)
    %10234 = llvm.icmp "slt" %10202, %10218 : i32 loc(#loc32)
    %10235 = llvm.icmp "slt" %10203, %10219 : i32 loc(#loc32)
    %10236 = llvm.icmp "slt" %10204, %10220 : i32 loc(#loc32)
    %10237 = llvm.icmp "slt" %10205, %10221 : i32 loc(#loc32)
    %10238 = llvm.icmp "slt" %10206, %10222 : i32 loc(#loc32)
    %10239 = llvm.icmp "slt" %10207, %10223 : i32 loc(#loc32)
    %10240 = llvm.icmp "slt" %10208, %10224 : i32 loc(#loc32)
    %10241 = llvm.icmp "slt" %10209, %10225 : i32 loc(#loc32)
    %10242 = llvm.icmp "slt" %10210, %10226 : i32 loc(#loc32)
    %10243 = llvm.icmp "slt" %10211, %10227 : i32 loc(#loc32)
    %10244 = llvm.icmp "slt" %10212, %10228 : i32 loc(#loc32)
    %10245 = llvm.icmp "slt" %10213, %10229 : i32 loc(#loc32)
    %10246 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc32)
    %10247 = llvm.insertvalue %10230, %10246[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10248 = llvm.insertvalue %10231, %10247[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10249 = llvm.insertvalue %10232, %10248[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10250 = llvm.insertvalue %10233, %10249[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10251 = llvm.insertvalue %10234, %10250[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10252 = llvm.insertvalue %10235, %10251[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10253 = llvm.insertvalue %10236, %10252[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10254 = llvm.insertvalue %10237, %10253[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10255 = llvm.insertvalue %10238, %10254[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10256 = llvm.insertvalue %10239, %10255[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10257 = llvm.insertvalue %10240, %10256[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10258 = llvm.insertvalue %10241, %10257[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10259 = llvm.insertvalue %10242, %10258[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10260 = llvm.insertvalue %10243, %10259[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10261 = llvm.insertvalue %10244, %10260[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10262 = llvm.insertvalue %10245, %10261[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc32)
    %10263 = llvm.bitcast %arg4 : i32 to i32 loc(#loc33)
    %10264 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc33)
    %10265 = llvm.insertvalue %10263, %10264[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10266 = llvm.insertvalue %10263, %10265[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10267 = llvm.insertvalue %10263, %10266[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10268 = llvm.insertvalue %10263, %10267[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10269 = llvm.insertvalue %10263, %10268[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10270 = llvm.insertvalue %10263, %10269[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10271 = llvm.insertvalue %10263, %10270[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10272 = llvm.insertvalue %10263, %10271[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10273 = llvm.insertvalue %10263, %10272[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10274 = llvm.insertvalue %10263, %10273[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10275 = llvm.insertvalue %10263, %10274[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10276 = llvm.insertvalue %10263, %10275[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10277 = llvm.insertvalue %10263, %10276[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10278 = llvm.insertvalue %10263, %10277[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10279 = llvm.insertvalue %10263, %10278[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10280 = llvm.insertvalue %10263, %10279[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10281 = llvm.extractvalue %10014[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10282 = llvm.extractvalue %10014[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10283 = llvm.extractvalue %10014[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10284 = llvm.extractvalue %10014[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10285 = llvm.extractvalue %10014[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10286 = llvm.extractvalue %10014[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10287 = llvm.extractvalue %10014[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10288 = llvm.extractvalue %10014[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10289 = llvm.extractvalue %10014[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10290 = llvm.extractvalue %10014[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10291 = llvm.extractvalue %10014[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10292 = llvm.extractvalue %10014[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10293 = llvm.extractvalue %10014[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10294 = llvm.extractvalue %10014[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10295 = llvm.extractvalue %10014[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10296 = llvm.extractvalue %10014[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10297 = llvm.extractvalue %10280[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10298 = llvm.extractvalue %10280[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10299 = llvm.extractvalue %10280[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10300 = llvm.extractvalue %10280[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10301 = llvm.extractvalue %10280[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10302 = llvm.extractvalue %10280[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10303 = llvm.extractvalue %10280[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10304 = llvm.extractvalue %10280[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10305 = llvm.extractvalue %10280[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10306 = llvm.extractvalue %10280[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10307 = llvm.extractvalue %10280[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10308 = llvm.extractvalue %10280[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10309 = llvm.extractvalue %10280[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10310 = llvm.extractvalue %10280[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10311 = llvm.extractvalue %10280[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10312 = llvm.extractvalue %10280[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc33)
    %10313 = llvm.icmp "slt" %10281, %10297 : i32 loc(#loc33)
    %10314 = llvm.icmp "slt" %10282, %10298 : i32 loc(#loc33)
    %10315 = llvm.icmp "slt" %10283, %10299 : i32 loc(#loc33)
    %10316 = llvm.icmp "slt" %10284, %10300 : i32 loc(#loc33)
    %10317 = llvm.icmp "slt" %10285, %10301 : i32 loc(#loc33)
    %10318 = llvm.icmp "slt" %10286, %10302 : i32 loc(#loc33)
    %10319 = llvm.icmp "slt" %10287, %10303 : i32 loc(#loc33)
    %10320 = llvm.icmp "slt" %10288, %10304 : i32 loc(#loc33)
    %10321 = llvm.icmp "slt" %10289, %10305 : i32 loc(#loc33)
    %10322 = llvm.icmp "slt" %10290, %10306 : i32 loc(#loc33)
    %10323 = llvm.icmp "slt" %10291, %10307 : i32 loc(#loc33)
    %10324 = llvm.icmp "slt" %10292, %10308 : i32 loc(#loc33)
    %10325 = llvm.icmp "slt" %10293, %10309 : i32 loc(#loc33)
    %10326 = llvm.icmp "slt" %10294, %10310 : i32 loc(#loc33)
    %10327 = llvm.icmp "slt" %10295, %10311 : i32 loc(#loc33)
    %10328 = llvm.icmp "slt" %10296, %10312 : i32 loc(#loc33)
    %10329 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc33)
    %10330 = llvm.insertvalue %10313, %10329[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10331 = llvm.insertvalue %10314, %10330[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10332 = llvm.insertvalue %10315, %10331[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10333 = llvm.insertvalue %10316, %10332[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10334 = llvm.insertvalue %10317, %10333[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10335 = llvm.insertvalue %10318, %10334[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10336 = llvm.insertvalue %10319, %10335[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10337 = llvm.insertvalue %10320, %10336[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10338 = llvm.insertvalue %10321, %10337[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10339 = llvm.insertvalue %10322, %10338[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10340 = llvm.insertvalue %10323, %10339[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10341 = llvm.insertvalue %10324, %10340[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10342 = llvm.insertvalue %10325, %10341[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10343 = llvm.insertvalue %10326, %10342[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10344 = llvm.insertvalue %10327, %10343[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10345 = llvm.insertvalue %10328, %10344[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc33)
    %10346 = llvm.extractvalue %10262[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10347 = llvm.extractvalue %10262[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10348 = llvm.extractvalue %10262[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10349 = llvm.extractvalue %10262[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10350 = llvm.extractvalue %10262[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10351 = llvm.extractvalue %10262[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10352 = llvm.extractvalue %10262[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10353 = llvm.extractvalue %10262[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10354 = llvm.extractvalue %10262[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10355 = llvm.extractvalue %10262[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10356 = llvm.extractvalue %10262[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10357 = llvm.extractvalue %10262[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10358 = llvm.extractvalue %10262[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10359 = llvm.extractvalue %10262[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10360 = llvm.extractvalue %10262[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10361 = llvm.extractvalue %10262[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10362 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc34)
    %10363 = llvm.insertvalue %10361, %10362[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10364 = llvm.insertvalue %10361, %10363[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10365 = llvm.insertvalue %10361, %10364[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10366 = llvm.insertvalue %10361, %10365[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10367 = llvm.insertvalue %10361, %10366[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10368 = llvm.insertvalue %10361, %10367[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10369 = llvm.insertvalue %10361, %10368[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10370 = llvm.insertvalue %10361, %10369[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10371 = llvm.insertvalue %10361, %10370[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10372 = llvm.insertvalue %10361, %10371[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10373 = llvm.insertvalue %10361, %10372[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10374 = llvm.insertvalue %10361, %10373[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10375 = llvm.insertvalue %10361, %10374[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10376 = llvm.insertvalue %10361, %10375[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10377 = llvm.insertvalue %10361, %10376[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10378 = llvm.insertvalue %10361, %10377[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10379 = llvm.extractvalue %10345[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10380 = llvm.extractvalue %10345[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10381 = llvm.extractvalue %10345[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10382 = llvm.extractvalue %10345[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10383 = llvm.extractvalue %10345[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10384 = llvm.extractvalue %10345[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10385 = llvm.extractvalue %10345[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10386 = llvm.extractvalue %10345[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10387 = llvm.extractvalue %10345[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10388 = llvm.extractvalue %10345[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10389 = llvm.extractvalue %10345[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10390 = llvm.extractvalue %10345[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10391 = llvm.extractvalue %10345[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10392 = llvm.extractvalue %10345[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10393 = llvm.extractvalue %10345[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10394 = llvm.extractvalue %10345[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10395 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc34)
    %10396 = llvm.insertvalue %10379, %10395[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10397 = llvm.insertvalue %10380, %10396[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10398 = llvm.insertvalue %10381, %10397[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10399 = llvm.insertvalue %10382, %10398[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10400 = llvm.insertvalue %10383, %10399[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10401 = llvm.insertvalue %10384, %10400[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10402 = llvm.insertvalue %10385, %10401[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10403 = llvm.insertvalue %10386, %10402[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10404 = llvm.insertvalue %10387, %10403[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10405 = llvm.insertvalue %10388, %10404[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10406 = llvm.insertvalue %10389, %10405[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10407 = llvm.insertvalue %10390, %10406[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10408 = llvm.insertvalue %10391, %10407[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10409 = llvm.insertvalue %10392, %10408[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10410 = llvm.insertvalue %10393, %10409[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10411 = llvm.insertvalue %10394, %10410[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10412 = llvm.extractvalue %10378[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10413 = llvm.extractvalue %10378[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10414 = llvm.extractvalue %10378[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10415 = llvm.extractvalue %10378[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10416 = llvm.extractvalue %10378[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10417 = llvm.extractvalue %10378[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10418 = llvm.extractvalue %10378[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10419 = llvm.extractvalue %10378[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10420 = llvm.extractvalue %10378[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10421 = llvm.extractvalue %10378[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10422 = llvm.extractvalue %10378[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10423 = llvm.extractvalue %10378[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10424 = llvm.extractvalue %10378[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10425 = llvm.extractvalue %10378[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10426 = llvm.extractvalue %10378[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10427 = llvm.extractvalue %10378[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10428 = llvm.extractvalue %10411[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10429 = llvm.extractvalue %10411[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10430 = llvm.extractvalue %10411[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10431 = llvm.extractvalue %10411[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10432 = llvm.extractvalue %10411[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10433 = llvm.extractvalue %10411[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10434 = llvm.extractvalue %10411[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10435 = llvm.extractvalue %10411[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10436 = llvm.extractvalue %10411[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10437 = llvm.extractvalue %10411[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10438 = llvm.extractvalue %10411[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10439 = llvm.extractvalue %10411[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10440 = llvm.extractvalue %10411[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10441 = llvm.extractvalue %10411[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10442 = llvm.extractvalue %10411[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10443 = llvm.extractvalue %10411[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10444 = llvm.and %10412, %10428 : i1 loc(#loc34)
    %10445 = llvm.and %10413, %10429 : i1 loc(#loc34)
    %10446 = llvm.and %10414, %10430 : i1 loc(#loc34)
    %10447 = llvm.and %10415, %10431 : i1 loc(#loc34)
    %10448 = llvm.and %10416, %10432 : i1 loc(#loc34)
    %10449 = llvm.and %10417, %10433 : i1 loc(#loc34)
    %10450 = llvm.and %10418, %10434 : i1 loc(#loc34)
    %10451 = llvm.and %10419, %10435 : i1 loc(#loc34)
    %10452 = llvm.and %10420, %10436 : i1 loc(#loc34)
    %10453 = llvm.and %10421, %10437 : i1 loc(#loc34)
    %10454 = llvm.and %10422, %10438 : i1 loc(#loc34)
    %10455 = llvm.and %10423, %10439 : i1 loc(#loc34)
    %10456 = llvm.and %10424, %10440 : i1 loc(#loc34)
    %10457 = llvm.and %10425, %10441 : i1 loc(#loc34)
    %10458 = llvm.and %10426, %10442 : i1 loc(#loc34)
    %10459 = llvm.and %10427, %10443 : i1 loc(#loc34)
    %10460 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc34)
    %10461 = llvm.insertvalue %10444, %10460[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10462 = llvm.insertvalue %10445, %10461[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10463 = llvm.insertvalue %10446, %10462[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10464 = llvm.insertvalue %10447, %10463[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10465 = llvm.insertvalue %10448, %10464[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10466 = llvm.insertvalue %10449, %10465[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10467 = llvm.insertvalue %10450, %10466[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10468 = llvm.insertvalue %10451, %10467[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10469 = llvm.insertvalue %10452, %10468[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10470 = llvm.insertvalue %10453, %10469[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10471 = llvm.insertvalue %10454, %10470[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10472 = llvm.insertvalue %10455, %10471[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10473 = llvm.insertvalue %10456, %10472[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10474 = llvm.insertvalue %10457, %10473[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10475 = llvm.insertvalue %10458, %10474[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10476 = llvm.insertvalue %10459, %10475[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc34)
    %10477 = llvm.bitcast %10114 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc35)
    %10478 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc35)
    %10479 = llvm.insertvalue %10477, %10478[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10480 = llvm.insertvalue %10477, %10479[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10481 = llvm.insertvalue %10477, %10480[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10482 = llvm.insertvalue %10477, %10481[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10483 = llvm.insertvalue %10477, %10482[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10484 = llvm.insertvalue %10477, %10483[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10485 = llvm.insertvalue %10477, %10484[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10486 = llvm.insertvalue %10477, %10485[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10487 = llvm.insertvalue %10477, %10486[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10488 = llvm.insertvalue %10477, %10487[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10489 = llvm.insertvalue %10477, %10488[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10490 = llvm.insertvalue %10477, %10489[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10491 = llvm.insertvalue %10477, %10490[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10492 = llvm.insertvalue %10477, %10491[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10493 = llvm.insertvalue %10477, %10492[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10494 = llvm.insertvalue %10477, %10493[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10495 = llvm.extractvalue %10494[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10496 = llvm.extractvalue %10494[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10497 = llvm.extractvalue %10494[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10498 = llvm.extractvalue %10494[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10499 = llvm.extractvalue %10494[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10500 = llvm.extractvalue %10494[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10501 = llvm.extractvalue %10494[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10502 = llvm.extractvalue %10494[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10503 = llvm.extractvalue %10494[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10504 = llvm.extractvalue %10494[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10505 = llvm.extractvalue %10494[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10506 = llvm.extractvalue %10494[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10507 = llvm.extractvalue %10494[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10508 = llvm.extractvalue %10494[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10509 = llvm.extractvalue %10494[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10510 = llvm.extractvalue %10494[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10511 = llvm.extractvalue %10179[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10512 = llvm.extractvalue %10179[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10513 = llvm.extractvalue %10179[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10514 = llvm.extractvalue %10179[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10515 = llvm.extractvalue %10179[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10516 = llvm.extractvalue %10179[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10517 = llvm.extractvalue %10179[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10518 = llvm.extractvalue %10179[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10519 = llvm.extractvalue %10179[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10520 = llvm.extractvalue %10179[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10521 = llvm.extractvalue %10179[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10522 = llvm.extractvalue %10179[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10523 = llvm.extractvalue %10179[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10524 = llvm.extractvalue %10179[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10525 = llvm.extractvalue %10179[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10526 = llvm.extractvalue %10179[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc35)
    %10527 = llvm.getelementptr %10495[%10511] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10528 = llvm.getelementptr %10496[%10512] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10529 = llvm.getelementptr %10497[%10513] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10530 = llvm.getelementptr %10498[%10514] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10531 = llvm.getelementptr %10499[%10515] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10532 = llvm.getelementptr %10500[%10516] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10533 = llvm.getelementptr %10501[%10517] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10534 = llvm.getelementptr %10502[%10518] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10535 = llvm.getelementptr %10503[%10519] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10536 = llvm.getelementptr %10504[%10520] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10537 = llvm.getelementptr %10505[%10521] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10538 = llvm.getelementptr %10506[%10522] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10539 = llvm.getelementptr %10507[%10523] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10540 = llvm.getelementptr %10508[%10524] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10541 = llvm.getelementptr %10509[%10525] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10542 = llvm.getelementptr %10510[%10526] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc35)
    %10543 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc35)
    %10544 = llvm.insertvalue %10527, %10543[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10545 = llvm.insertvalue %10528, %10544[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10546 = llvm.insertvalue %10529, %10545[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10547 = llvm.insertvalue %10530, %10546[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10548 = llvm.insertvalue %10531, %10547[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10549 = llvm.insertvalue %10532, %10548[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10550 = llvm.insertvalue %10533, %10549[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10551 = llvm.insertvalue %10534, %10550[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10552 = llvm.insertvalue %10535, %10551[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10553 = llvm.insertvalue %10536, %10552[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10554 = llvm.insertvalue %10537, %10553[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10555 = llvm.insertvalue %10538, %10554[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10556 = llvm.insertvalue %10539, %10555[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10557 = llvm.insertvalue %10540, %10556[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10558 = llvm.insertvalue %10541, %10557[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10559 = llvm.insertvalue %10542, %10558[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10560 = llvm.extractvalue %10559[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10561 = llvm.extractvalue %10559[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10562 = llvm.extractvalue %10559[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10563 = llvm.extractvalue %10559[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10564 = llvm.extractvalue %10559[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10565 = llvm.extractvalue %10559[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10566 = llvm.extractvalue %10559[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10567 = llvm.extractvalue %10559[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10568 = llvm.extractvalue %10559[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10569 = llvm.extractvalue %10559[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10570 = llvm.extractvalue %10559[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10571 = llvm.extractvalue %10559[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10572 = llvm.extractvalue %10559[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10573 = llvm.extractvalue %10559[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10574 = llvm.extractvalue %10559[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10575 = llvm.extractvalue %10559[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc35)
    %10576 = llvm.extractvalue %9860[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10577 = llvm.extractvalue %9860[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10578 = llvm.extractvalue %9860[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10579 = llvm.extractvalue %9860[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10580 = llvm.extractvalue %9860[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10581 = llvm.extractvalue %9860[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10582 = llvm.extractvalue %9860[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10583 = llvm.extractvalue %9860[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10584 = llvm.extractvalue %9860[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10585 = llvm.extractvalue %9860[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10586 = llvm.extractvalue %9860[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10587 = llvm.extractvalue %9860[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10588 = llvm.extractvalue %9860[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10589 = llvm.extractvalue %9860[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10590 = llvm.extractvalue %9860[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10591 = llvm.extractvalue %9860[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc35)
    %10592 = llvm.extractvalue %10476[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10593 = llvm.extractvalue %10476[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10594 = llvm.extractvalue %10476[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10595 = llvm.extractvalue %10476[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10596 = llvm.extractvalue %10476[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10597 = llvm.extractvalue %10476[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10598 = llvm.extractvalue %10476[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10599 = llvm.extractvalue %10476[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10600 = llvm.extractvalue %10476[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10601 = llvm.extractvalue %10476[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10602 = llvm.extractvalue %10476[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10603 = llvm.extractvalue %10476[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10604 = llvm.extractvalue %10476[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10605 = llvm.extractvalue %10476[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10606 = llvm.extractvalue %10476[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10607 = llvm.extractvalue %10476[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc35)
    %10608 = llvm.mlir.constant(0 : i32) : i32 loc(#loc35)
    %10609 = rocdl.workitem.id.x : i32 loc(#loc35)
    %10610 = llvm.mlir.constant(64 : i32) : i32 loc(#loc35)
    %10611 = llvm.urem %10609, %10610 : i32 loc(#loc35)
    %10612 = llvm.udiv %10609, %10610 : i32 loc(#loc35)
    %10613 = llvm.mlir.constant(true) : i1 loc(#loc35)
    %10614 = llvm.and %10613, %10592 : i1 loc(#loc35)
    %10615 = llvm.mlir.undef : vector<4xf32> loc(#loc35)
    %10616 = llvm.mlir.constant(0 : i32) : i32 loc(#loc35)
    %10617 = llvm.insertelement %10576, %10615[%10616 : i32] : vector<4xf32> loc(#loc35)
    %10618 = llvm.mlir.constant(1 : i32) : i32 loc(#loc35)
    %10619 = llvm.insertelement %10577, %10617[%10618 : i32] : vector<4xf32> loc(#loc35)
    %10620 = llvm.mlir.constant(2 : i32) : i32 loc(#loc35)
    %10621 = llvm.insertelement %10578, %10619[%10620 : i32] : vector<4xf32> loc(#loc35)
    %10622 = llvm.mlir.constant(3 : i32) : i32 loc(#loc35)
    %10623 = llvm.insertelement %10579, %10621[%10622 : i32] : vector<4xf32> loc(#loc35)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%10560, %10623, %10614) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc35)
    %10624 = llvm.and %10613, %10596 : i1 loc(#loc35)
    %10625 = llvm.mlir.undef : vector<4xf32> loc(#loc35)
    %10626 = llvm.mlir.constant(0 : i32) : i32 loc(#loc35)
    %10627 = llvm.insertelement %10580, %10625[%10626 : i32] : vector<4xf32> loc(#loc35)
    %10628 = llvm.mlir.constant(1 : i32) : i32 loc(#loc35)
    %10629 = llvm.insertelement %10581, %10627[%10628 : i32] : vector<4xf32> loc(#loc35)
    %10630 = llvm.mlir.constant(2 : i32) : i32 loc(#loc35)
    %10631 = llvm.insertelement %10582, %10629[%10630 : i32] : vector<4xf32> loc(#loc35)
    %10632 = llvm.mlir.constant(3 : i32) : i32 loc(#loc35)
    %10633 = llvm.insertelement %10583, %10631[%10632 : i32] : vector<4xf32> loc(#loc35)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%10564, %10633, %10624) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc35)
    %10634 = llvm.and %10613, %10600 : i1 loc(#loc35)
    %10635 = llvm.mlir.undef : vector<4xf32> loc(#loc35)
    %10636 = llvm.mlir.constant(0 : i32) : i32 loc(#loc35)
    %10637 = llvm.insertelement %10584, %10635[%10636 : i32] : vector<4xf32> loc(#loc35)
    %10638 = llvm.mlir.constant(1 : i32) : i32 loc(#loc35)
    %10639 = llvm.insertelement %10585, %10637[%10638 : i32] : vector<4xf32> loc(#loc35)
    %10640 = llvm.mlir.constant(2 : i32) : i32 loc(#loc35)
    %10641 = llvm.insertelement %10586, %10639[%10640 : i32] : vector<4xf32> loc(#loc35)
    %10642 = llvm.mlir.constant(3 : i32) : i32 loc(#loc35)
    %10643 = llvm.insertelement %10587, %10641[%10642 : i32] : vector<4xf32> loc(#loc35)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%10568, %10643, %10634) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc35)
    %10644 = llvm.and %10613, %10604 : i1 loc(#loc35)
    %10645 = llvm.mlir.undef : vector<4xf32> loc(#loc35)
    %10646 = llvm.mlir.constant(0 : i32) : i32 loc(#loc35)
    %10647 = llvm.insertelement %10588, %10645[%10646 : i32] : vector<4xf32> loc(#loc35)
    %10648 = llvm.mlir.constant(1 : i32) : i32 loc(#loc35)
    %10649 = llvm.insertelement %10589, %10647[%10648 : i32] : vector<4xf32> loc(#loc35)
    %10650 = llvm.mlir.constant(2 : i32) : i32 loc(#loc35)
    %10651 = llvm.insertelement %10590, %10649[%10650 : i32] : vector<4xf32> loc(#loc35)
    %10652 = llvm.mlir.constant(3 : i32) : i32 loc(#loc35)
    %10653 = llvm.insertelement %10591, %10651[%10652 : i32] : vector<4xf32> loc(#loc35)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%10572, %10653, %10644) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc35)
    llvm.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:27)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:61)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:27)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:24)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:54)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc32 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc33 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc34 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc35 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc36 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = rocdl.workitem.id.x : i32 loc(#loc7)
    %104 = llvm.urem %103, %27 : i32 loc(#loc7)
    %105 = llvm.and %104, %33 : i32 loc(#loc7)
    %106 = llvm.icmp "eq" %105, %26 : i32 loc(#loc7)
    %107 = llvm.select %106, %26, %33 : i1, i32 loc(#loc7)
    %108 = llvm.xor %26, %107 : i32 loc(#loc7)
    %109 = llvm.and %104, %32 : i32 loc(#loc7)
    %110 = llvm.icmp "eq" %109, %26 : i32 loc(#loc7)
    %111 = llvm.select %110, %26, %32 : i1, i32 loc(#loc7)
    %112 = llvm.xor %108, %111 : i32 loc(#loc7)
    %113 = llvm.and %104, %24 : i32 loc(#loc7)
    %114 = llvm.icmp "eq" %113, %26 : i32 loc(#loc7)
    %115 = llvm.select %114, %26, %24 : i1, i32 loc(#loc7)
    %116 = llvm.xor %112, %115 : i32 loc(#loc7)
    %117 = llvm.and %104, %23 : i32 loc(#loc7)
    %118 = llvm.icmp "eq" %117, %26 : i32 loc(#loc7)
    %119 = llvm.select %118, %26, %23 : i1, i32 loc(#loc7)
    %120 = llvm.xor %116, %119 : i32 loc(#loc7)
    %121 = llvm.and %104, %22 : i32 loc(#loc7)
    %122 = llvm.icmp "eq" %121, %26 : i32 loc(#loc7)
    %123 = llvm.select %122, %26, %22 : i1, i32 loc(#loc7)
    %124 = llvm.xor %120, %123 : i32 loc(#loc7)
    %125 = llvm.xor %124, %26 : i32 loc(#loc7)
    %126 = llvm.add %125, %25 : i32 loc(#loc7)
    %127 = llvm.add %126, %94 : i32 loc(#loc8)
    %128 = llvm.add %126, %95 : i32 loc(#loc8)
    %129 = llvm.add %126, %96 : i32 loc(#loc8)
    %130 = llvm.add %126, %97 : i32 loc(#loc8)
    %131 = llvm.add %126, %98 : i32 loc(#loc8)
    %132 = llvm.add %126, %99 : i32 loc(#loc8)
    %133 = llvm.add %126, %100 : i32 loc(#loc8)
    %134 = llvm.add %126, %101 : i32 loc(#loc8)
    %135 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %136 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %143 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %144 = llvm.icmp "slt" %126, %arg5 : i32 loc(#loc11)
    %145 = llvm.and %136, %144 : i1 loc(#loc12)
    %146 = llvm.and %137, %144 : i1 loc(#loc12)
    %147 = llvm.and %138, %144 : i1 loc(#loc12)
    %148 = llvm.and %139, %144 : i1 loc(#loc12)
    %149 = llvm.and %140, %144 : i1 loc(#loc12)
    %150 = llvm.and %141, %144 : i1 loc(#loc12)
    %151 = llvm.and %142, %144 : i1 loc(#loc12)
    %152 = llvm.and %143, %144 : i1 loc(#loc12)
    %153 = llvm.and %135, %145 : i1 loc(#loc9)
    %154 = llvm.and %135, %146 : i1 loc(#loc9)
    %155 = llvm.and %135, %147 : i1 loc(#loc9)
    %156 = llvm.and %135, %148 : i1 loc(#loc9)
    %157 = llvm.and %135, %149 : i1 loc(#loc9)
    %158 = llvm.and %135, %150 : i1 loc(#loc9)
    %159 = llvm.and %135, %151 : i1 loc(#loc9)
    %160 = llvm.and %135, %152 : i1 loc(#loc9)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.getelementptr %102[%133] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %168 = llvm.getelementptr %102[%134] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %169 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %169) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %173 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %172) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %174 = llvm.extractelement %173[%25 : i32] : vector<1xbf16> loc(#loc13)
    %175 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %175) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %179 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %178) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %180 = llvm.extractelement %179[%25 : i32] : vector<1xbf16> loc(#loc13)
    %181 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %181) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %185 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %184) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %186 = llvm.extractelement %185[%25 : i32] : vector<1xbf16> loc(#loc13)
    %187 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %188 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%167, %159, %187) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %189 = llvm.extractelement %188[%25 : i32] : vector<1xbf16> loc(#loc13)
    %190 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %191 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%168, %160, %190) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %192 = llvm.extractelement %191[%25 : i32] : vector<1xbf16> loc(#loc13)
    %193 = llvm.insertvalue %171, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %194 = llvm.insertvalue %174, %193[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %195 = llvm.insertvalue %177, %194[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %196 = llvm.insertvalue %180, %195[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %197 = llvm.insertvalue %183, %196[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %198 = llvm.insertvalue %186, %197[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %199 = llvm.insertvalue %189, %198[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %200 = llvm.insertvalue %192, %199[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %201 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %202 = llvm.mul %201, %27 : i32 loc(#loc15)
    %203 = llvm.add %202, %77 : i32 loc(#loc16)
    %204 = llvm.add %202, %78 : i32 loc(#loc16)
    %205 = llvm.add %202, %79 : i32 loc(#loc16)
    %206 = llvm.add %202, %80 : i32 loc(#loc16)
    %207 = llvm.add %202, %81 : i32 loc(#loc16)
    %208 = llvm.add %202, %82 : i32 loc(#loc16)
    %209 = llvm.add %202, %83 : i32 loc(#loc16)
    %210 = llvm.add %202, %84 : i32 loc(#loc16)
    %211 = llvm.mul %202, %arg7 : i32 loc(#loc17)
    %212 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %213 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %214 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %215 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %216 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %217 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %218 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %219 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %220 = llvm.getelementptr %arg2[%211] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %221 = llvm.add %126, %212 : i32 loc(#loc18)
    %222 = llvm.add %126, %213 : i32 loc(#loc18)
    %223 = llvm.add %126, %214 : i32 loc(#loc18)
    %224 = llvm.add %126, %215 : i32 loc(#loc18)
    %225 = llvm.add %126, %216 : i32 loc(#loc18)
    %226 = llvm.add %126, %217 : i32 loc(#loc18)
    %227 = llvm.add %126, %218 : i32 loc(#loc18)
    %228 = llvm.add %126, %219 : i32 loc(#loc18)
    %229 = llvm.icmp "slt" %203, %arg4 : i32 loc(#loc19)
    %230 = llvm.icmp "slt" %204, %arg4 : i32 loc(#loc19)
    %231 = llvm.icmp "slt" %205, %arg4 : i32 loc(#loc19)
    %232 = llvm.icmp "slt" %206, %arg4 : i32 loc(#loc19)
    %233 = llvm.icmp "slt" %207, %arg4 : i32 loc(#loc19)
    %234 = llvm.icmp "slt" %208, %arg4 : i32 loc(#loc19)
    %235 = llvm.icmp "slt" %209, %arg4 : i32 loc(#loc19)
    %236 = llvm.icmp "slt" %210, %arg4 : i32 loc(#loc19)
    %237 = llvm.and %229, %144 : i1 loc(#loc20)
    %238 = llvm.and %230, %144 : i1 loc(#loc20)
    %239 = llvm.and %231, %144 : i1 loc(#loc20)
    %240 = llvm.and %232, %144 : i1 loc(#loc20)
    %241 = llvm.and %233, %144 : i1 loc(#loc20)
    %242 = llvm.and %234, %144 : i1 loc(#loc20)
    %243 = llvm.and %235, %144 : i1 loc(#loc20)
    %244 = llvm.and %236, %144 : i1 loc(#loc20)
    %245 = llvm.and %135, %237 : i1 loc(#loc9)
    %246 = llvm.and %135, %238 : i1 loc(#loc9)
    %247 = llvm.and %135, %239 : i1 loc(#loc9)
    %248 = llvm.and %135, %240 : i1 loc(#loc9)
    %249 = llvm.and %135, %241 : i1 loc(#loc9)
    %250 = llvm.and %135, %242 : i1 loc(#loc9)
    %251 = llvm.and %135, %243 : i1 loc(#loc9)
    %252 = llvm.and %135, %244 : i1 loc(#loc9)
    %253 = llvm.getelementptr %220[%221] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %254 = llvm.getelementptr %220[%222] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %255 = llvm.getelementptr %220[%223] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %256 = llvm.getelementptr %220[%224] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %257 = llvm.getelementptr %220[%225] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %258 = llvm.getelementptr %220[%226] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %259 = llvm.getelementptr %220[%227] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %260 = llvm.getelementptr %220[%228] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %261 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%253, %245, %261) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %265 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%254, %246, %264) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %266 = llvm.extractelement %265[%25 : i32] : vector<1xbf16> loc(#loc21)
    %267 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%255, %247, %267) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %269 = llvm.extractelement %268[%25 : i32] : vector<1xbf16> loc(#loc21)
    %270 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %271 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%256, %248, %270) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %272 = llvm.extractelement %271[%25 : i32] : vector<1xbf16> loc(#loc21)
    %273 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %274 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%257, %249, %273) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %275 = llvm.extractelement %274[%25 : i32] : vector<1xbf16> loc(#loc21)
    %276 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %277 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%258, %250, %276) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %278 = llvm.extractelement %277[%25 : i32] : vector<1xbf16> loc(#loc21)
    %279 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %280 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%259, %251, %279) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %281 = llvm.extractelement %280[%25 : i32] : vector<1xbf16> loc(#loc21)
    %282 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %283 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%260, %252, %282) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %284 = llvm.extractelement %283[%25 : i32] : vector<1xbf16> loc(#loc21)
    %285 = llvm.insertvalue %263, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %286 = llvm.insertvalue %266, %285[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %287 = llvm.insertvalue %269, %286[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %288 = llvm.insertvalue %272, %287[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %289 = llvm.insertvalue %275, %288[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %290 = llvm.insertvalue %278, %289[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %291 = llvm.insertvalue %281, %290[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %292 = llvm.insertvalue %284, %291[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %293 = llvm.add %126, %30 : i32 loc(#loc22)
    %294 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %295 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %296 = llvm.icmp "slt" %293, %arg5 : i32 loc(#loc11)
    %297 = llvm.and %136, %296 : i1 loc(#loc12)
    %298 = llvm.and %137, %296 : i1 loc(#loc12)
    %299 = llvm.and %138, %296 : i1 loc(#loc12)
    %300 = llvm.and %139, %296 : i1 loc(#loc12)
    %301 = llvm.and %140, %296 : i1 loc(#loc12)
    %302 = llvm.and %141, %296 : i1 loc(#loc12)
    %303 = llvm.and %142, %296 : i1 loc(#loc12)
    %304 = llvm.and %143, %296 : i1 loc(#loc12)
    %305 = llvm.and %295, %297 : i1 loc(#loc9)
    %306 = llvm.and %295, %298 : i1 loc(#loc9)
    %307 = llvm.and %295, %299 : i1 loc(#loc9)
    %308 = llvm.and %295, %300 : i1 loc(#loc9)
    %309 = llvm.and %295, %301 : i1 loc(#loc9)
    %310 = llvm.and %295, %302 : i1 loc(#loc9)
    %311 = llvm.and %295, %303 : i1 loc(#loc9)
    %312 = llvm.and %295, %304 : i1 loc(#loc9)
    %313 = llvm.getelementptr %294[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %314 = llvm.getelementptr %294[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %315 = llvm.getelementptr %294[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %316 = llvm.getelementptr %294[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %317 = llvm.getelementptr %294[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %318 = llvm.getelementptr %294[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %319 = llvm.getelementptr %294[%133] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %320 = llvm.getelementptr %294[%134] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %321 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %322 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%313, %305, %321) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %323 = llvm.extractelement %322[%25 : i32] : vector<1xbf16> loc(#loc13)
    %324 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %325 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%314, %306, %324) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %326 = llvm.extractelement %325[%25 : i32] : vector<1xbf16> loc(#loc13)
    %327 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %328 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%315, %307, %327) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %329 = llvm.extractelement %328[%25 : i32] : vector<1xbf16> loc(#loc13)
    %330 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %331 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%316, %308, %330) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %332 = llvm.extractelement %331[%25 : i32] : vector<1xbf16> loc(#loc13)
    %333 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %334 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%317, %309, %333) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %335 = llvm.extractelement %334[%25 : i32] : vector<1xbf16> loc(#loc13)
    %336 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %337 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%318, %310, %336) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %338 = llvm.extractelement %337[%25 : i32] : vector<1xbf16> loc(#loc13)
    %339 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %340 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%319, %311, %339) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %341 = llvm.extractelement %340[%25 : i32] : vector<1xbf16> loc(#loc13)
    %342 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %343 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%320, %312, %342) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %344 = llvm.extractelement %343[%25 : i32] : vector<1xbf16> loc(#loc13)
    %345 = llvm.insertvalue %323, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %346 = llvm.insertvalue %326, %345[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %347 = llvm.insertvalue %329, %346[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %348 = llvm.insertvalue %332, %347[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %349 = llvm.insertvalue %335, %348[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %350 = llvm.insertvalue %338, %349[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %351 = llvm.insertvalue %341, %350[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %352 = llvm.insertvalue %344, %351[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %353 = llvm.getelementptr %220[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %354 = llvm.and %229, %296 : i1 loc(#loc20)
    %355 = llvm.and %230, %296 : i1 loc(#loc20)
    %356 = llvm.and %231, %296 : i1 loc(#loc20)
    %357 = llvm.and %232, %296 : i1 loc(#loc20)
    %358 = llvm.and %233, %296 : i1 loc(#loc20)
    %359 = llvm.and %234, %296 : i1 loc(#loc20)
    %360 = llvm.and %235, %296 : i1 loc(#loc20)
    %361 = llvm.and %236, %296 : i1 loc(#loc20)
    %362 = llvm.and %295, %354 : i1 loc(#loc9)
    %363 = llvm.and %295, %355 : i1 loc(#loc9)
    %364 = llvm.and %295, %356 : i1 loc(#loc9)
    %365 = llvm.and %295, %357 : i1 loc(#loc9)
    %366 = llvm.and %295, %358 : i1 loc(#loc9)
    %367 = llvm.and %295, %359 : i1 loc(#loc9)
    %368 = llvm.and %295, %360 : i1 loc(#loc9)
    %369 = llvm.and %295, %361 : i1 loc(#loc9)
    %370 = llvm.getelementptr %353[%221] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %371 = llvm.getelementptr %353[%222] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %372 = llvm.getelementptr %353[%223] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %373 = llvm.getelementptr %353[%224] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %374 = llvm.getelementptr %353[%225] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %375 = llvm.getelementptr %353[%226] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %376 = llvm.getelementptr %353[%227] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %377 = llvm.getelementptr %353[%228] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %378 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %379 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%370, %362, %378) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %380 = llvm.extractelement %379[%25 : i32] : vector<1xbf16> loc(#loc21)
    %381 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %382 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%371, %363, %381) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %383 = llvm.extractelement %382[%25 : i32] : vector<1xbf16> loc(#loc21)
    %384 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %385 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%372, %364, %384) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %386 = llvm.extractelement %385[%25 : i32] : vector<1xbf16> loc(#loc21)
    %387 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %388 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%373, %365, %387) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %389 = llvm.extractelement %388[%25 : i32] : vector<1xbf16> loc(#loc21)
    %390 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %391 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%374, %366, %390) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %392 = llvm.extractelement %391[%25 : i32] : vector<1xbf16> loc(#loc21)
    %393 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %394 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%375, %367, %393) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %395 = llvm.extractelement %394[%25 : i32] : vector<1xbf16> loc(#loc21)
    %396 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %397 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%376, %368, %396) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %398 = llvm.extractelement %397[%25 : i32] : vector<1xbf16> loc(#loc21)
    %399 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %400 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%377, %369, %399) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %401 = llvm.extractelement %400[%25 : i32] : vector<1xbf16> loc(#loc21)
    %402 = llvm.insertvalue %380, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %403 = llvm.insertvalue %383, %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %404 = llvm.insertvalue %386, %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %405 = llvm.insertvalue %389, %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %406 = llvm.insertvalue %392, %405[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %407 = llvm.insertvalue %395, %406[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %408 = llvm.insertvalue %398, %407[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %409 = llvm.insertvalue %401, %408[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %410 = rocdl.workitem.id.x : i32 loc(#loc4)
    %411 = llvm.urem %410, %27 : i32 loc(#loc4)
    %412 = llvm.udiv %410, %27 : i32 loc(#loc4)
    %413 = llvm.and %411, %33 : i32 loc(#loc4)
    %414 = llvm.icmp "eq" %413, %26 : i32 loc(#loc4)
    %415 = llvm.select %414, %26, %33 : i1, i32 loc(#loc4)
    %416 = llvm.xor %26, %415 : i32 loc(#loc4)
    %417 = llvm.and %411, %32 : i32 loc(#loc4)
    %418 = llvm.icmp "eq" %417, %26 : i32 loc(#loc4)
    %419 = llvm.select %418, %26, %32 : i1, i32 loc(#loc4)
    %420 = llvm.xor %416, %419 : i32 loc(#loc4)
    %421 = llvm.and %411, %24 : i32 loc(#loc4)
    %422 = llvm.icmp "eq" %421, %26 : i32 loc(#loc4)
    %423 = llvm.select %422, %26, %24 : i1, i32 loc(#loc4)
    %424 = llvm.xor %420, %423 : i32 loc(#loc4)
    %425 = llvm.and %411, %23 : i32 loc(#loc4)
    %426 = llvm.icmp "eq" %425, %26 : i32 loc(#loc4)
    %427 = llvm.select %426, %26, %23 : i1, i32 loc(#loc4)
    %428 = llvm.xor %424, %427 : i32 loc(#loc4)
    %429 = llvm.and %411, %22 : i32 loc(#loc4)
    %430 = llvm.icmp "eq" %429, %26 : i32 loc(#loc4)
    %431 = llvm.select %430, %26, %22 : i1, i32 loc(#loc4)
    %432 = llvm.xor %428, %431 : i32 loc(#loc4)
    %433 = llvm.and %412, %32 : i32 loc(#loc4)
    %434 = llvm.icmp "eq" %433, %26 : i32 loc(#loc4)
    %435 = llvm.select %434, %26, %30 : i1, i32 loc(#loc4)
    %436 = llvm.xor %432, %435 : i32 loc(#loc4)
    %437 = llvm.xor %436, %26 : i32 loc(#loc4)
    %438 = llvm.add %437, %25 : i32 loc(#loc4)
    %439 = rocdl.workitem.id.x : i32 loc(#loc4)
    %440 = llvm.urem %439, %27 : i32 loc(#loc4)
    %441 = llvm.udiv %439, %27 : i32 loc(#loc4)
    %442 = llvm.and %440, %30 : i32 loc(#loc4)
    %443 = llvm.icmp "eq" %442, %26 : i32 loc(#loc4)
    %444 = llvm.select %443, %26, %24 : i1, i32 loc(#loc4)
    %445 = llvm.xor %26, %444 : i32 loc(#loc4)
    %446 = llvm.and %441, %33 : i32 loc(#loc4)
    %447 = llvm.icmp "eq" %446, %26 : i32 loc(#loc4)
    %448 = llvm.select %447, %26, %30 : i1, i32 loc(#loc4)
    %449 = llvm.xor %445, %448 : i32 loc(#loc4)
    %450 = llvm.xor %449, %26 : i32 loc(#loc4)
    %451 = llvm.xor %449, %23 : i32 loc(#loc4)
    %452 = llvm.xor %449, %22 : i32 loc(#loc4)
    %453 = llvm.xor %449, %21 : i32 loc(#loc4)
    %454 = llvm.add %450, %25 : i32 loc(#loc4)
    %455 = llvm.add %451, %25 : i32 loc(#loc4)
    %456 = llvm.add %452, %25 : i32 loc(#loc4)
    %457 = llvm.add %453, %25 : i32 loc(#loc4)
    %458 = llvm.add %53, %438 : i32 loc(#loc5)
    %459 = llvm.add %202, %454 : i32 loc(#loc16)
    %460 = llvm.add %202, %455 : i32 loc(#loc16)
    %461 = llvm.add %202, %456 : i32 loc(#loc16)
    %462 = llvm.add %202, %457 : i32 loc(#loc16)
    %463 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %292, %409, %200, %352 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%464: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %465: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %466: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %467: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %468: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %469: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %470 = llvm.icmp "slt" %464, %463 : i32 loc(#loc9)
    llvm.cond_br %470, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %471 = llvm.add %464, %27 : i32 loc(#loc9)
    %472 = llvm.add %471, %126 : i32 loc(#loc22)
    %473 = llvm.getelementptr %102[%471] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %474 = llvm.icmp "slt" %472, %arg5 : i32 loc(#loc11)
    %475 = llvm.and %136, %474 : i1 loc(#loc12)
    %476 = llvm.and %137, %474 : i1 loc(#loc12)
    %477 = llvm.and %138, %474 : i1 loc(#loc12)
    %478 = llvm.and %139, %474 : i1 loc(#loc12)
    %479 = llvm.and %140, %474 : i1 loc(#loc12)
    %480 = llvm.and %141, %474 : i1 loc(#loc12)
    %481 = llvm.and %142, %474 : i1 loc(#loc12)
    %482 = llvm.and %143, %474 : i1 loc(#loc12)
    %483 = llvm.getelementptr %473[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %484 = llvm.getelementptr %473[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %485 = llvm.getelementptr %473[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %486 = llvm.getelementptr %473[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %487 = llvm.getelementptr %473[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %488 = llvm.getelementptr %473[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %489 = llvm.getelementptr %473[%133] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %490 = llvm.getelementptr %473[%134] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %491 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %492 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%483, %475, %491) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %493 = llvm.extractelement %492[%25 : i32] : vector<1xbf16> loc(#loc13)
    %494 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %495 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%484, %476, %494) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %496 = llvm.extractelement %495[%25 : i32] : vector<1xbf16> loc(#loc13)
    %497 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %498 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%485, %477, %497) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %499 = llvm.extractelement %498[%25 : i32] : vector<1xbf16> loc(#loc13)
    %500 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %501 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%486, %478, %500) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %502 = llvm.extractelement %501[%25 : i32] : vector<1xbf16> loc(#loc13)
    %503 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %504 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%487, %479, %503) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %505 = llvm.extractelement %504[%25 : i32] : vector<1xbf16> loc(#loc13)
    %506 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %507 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%488, %480, %506) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %508 = llvm.extractelement %507[%25 : i32] : vector<1xbf16> loc(#loc13)
    %509 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %510 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%489, %481, %509) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %511 = llvm.extractelement %510[%25 : i32] : vector<1xbf16> loc(#loc13)
    %512 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %513 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%490, %482, %512) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %514 = llvm.extractelement %513[%25 : i32] : vector<1xbf16> loc(#loc13)
    %515 = llvm.insertvalue %493, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %516 = llvm.insertvalue %496, %515[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %517 = llvm.insertvalue %499, %516[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %518 = llvm.insertvalue %502, %517[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %519 = llvm.insertvalue %505, %518[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %520 = llvm.insertvalue %508, %519[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %521 = llvm.insertvalue %511, %520[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %522 = llvm.insertvalue %514, %521[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %523 = llvm.getelementptr %220[%471] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %524 = llvm.and %229, %474 : i1 loc(#loc20)
    %525 = llvm.and %230, %474 : i1 loc(#loc20)
    %526 = llvm.and %231, %474 : i1 loc(#loc20)
    %527 = llvm.and %232, %474 : i1 loc(#loc20)
    %528 = llvm.and %233, %474 : i1 loc(#loc20)
    %529 = llvm.and %234, %474 : i1 loc(#loc20)
    %530 = llvm.and %235, %474 : i1 loc(#loc20)
    %531 = llvm.and %236, %474 : i1 loc(#loc20)
    %532 = llvm.getelementptr %523[%221] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %533 = llvm.getelementptr %523[%222] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %534 = llvm.getelementptr %523[%223] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %535 = llvm.getelementptr %523[%224] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %536 = llvm.getelementptr %523[%225] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %537 = llvm.getelementptr %523[%226] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %538 = llvm.getelementptr %523[%227] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %539 = llvm.getelementptr %523[%228] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %540 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%532, %524, %540) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %542 = llvm.extractelement %541[%25 : i32] : vector<1xbf16> loc(#loc21)
    %543 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %544 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%533, %525, %543) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %545 = llvm.extractelement %544[%25 : i32] : vector<1xbf16> loc(#loc21)
    %546 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %547 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%534, %526, %546) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %548 = llvm.extractelement %547[%25 : i32] : vector<1xbf16> loc(#loc21)
    %549 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %550 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%535, %527, %549) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %551 = llvm.extractelement %550[%25 : i32] : vector<1xbf16> loc(#loc21)
    %552 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %553 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%536, %528, %552) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %554 = llvm.extractelement %553[%25 : i32] : vector<1xbf16> loc(#loc21)
    %555 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %556 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%537, %529, %555) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %557 = llvm.extractelement %556[%25 : i32] : vector<1xbf16> loc(#loc21)
    %558 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %559 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%538, %530, %558) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %560 = llvm.extractelement %559[%25 : i32] : vector<1xbf16> loc(#loc21)
    %561 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc21)
    %562 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%539, %531, %561) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %563 = llvm.extractelement %562[%25 : i32] : vector<1xbf16> loc(#loc21)
    %564 = llvm.insertvalue %542, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %565 = llvm.insertvalue %545, %564[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %566 = llvm.insertvalue %548, %565[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %567 = llvm.insertvalue %551, %566[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %568 = llvm.insertvalue %554, %567[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %569 = llvm.insertvalue %557, %568[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %570 = llvm.insertvalue %560, %569[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %571 = llvm.insertvalue %563, %570[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %572 = llvm.extractvalue %466[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %573 = llvm.extractvalue %466[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %574 = llvm.extractvalue %466[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %575 = llvm.extractvalue %466[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %576 = llvm.extractvalue %466[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %577 = llvm.extractvalue %466[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %578 = llvm.extractvalue %466[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %579 = llvm.extractvalue %466[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %580 = rocdl.workitem.id.x : i32 loc(#loc23)
    %581 = llvm.urem %580, %27 : i32 loc(#loc23)
    %582 = llvm.udiv %580, %27 : i32 loc(#loc23)
    %583 = llvm.and %581, %33 : i32 loc(#loc23)
    %584 = llvm.icmp "eq" %583, %26 : i32 loc(#loc23)
    %585 = llvm.select %584, %26, %33 : i1, i32 loc(#loc23)
    %586 = llvm.xor %26, %585 : i32 loc(#loc23)
    %587 = llvm.and %581, %32 : i32 loc(#loc23)
    %588 = llvm.icmp "eq" %587, %26 : i32 loc(#loc23)
    %589 = llvm.select %588, %26, %32 : i1, i32 loc(#loc23)
    %590 = llvm.xor %586, %589 : i32 loc(#loc23)
    %591 = llvm.and %581, %24 : i32 loc(#loc23)
    %592 = llvm.icmp "eq" %591, %26 : i32 loc(#loc23)
    %593 = llvm.select %592, %26, %24 : i1, i32 loc(#loc23)
    %594 = llvm.xor %590, %593 : i32 loc(#loc23)
    %595 = llvm.and %581, %23 : i32 loc(#loc23)
    %596 = llvm.icmp "eq" %595, %26 : i32 loc(#loc23)
    %597 = llvm.select %596, %26, %23 : i1, i32 loc(#loc23)
    %598 = llvm.xor %594, %597 : i32 loc(#loc23)
    %599 = llvm.and %581, %22 : i32 loc(#loc23)
    %600 = llvm.icmp "eq" %599, %26 : i32 loc(#loc23)
    %601 = llvm.select %600, %26, %22 : i1, i32 loc(#loc23)
    %602 = llvm.xor %598, %601 : i32 loc(#loc23)
    %603 = llvm.and %581, %30 : i32 loc(#loc23)
    %604 = llvm.icmp "eq" %603, %26 : i32 loc(#loc23)
    %605 = llvm.select %604, %26, %33 : i1, i32 loc(#loc23)
    %606 = llvm.xor %26, %605 : i32 loc(#loc23)
    %607 = llvm.and %582, %33 : i32 loc(#loc23)
    %608 = llvm.icmp "eq" %607, %26 : i32 loc(#loc23)
    %609 = llvm.select %608, %26, %32 : i1, i32 loc(#loc23)
    %610 = llvm.xor %606, %609 : i32 loc(#loc23)
    %611 = llvm.and %582, %32 : i32 loc(#loc23)
    %612 = llvm.icmp "eq" %611, %26 : i32 loc(#loc23)
    %613 = llvm.select %612, %26, %23 : i1, i32 loc(#loc23)
    %614 = llvm.xor %602, %613 : i32 loc(#loc23)
    %615 = llvm.select %612, %26, %24 : i1, i32 loc(#loc23)
    %616 = llvm.xor %610, %615 : i32 loc(#loc23)
    %617 = llvm.mul %614, %33 : i32 loc(#loc23)
    %618 = llvm.add %617, %26 : i32 loc(#loc23)
    %619 = llvm.mul %616, %30 : i32 loc(#loc23)
    %620 = llvm.add %618, %619 : i32 loc(#loc23)
    %621 = llvm.getelementptr inbounds %12[%620] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %622 = llvm.insertelement %572, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %622, %621 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %623 = llvm.and %581, %33 : i32 loc(#loc23)
    %624 = llvm.icmp "eq" %623, %26 : i32 loc(#loc23)
    %625 = llvm.select %624, %26, %33 : i1, i32 loc(#loc23)
    %626 = llvm.xor %22, %625 : i32 loc(#loc23)
    %627 = llvm.and %581, %32 : i32 loc(#loc23)
    %628 = llvm.icmp "eq" %627, %26 : i32 loc(#loc23)
    %629 = llvm.select %628, %26, %32 : i1, i32 loc(#loc23)
    %630 = llvm.xor %626, %629 : i32 loc(#loc23)
    %631 = llvm.and %581, %24 : i32 loc(#loc23)
    %632 = llvm.icmp "eq" %631, %26 : i32 loc(#loc23)
    %633 = llvm.select %632, %26, %24 : i1, i32 loc(#loc23)
    %634 = llvm.xor %630, %633 : i32 loc(#loc23)
    %635 = llvm.and %581, %23 : i32 loc(#loc23)
    %636 = llvm.icmp "eq" %635, %26 : i32 loc(#loc23)
    %637 = llvm.select %636, %26, %23 : i1, i32 loc(#loc23)
    %638 = llvm.xor %634, %637 : i32 loc(#loc23)
    %639 = llvm.and %581, %22 : i32 loc(#loc23)
    %640 = llvm.icmp "eq" %639, %26 : i32 loc(#loc23)
    %641 = llvm.select %640, %26, %22 : i1, i32 loc(#loc23)
    %642 = llvm.xor %638, %641 : i32 loc(#loc23)
    %643 = llvm.and %581, %30 : i32 loc(#loc23)
    %644 = llvm.icmp "eq" %643, %26 : i32 loc(#loc23)
    %645 = llvm.select %644, %26, %33 : i1, i32 loc(#loc23)
    %646 = llvm.xor %23, %645 : i32 loc(#loc23)
    %647 = llvm.and %582, %33 : i32 loc(#loc23)
    %648 = llvm.icmp "eq" %647, %26 : i32 loc(#loc23)
    %649 = llvm.select %648, %26, %32 : i1, i32 loc(#loc23)
    %650 = llvm.xor %646, %649 : i32 loc(#loc23)
    %651 = llvm.and %582, %32 : i32 loc(#loc23)
    %652 = llvm.icmp "eq" %651, %26 : i32 loc(#loc23)
    %653 = llvm.select %652, %26, %23 : i1, i32 loc(#loc23)
    %654 = llvm.xor %642, %653 : i32 loc(#loc23)
    %655 = llvm.select %652, %26, %24 : i1, i32 loc(#loc23)
    %656 = llvm.xor %650, %655 : i32 loc(#loc23)
    %657 = llvm.mul %654, %33 : i32 loc(#loc23)
    %658 = llvm.add %657, %26 : i32 loc(#loc23)
    %659 = llvm.mul %656, %30 : i32 loc(#loc23)
    %660 = llvm.add %658, %659 : i32 loc(#loc23)
    %661 = llvm.getelementptr inbounds %12[%660] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %662 = llvm.insertelement %573, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %662, %661 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %663 = llvm.and %581, %33 : i32 loc(#loc23)
    %664 = llvm.icmp "eq" %663, %26 : i32 loc(#loc23)
    %665 = llvm.select %664, %26, %33 : i1, i32 loc(#loc23)
    %666 = llvm.xor %26, %665 : i32 loc(#loc23)
    %667 = llvm.and %581, %32 : i32 loc(#loc23)
    %668 = llvm.icmp "eq" %667, %26 : i32 loc(#loc23)
    %669 = llvm.select %668, %26, %32 : i1, i32 loc(#loc23)
    %670 = llvm.xor %666, %669 : i32 loc(#loc23)
    %671 = llvm.and %581, %24 : i32 loc(#loc23)
    %672 = llvm.icmp "eq" %671, %26 : i32 loc(#loc23)
    %673 = llvm.select %672, %26, %24 : i1, i32 loc(#loc23)
    %674 = llvm.xor %670, %673 : i32 loc(#loc23)
    %675 = llvm.and %581, %23 : i32 loc(#loc23)
    %676 = llvm.icmp "eq" %675, %26 : i32 loc(#loc23)
    %677 = llvm.select %676, %26, %23 : i1, i32 loc(#loc23)
    %678 = llvm.xor %674, %677 : i32 loc(#loc23)
    %679 = llvm.and %581, %22 : i32 loc(#loc23)
    %680 = llvm.icmp "eq" %679, %26 : i32 loc(#loc23)
    %681 = llvm.select %680, %26, %22 : i1, i32 loc(#loc23)
    %682 = llvm.xor %678, %681 : i32 loc(#loc23)
    %683 = llvm.and %581, %30 : i32 loc(#loc23)
    %684 = llvm.icmp "eq" %683, %26 : i32 loc(#loc23)
    %685 = llvm.select %684, %26, %33 : i1, i32 loc(#loc23)
    %686 = llvm.xor %22, %685 : i32 loc(#loc23)
    %687 = llvm.and %582, %33 : i32 loc(#loc23)
    %688 = llvm.icmp "eq" %687, %26 : i32 loc(#loc23)
    %689 = llvm.select %688, %26, %32 : i1, i32 loc(#loc23)
    %690 = llvm.xor %686, %689 : i32 loc(#loc23)
    %691 = llvm.and %582, %32 : i32 loc(#loc23)
    %692 = llvm.icmp "eq" %691, %26 : i32 loc(#loc23)
    %693 = llvm.select %692, %26, %23 : i1, i32 loc(#loc23)
    %694 = llvm.xor %682, %693 : i32 loc(#loc23)
    %695 = llvm.select %692, %26, %24 : i1, i32 loc(#loc23)
    %696 = llvm.xor %690, %695 : i32 loc(#loc23)
    %697 = llvm.mul %694, %33 : i32 loc(#loc23)
    %698 = llvm.add %697, %26 : i32 loc(#loc23)
    %699 = llvm.mul %696, %30 : i32 loc(#loc23)
    %700 = llvm.add %698, %699 : i32 loc(#loc23)
    %701 = llvm.getelementptr inbounds %12[%700] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %702 = llvm.insertelement %574, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %702, %701 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %703 = llvm.and %581, %33 : i32 loc(#loc23)
    %704 = llvm.icmp "eq" %703, %26 : i32 loc(#loc23)
    %705 = llvm.select %704, %26, %33 : i1, i32 loc(#loc23)
    %706 = llvm.xor %22, %705 : i32 loc(#loc23)
    %707 = llvm.and %581, %32 : i32 loc(#loc23)
    %708 = llvm.icmp "eq" %707, %26 : i32 loc(#loc23)
    %709 = llvm.select %708, %26, %32 : i1, i32 loc(#loc23)
    %710 = llvm.xor %706, %709 : i32 loc(#loc23)
    %711 = llvm.and %581, %24 : i32 loc(#loc23)
    %712 = llvm.icmp "eq" %711, %26 : i32 loc(#loc23)
    %713 = llvm.select %712, %26, %24 : i1, i32 loc(#loc23)
    %714 = llvm.xor %710, %713 : i32 loc(#loc23)
    %715 = llvm.and %581, %23 : i32 loc(#loc23)
    %716 = llvm.icmp "eq" %715, %26 : i32 loc(#loc23)
    %717 = llvm.select %716, %26, %23 : i1, i32 loc(#loc23)
    %718 = llvm.xor %714, %717 : i32 loc(#loc23)
    %719 = llvm.and %581, %22 : i32 loc(#loc23)
    %720 = llvm.icmp "eq" %719, %26 : i32 loc(#loc23)
    %721 = llvm.select %720, %26, %22 : i1, i32 loc(#loc23)
    %722 = llvm.xor %718, %721 : i32 loc(#loc23)
    %723 = llvm.and %581, %30 : i32 loc(#loc23)
    %724 = llvm.icmp "eq" %723, %26 : i32 loc(#loc23)
    %725 = llvm.select %724, %26, %33 : i1, i32 loc(#loc23)
    %726 = llvm.xor %21, %725 : i32 loc(#loc23)
    %727 = llvm.and %582, %33 : i32 loc(#loc23)
    %728 = llvm.icmp "eq" %727, %26 : i32 loc(#loc23)
    %729 = llvm.select %728, %26, %32 : i1, i32 loc(#loc23)
    %730 = llvm.xor %726, %729 : i32 loc(#loc23)
    %731 = llvm.and %582, %32 : i32 loc(#loc23)
    %732 = llvm.icmp "eq" %731, %26 : i32 loc(#loc23)
    %733 = llvm.select %732, %26, %23 : i1, i32 loc(#loc23)
    %734 = llvm.xor %722, %733 : i32 loc(#loc23)
    %735 = llvm.select %732, %26, %24 : i1, i32 loc(#loc23)
    %736 = llvm.xor %730, %735 : i32 loc(#loc23)
    %737 = llvm.mul %734, %33 : i32 loc(#loc23)
    %738 = llvm.add %737, %26 : i32 loc(#loc23)
    %739 = llvm.mul %736, %30 : i32 loc(#loc23)
    %740 = llvm.add %738, %739 : i32 loc(#loc23)
    %741 = llvm.getelementptr inbounds %12[%740] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %742 = llvm.insertelement %575, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %742, %741 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %743 = llvm.and %581, %33 : i32 loc(#loc23)
    %744 = llvm.icmp "eq" %743, %26 : i32 loc(#loc23)
    %745 = llvm.select %744, %26, %33 : i1, i32 loc(#loc23)
    %746 = llvm.xor %26, %745 : i32 loc(#loc23)
    %747 = llvm.and %581, %32 : i32 loc(#loc23)
    %748 = llvm.icmp "eq" %747, %26 : i32 loc(#loc23)
    %749 = llvm.select %748, %26, %32 : i1, i32 loc(#loc23)
    %750 = llvm.xor %746, %749 : i32 loc(#loc23)
    %751 = llvm.and %581, %24 : i32 loc(#loc23)
    %752 = llvm.icmp "eq" %751, %26 : i32 loc(#loc23)
    %753 = llvm.select %752, %26, %24 : i1, i32 loc(#loc23)
    %754 = llvm.xor %750, %753 : i32 loc(#loc23)
    %755 = llvm.and %581, %23 : i32 loc(#loc23)
    %756 = llvm.icmp "eq" %755, %26 : i32 loc(#loc23)
    %757 = llvm.select %756, %26, %23 : i1, i32 loc(#loc23)
    %758 = llvm.xor %754, %757 : i32 loc(#loc23)
    %759 = llvm.and %581, %22 : i32 loc(#loc23)
    %760 = llvm.icmp "eq" %759, %26 : i32 loc(#loc23)
    %761 = llvm.select %760, %26, %22 : i1, i32 loc(#loc23)
    %762 = llvm.xor %758, %761 : i32 loc(#loc23)
    %763 = llvm.and %581, %30 : i32 loc(#loc23)
    %764 = llvm.icmp "eq" %763, %26 : i32 loc(#loc23)
    %765 = llvm.select %764, %26, %33 : i1, i32 loc(#loc23)
    %766 = llvm.xor %30, %765 : i32 loc(#loc23)
    %767 = llvm.and %582, %33 : i32 loc(#loc23)
    %768 = llvm.icmp "eq" %767, %26 : i32 loc(#loc23)
    %769 = llvm.select %768, %26, %32 : i1, i32 loc(#loc23)
    %770 = llvm.xor %766, %769 : i32 loc(#loc23)
    %771 = llvm.and %582, %32 : i32 loc(#loc23)
    %772 = llvm.icmp "eq" %771, %26 : i32 loc(#loc23)
    %773 = llvm.select %772, %26, %23 : i1, i32 loc(#loc23)
    %774 = llvm.xor %762, %773 : i32 loc(#loc23)
    %775 = llvm.select %772, %26, %24 : i1, i32 loc(#loc23)
    %776 = llvm.xor %770, %775 : i32 loc(#loc23)
    %777 = llvm.mul %774, %33 : i32 loc(#loc23)
    %778 = llvm.add %777, %26 : i32 loc(#loc23)
    %779 = llvm.mul %776, %30 : i32 loc(#loc23)
    %780 = llvm.add %778, %779 : i32 loc(#loc23)
    %781 = llvm.getelementptr inbounds %12[%780] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %782 = llvm.insertelement %576, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %782, %781 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %783 = llvm.and %581, %33 : i32 loc(#loc23)
    %784 = llvm.icmp "eq" %783, %26 : i32 loc(#loc23)
    %785 = llvm.select %784, %26, %33 : i1, i32 loc(#loc23)
    %786 = llvm.xor %22, %785 : i32 loc(#loc23)
    %787 = llvm.and %581, %32 : i32 loc(#loc23)
    %788 = llvm.icmp "eq" %787, %26 : i32 loc(#loc23)
    %789 = llvm.select %788, %26, %32 : i1, i32 loc(#loc23)
    %790 = llvm.xor %786, %789 : i32 loc(#loc23)
    %791 = llvm.and %581, %24 : i32 loc(#loc23)
    %792 = llvm.icmp "eq" %791, %26 : i32 loc(#loc23)
    %793 = llvm.select %792, %26, %24 : i1, i32 loc(#loc23)
    %794 = llvm.xor %790, %793 : i32 loc(#loc23)
    %795 = llvm.and %581, %23 : i32 loc(#loc23)
    %796 = llvm.icmp "eq" %795, %26 : i32 loc(#loc23)
    %797 = llvm.select %796, %26, %23 : i1, i32 loc(#loc23)
    %798 = llvm.xor %794, %797 : i32 loc(#loc23)
    %799 = llvm.and %581, %22 : i32 loc(#loc23)
    %800 = llvm.icmp "eq" %799, %26 : i32 loc(#loc23)
    %801 = llvm.select %800, %26, %22 : i1, i32 loc(#loc23)
    %802 = llvm.xor %798, %801 : i32 loc(#loc23)
    %803 = llvm.and %581, %30 : i32 loc(#loc23)
    %804 = llvm.icmp "eq" %803, %26 : i32 loc(#loc23)
    %805 = llvm.select %804, %26, %33 : i1, i32 loc(#loc23)
    %806 = llvm.xor %20, %805 : i32 loc(#loc23)
    %807 = llvm.and %582, %33 : i32 loc(#loc23)
    %808 = llvm.icmp "eq" %807, %26 : i32 loc(#loc23)
    %809 = llvm.select %808, %26, %32 : i1, i32 loc(#loc23)
    %810 = llvm.xor %806, %809 : i32 loc(#loc23)
    %811 = llvm.and %582, %32 : i32 loc(#loc23)
    %812 = llvm.icmp "eq" %811, %26 : i32 loc(#loc23)
    %813 = llvm.select %812, %26, %23 : i1, i32 loc(#loc23)
    %814 = llvm.xor %802, %813 : i32 loc(#loc23)
    %815 = llvm.select %812, %26, %24 : i1, i32 loc(#loc23)
    %816 = llvm.xor %810, %815 : i32 loc(#loc23)
    %817 = llvm.mul %814, %33 : i32 loc(#loc23)
    %818 = llvm.add %817, %26 : i32 loc(#loc23)
    %819 = llvm.mul %816, %30 : i32 loc(#loc23)
    %820 = llvm.add %818, %819 : i32 loc(#loc23)
    %821 = llvm.getelementptr inbounds %12[%820] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %822 = llvm.insertelement %577, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %822, %821 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %823 = llvm.and %581, %33 : i32 loc(#loc23)
    %824 = llvm.icmp "eq" %823, %26 : i32 loc(#loc23)
    %825 = llvm.select %824, %26, %33 : i1, i32 loc(#loc23)
    %826 = llvm.xor %26, %825 : i32 loc(#loc23)
    %827 = llvm.and %581, %32 : i32 loc(#loc23)
    %828 = llvm.icmp "eq" %827, %26 : i32 loc(#loc23)
    %829 = llvm.select %828, %26, %32 : i1, i32 loc(#loc23)
    %830 = llvm.xor %826, %829 : i32 loc(#loc23)
    %831 = llvm.and %581, %24 : i32 loc(#loc23)
    %832 = llvm.icmp "eq" %831, %26 : i32 loc(#loc23)
    %833 = llvm.select %832, %26, %24 : i1, i32 loc(#loc23)
    %834 = llvm.xor %830, %833 : i32 loc(#loc23)
    %835 = llvm.and %581, %23 : i32 loc(#loc23)
    %836 = llvm.icmp "eq" %835, %26 : i32 loc(#loc23)
    %837 = llvm.select %836, %26, %23 : i1, i32 loc(#loc23)
    %838 = llvm.xor %834, %837 : i32 loc(#loc23)
    %839 = llvm.and %581, %22 : i32 loc(#loc23)
    %840 = llvm.icmp "eq" %839, %26 : i32 loc(#loc23)
    %841 = llvm.select %840, %26, %22 : i1, i32 loc(#loc23)
    %842 = llvm.xor %838, %841 : i32 loc(#loc23)
    %843 = llvm.and %581, %30 : i32 loc(#loc23)
    %844 = llvm.icmp "eq" %843, %26 : i32 loc(#loc23)
    %845 = llvm.select %844, %26, %33 : i1, i32 loc(#loc23)
    %846 = llvm.xor %19, %845 : i32 loc(#loc23)
    %847 = llvm.and %582, %33 : i32 loc(#loc23)
    %848 = llvm.icmp "eq" %847, %26 : i32 loc(#loc23)
    %849 = llvm.select %848, %26, %32 : i1, i32 loc(#loc23)
    %850 = llvm.xor %846, %849 : i32 loc(#loc23)
    %851 = llvm.and %582, %32 : i32 loc(#loc23)
    %852 = llvm.icmp "eq" %851, %26 : i32 loc(#loc23)
    %853 = llvm.select %852, %26, %23 : i1, i32 loc(#loc23)
    %854 = llvm.xor %842, %853 : i32 loc(#loc23)
    %855 = llvm.select %852, %26, %24 : i1, i32 loc(#loc23)
    %856 = llvm.xor %850, %855 : i32 loc(#loc23)
    %857 = llvm.mul %854, %33 : i32 loc(#loc23)
    %858 = llvm.add %857, %26 : i32 loc(#loc23)
    %859 = llvm.mul %856, %30 : i32 loc(#loc23)
    %860 = llvm.add %858, %859 : i32 loc(#loc23)
    %861 = llvm.getelementptr inbounds %12[%860] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %862 = llvm.insertelement %578, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %862, %861 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %863 = llvm.and %581, %33 : i32 loc(#loc23)
    %864 = llvm.icmp "eq" %863, %26 : i32 loc(#loc23)
    %865 = llvm.select %864, %26, %33 : i1, i32 loc(#loc23)
    %866 = llvm.xor %22, %865 : i32 loc(#loc23)
    %867 = llvm.and %581, %32 : i32 loc(#loc23)
    %868 = llvm.icmp "eq" %867, %26 : i32 loc(#loc23)
    %869 = llvm.select %868, %26, %32 : i1, i32 loc(#loc23)
    %870 = llvm.xor %866, %869 : i32 loc(#loc23)
    %871 = llvm.and %581, %24 : i32 loc(#loc23)
    %872 = llvm.icmp "eq" %871, %26 : i32 loc(#loc23)
    %873 = llvm.select %872, %26, %24 : i1, i32 loc(#loc23)
    %874 = llvm.xor %870, %873 : i32 loc(#loc23)
    %875 = llvm.and %581, %23 : i32 loc(#loc23)
    %876 = llvm.icmp "eq" %875, %26 : i32 loc(#loc23)
    %877 = llvm.select %876, %26, %23 : i1, i32 loc(#loc23)
    %878 = llvm.xor %874, %877 : i32 loc(#loc23)
    %879 = llvm.and %581, %22 : i32 loc(#loc23)
    %880 = llvm.icmp "eq" %879, %26 : i32 loc(#loc23)
    %881 = llvm.select %880, %26, %22 : i1, i32 loc(#loc23)
    %882 = llvm.xor %878, %881 : i32 loc(#loc23)
    %883 = llvm.and %581, %30 : i32 loc(#loc23)
    %884 = llvm.icmp "eq" %883, %26 : i32 loc(#loc23)
    %885 = llvm.select %884, %26, %33 : i1, i32 loc(#loc23)
    %886 = llvm.xor %18, %885 : i32 loc(#loc23)
    %887 = llvm.and %582, %33 : i32 loc(#loc23)
    %888 = llvm.icmp "eq" %887, %26 : i32 loc(#loc23)
    %889 = llvm.select %888, %26, %32 : i1, i32 loc(#loc23)
    %890 = llvm.xor %886, %889 : i32 loc(#loc23)
    %891 = llvm.and %582, %32 : i32 loc(#loc23)
    %892 = llvm.icmp "eq" %891, %26 : i32 loc(#loc23)
    %893 = llvm.select %892, %26, %23 : i1, i32 loc(#loc23)
    %894 = llvm.xor %882, %893 : i32 loc(#loc23)
    %895 = llvm.select %892, %26, %24 : i1, i32 loc(#loc23)
    %896 = llvm.xor %890, %895 : i32 loc(#loc23)
    %897 = llvm.mul %894, %33 : i32 loc(#loc23)
    %898 = llvm.add %897, %26 : i32 loc(#loc23)
    %899 = llvm.mul %896, %30 : i32 loc(#loc23)
    %900 = llvm.add %898, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %579, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %903 = rocdl.workitem.id.x : i32 loc(#loc23)
    %904 = llvm.udiv %903, %27 : i32 loc(#loc23)
    %905 = llvm.urem %903, %27 : i32 loc(#loc23)
    %906 = llvm.urem %904, %32 : i32 loc(#loc23)
    %907 = llvm.urem %906, %32 : i32 loc(#loc23)
    %908 = llvm.urem %904, %33 : i32 loc(#loc23)
    %909 = llvm.mul %907, %30 : i32 loc(#loc23)
    %910 = llvm.urem %905, %30 : i32 loc(#loc23)
    %911 = llvm.icmp "uge" %905, %30 : i32 loc(#loc23)
    %912 = llvm.select %911, %23, %26 : i1, i32 loc(#loc23)
    %913 = llvm.add %910, %26 : i32 loc(#loc23)
    %914 = llvm.add %913, %26 : i32 loc(#loc23)
    %915 = llvm.add %914, %909 : i32 loc(#loc23)
    %916 = llvm.add %912, %26 : i32 loc(#loc23)
    %917 = llvm.add %916, %26 : i32 loc(#loc23)
    %918 = llvm.add %915, %26 : i32 loc(#loc23)
    %919 = llvm.add %917, %26 : i32 loc(#loc23)
    %920 = llvm.urem %905, %30 : i32 loc(#loc23)
    %921 = llvm.icmp "uge" %905, %30 : i32 loc(#loc23)
    %922 = llvm.select %921, %23, %26 : i1, i32 loc(#loc23)
    %923 = llvm.add %920, %26 : i32 loc(#loc23)
    %924 = llvm.add %923, %26 : i32 loc(#loc23)
    %925 = llvm.add %924, %909 : i32 loc(#loc23)
    %926 = llvm.add %922, %22 : i32 loc(#loc23)
    %927 = llvm.add %926, %26 : i32 loc(#loc23)
    %928 = llvm.add %925, %26 : i32 loc(#loc23)
    %929 = llvm.add %927, %26 : i32 loc(#loc23)
    %930 = llvm.udiv %918, %24 : i32 loc(#loc23)
    %931 = llvm.urem %930, %24 : i32 loc(#loc23)
    %932 = llvm.udiv %919, %23 : i32 loc(#loc23)
    %933 = llvm.xor %932, %931 : i32 loc(#loc23)
    %934 = llvm.mul %933, %23 : i32 loc(#loc23)
    %935 = llvm.urem %919, %23 : i32 loc(#loc23)
    %936 = llvm.add %934, %935 : i32 loc(#loc23)
    %937 = llvm.mul %936, %33 : i32 loc(#loc23)
    %938 = llvm.mul %918, %30 : i32 loc(#loc23)
    %939 = llvm.add %937, %938 : i32 loc(#loc23)
    %940 = llvm.udiv %928, %24 : i32 loc(#loc23)
    %941 = llvm.urem %940, %24 : i32 loc(#loc23)
    %942 = llvm.udiv %929, %23 : i32 loc(#loc23)
    %943 = llvm.xor %942, %941 : i32 loc(#loc23)
    %944 = llvm.mul %943, %23 : i32 loc(#loc23)
    %945 = llvm.urem %929, %23 : i32 loc(#loc23)
    %946 = llvm.add %944, %945 : i32 loc(#loc23)
    %947 = llvm.mul %946, %33 : i32 loc(#loc23)
    %948 = llvm.mul %928, %30 : i32 loc(#loc23)
    %949 = llvm.add %947, %948 : i32 loc(#loc23)
    %950 = llvm.mul %26, %30 : i32 loc(#loc23)
    %951 = llvm.add %950, %939 : i32 loc(#loc23)
    %952 = llvm.add %950, %949 : i32 loc(#loc23)
    %953 = llvm.mul %26, %33 : i32 loc(#loc23)
    %954 = llvm.sub %26, %953 : i32 loc(#loc23)
    %955 = llvm.getelementptr %12[%954] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %956 = llvm.mul %26, %30 : i32 loc(#loc23)
    %957 = llvm.sub %26, %956 : i32 loc(#loc23)
    %958 = llvm.getelementptr %955[%957] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %959 = llvm.add %908, %26 : i32 loc(#loc23)
    %960 = llvm.mul %959, %8 : i32 loc(#loc23)
    %961 = llvm.add %951, %960 : i32 loc(#loc23)
    %962 = llvm.getelementptr %958[%961] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %963 = llvm.load %962 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %964 = llvm.extractelement %963[%26 : i32] : vector<8xbf16> loc(#loc23)
    %965 = llvm.extractelement %963[%33 : i32] : vector<8xbf16> loc(#loc23)
    %966 = llvm.extractelement %963[%32 : i32] : vector<8xbf16> loc(#loc23)
    %967 = llvm.extractelement %963[%16 : i32] : vector<8xbf16> loc(#loc23)
    %968 = llvm.extractelement %963[%24 : i32] : vector<8xbf16> loc(#loc23)
    %969 = llvm.extractelement %963[%11 : i32] : vector<8xbf16> loc(#loc23)
    %970 = llvm.extractelement %963[%10 : i32] : vector<8xbf16> loc(#loc23)
    %971 = llvm.extractelement %963[%9 : i32] : vector<8xbf16> loc(#loc23)
    %972 = llvm.add %952, %960 : i32 loc(#loc23)
    %973 = llvm.getelementptr %958[%972] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %974 = llvm.load %973 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %975 = llvm.extractelement %974[%26 : i32] : vector<8xbf16> loc(#loc23)
    %976 = llvm.extractelement %974[%33 : i32] : vector<8xbf16> loc(#loc23)
    %977 = llvm.extractelement %974[%32 : i32] : vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %974[%16 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %974[%24 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %974[%11 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %974[%10 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %974[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %983 = llvm.extractvalue %468[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %984 = llvm.extractvalue %468[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %985 = llvm.extractvalue %468[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %986 = llvm.extractvalue %468[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %987 = llvm.extractvalue %468[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %988 = llvm.extractvalue %468[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %989 = llvm.extractvalue %468[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %990 = llvm.extractvalue %468[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %991 = rocdl.workitem.id.x : i32 loc(#loc13)
    %992 = llvm.urem %991, %27 : i32 loc(#loc13)
    %993 = llvm.udiv %991, %27 : i32 loc(#loc13)
    %994 = llvm.and %992, %33 : i32 loc(#loc13)
    %995 = llvm.icmp "eq" %994, %26 : i32 loc(#loc13)
    %996 = llvm.select %995, %26, %33 : i1, i32 loc(#loc13)
    %997 = llvm.xor %26, %996 : i32 loc(#loc13)
    %998 = llvm.and %992, %32 : i32 loc(#loc13)
    %999 = llvm.icmp "eq" %998, %26 : i32 loc(#loc13)
    %1000 = llvm.select %999, %26, %32 : i1, i32 loc(#loc13)
    %1001 = llvm.xor %997, %1000 : i32 loc(#loc13)
    %1002 = llvm.and %992, %24 : i32 loc(#loc13)
    %1003 = llvm.icmp "eq" %1002, %26 : i32 loc(#loc13)
    %1004 = llvm.select %1003, %26, %24 : i1, i32 loc(#loc13)
    %1005 = llvm.xor %1001, %1004 : i32 loc(#loc13)
    %1006 = llvm.and %992, %23 : i32 loc(#loc13)
    %1007 = llvm.icmp "eq" %1006, %26 : i32 loc(#loc13)
    %1008 = llvm.select %1007, %26, %23 : i1, i32 loc(#loc13)
    %1009 = llvm.xor %1005, %1008 : i32 loc(#loc13)
    %1010 = llvm.and %992, %22 : i32 loc(#loc13)
    %1011 = llvm.icmp "eq" %1010, %26 : i32 loc(#loc13)
    %1012 = llvm.select %1011, %26, %22 : i1, i32 loc(#loc13)
    %1013 = llvm.xor %1009, %1012 : i32 loc(#loc13)
    %1014 = llvm.and %992, %30 : i32 loc(#loc13)
    %1015 = llvm.icmp "eq" %1014, %26 : i32 loc(#loc13)
    %1016 = llvm.select %1015, %26, %33 : i1, i32 loc(#loc13)
    %1017 = llvm.xor %26, %1016 : i32 loc(#loc13)
    %1018 = llvm.and %993, %33 : i32 loc(#loc13)
    %1019 = llvm.icmp "eq" %1018, %26 : i32 loc(#loc13)
    %1020 = llvm.select %1019, %26, %32 : i1, i32 loc(#loc13)
    %1021 = llvm.xor %1017, %1020 : i32 loc(#loc13)
    %1022 = llvm.and %993, %32 : i32 loc(#loc13)
    %1023 = llvm.icmp "eq" %1022, %26 : i32 loc(#loc13)
    %1024 = llvm.select %1023, %26, %23 : i1, i32 loc(#loc13)
    %1025 = llvm.xor %1013, %1024 : i32 loc(#loc13)
    %1026 = llvm.select %1023, %26, %24 : i1, i32 loc(#loc13)
    %1027 = llvm.xor %1021, %1026 : i32 loc(#loc13)
    %1028 = llvm.mul %1025, %33 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %26 : i32 loc(#loc13)
    %1030 = llvm.mul %1027, %30 : i32 loc(#loc13)
    %1031 = llvm.add %1029, %1030 : i32 loc(#loc13)
    %1032 = llvm.getelementptr inbounds %12[%1031] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1033 = llvm.insertelement %983, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1033, %1032 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1034 = llvm.and %992, %33 : i32 loc(#loc13)
    %1035 = llvm.icmp "eq" %1034, %26 : i32 loc(#loc13)
    %1036 = llvm.select %1035, %26, %33 : i1, i32 loc(#loc13)
    %1037 = llvm.xor %22, %1036 : i32 loc(#loc13)
    %1038 = llvm.and %992, %32 : i32 loc(#loc13)
    %1039 = llvm.icmp "eq" %1038, %26 : i32 loc(#loc13)
    %1040 = llvm.select %1039, %26, %32 : i1, i32 loc(#loc13)
    %1041 = llvm.xor %1037, %1040 : i32 loc(#loc13)
    %1042 = llvm.and %992, %24 : i32 loc(#loc13)
    %1043 = llvm.icmp "eq" %1042, %26 : i32 loc(#loc13)
    %1044 = llvm.select %1043, %26, %24 : i1, i32 loc(#loc13)
    %1045 = llvm.xor %1041, %1044 : i32 loc(#loc13)
    %1046 = llvm.and %992, %23 : i32 loc(#loc13)
    %1047 = llvm.icmp "eq" %1046, %26 : i32 loc(#loc13)
    %1048 = llvm.select %1047, %26, %23 : i1, i32 loc(#loc13)
    %1049 = llvm.xor %1045, %1048 : i32 loc(#loc13)
    %1050 = llvm.and %992, %22 : i32 loc(#loc13)
    %1051 = llvm.icmp "eq" %1050, %26 : i32 loc(#loc13)
    %1052 = llvm.select %1051, %26, %22 : i1, i32 loc(#loc13)
    %1053 = llvm.xor %1049, %1052 : i32 loc(#loc13)
    %1054 = llvm.and %992, %30 : i32 loc(#loc13)
    %1055 = llvm.icmp "eq" %1054, %26 : i32 loc(#loc13)
    %1056 = llvm.select %1055, %26, %33 : i1, i32 loc(#loc13)
    %1057 = llvm.xor %23, %1056 : i32 loc(#loc13)
    %1058 = llvm.and %993, %33 : i32 loc(#loc13)
    %1059 = llvm.icmp "eq" %1058, %26 : i32 loc(#loc13)
    %1060 = llvm.select %1059, %26, %32 : i1, i32 loc(#loc13)
    %1061 = llvm.xor %1057, %1060 : i32 loc(#loc13)
    %1062 = llvm.and %993, %32 : i32 loc(#loc13)
    %1063 = llvm.icmp "eq" %1062, %26 : i32 loc(#loc13)
    %1064 = llvm.select %1063, %26, %23 : i1, i32 loc(#loc13)
    %1065 = llvm.xor %1053, %1064 : i32 loc(#loc13)
    %1066 = llvm.select %1063, %26, %24 : i1, i32 loc(#loc13)
    %1067 = llvm.xor %1061, %1066 : i32 loc(#loc13)
    %1068 = llvm.mul %1065, %33 : i32 loc(#loc13)
    %1069 = llvm.add %1068, %26 : i32 loc(#loc13)
    %1070 = llvm.mul %1067, %30 : i32 loc(#loc13)
    %1071 = llvm.add %1069, %1070 : i32 loc(#loc13)
    %1072 = llvm.getelementptr inbounds %12[%1071] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1073 = llvm.insertelement %984, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1073, %1072 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1074 = llvm.and %992, %33 : i32 loc(#loc13)
    %1075 = llvm.icmp "eq" %1074, %26 : i32 loc(#loc13)
    %1076 = llvm.select %1075, %26, %33 : i1, i32 loc(#loc13)
    %1077 = llvm.xor %26, %1076 : i32 loc(#loc13)
    %1078 = llvm.and %992, %32 : i32 loc(#loc13)
    %1079 = llvm.icmp "eq" %1078, %26 : i32 loc(#loc13)
    %1080 = llvm.select %1079, %26, %32 : i1, i32 loc(#loc13)
    %1081 = llvm.xor %1077, %1080 : i32 loc(#loc13)
    %1082 = llvm.and %992, %24 : i32 loc(#loc13)
    %1083 = llvm.icmp "eq" %1082, %26 : i32 loc(#loc13)
    %1084 = llvm.select %1083, %26, %24 : i1, i32 loc(#loc13)
    %1085 = llvm.xor %1081, %1084 : i32 loc(#loc13)
    %1086 = llvm.and %992, %23 : i32 loc(#loc13)
    %1087 = llvm.icmp "eq" %1086, %26 : i32 loc(#loc13)
    %1088 = llvm.select %1087, %26, %23 : i1, i32 loc(#loc13)
    %1089 = llvm.xor %1085, %1088 : i32 loc(#loc13)
    %1090 = llvm.and %992, %22 : i32 loc(#loc13)
    %1091 = llvm.icmp "eq" %1090, %26 : i32 loc(#loc13)
    %1092 = llvm.select %1091, %26, %22 : i1, i32 loc(#loc13)
    %1093 = llvm.xor %1089, %1092 : i32 loc(#loc13)
    %1094 = llvm.and %992, %30 : i32 loc(#loc13)
    %1095 = llvm.icmp "eq" %1094, %26 : i32 loc(#loc13)
    %1096 = llvm.select %1095, %26, %33 : i1, i32 loc(#loc13)
    %1097 = llvm.xor %22, %1096 : i32 loc(#loc13)
    %1098 = llvm.and %993, %33 : i32 loc(#loc13)
    %1099 = llvm.icmp "eq" %1098, %26 : i32 loc(#loc13)
    %1100 = llvm.select %1099, %26, %32 : i1, i32 loc(#loc13)
    %1101 = llvm.xor %1097, %1100 : i32 loc(#loc13)
    %1102 = llvm.and %993, %32 : i32 loc(#loc13)
    %1103 = llvm.icmp "eq" %1102, %26 : i32 loc(#loc13)
    %1104 = llvm.select %1103, %26, %23 : i1, i32 loc(#loc13)
    %1105 = llvm.xor %1093, %1104 : i32 loc(#loc13)
    %1106 = llvm.select %1103, %26, %24 : i1, i32 loc(#loc13)
    %1107 = llvm.xor %1101, %1106 : i32 loc(#loc13)
    %1108 = llvm.mul %1105, %33 : i32 loc(#loc13)
    %1109 = llvm.add %1108, %26 : i32 loc(#loc13)
    %1110 = llvm.mul %1107, %30 : i32 loc(#loc13)
    %1111 = llvm.add %1109, %1110 : i32 loc(#loc13)
    %1112 = llvm.getelementptr inbounds %12[%1111] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1113 = llvm.insertelement %985, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1113, %1112 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1114 = llvm.and %992, %33 : i32 loc(#loc13)
    %1115 = llvm.icmp "eq" %1114, %26 : i32 loc(#loc13)
    %1116 = llvm.select %1115, %26, %33 : i1, i32 loc(#loc13)
    %1117 = llvm.xor %22, %1116 : i32 loc(#loc13)
    %1118 = llvm.and %992, %32 : i32 loc(#loc13)
    %1119 = llvm.icmp "eq" %1118, %26 : i32 loc(#loc13)
    %1120 = llvm.select %1119, %26, %32 : i1, i32 loc(#loc13)
    %1121 = llvm.xor %1117, %1120 : i32 loc(#loc13)
    %1122 = llvm.and %992, %24 : i32 loc(#loc13)
    %1123 = llvm.icmp "eq" %1122, %26 : i32 loc(#loc13)
    %1124 = llvm.select %1123, %26, %24 : i1, i32 loc(#loc13)
    %1125 = llvm.xor %1121, %1124 : i32 loc(#loc13)
    %1126 = llvm.and %992, %23 : i32 loc(#loc13)
    %1127 = llvm.icmp "eq" %1126, %26 : i32 loc(#loc13)
    %1128 = llvm.select %1127, %26, %23 : i1, i32 loc(#loc13)
    %1129 = llvm.xor %1125, %1128 : i32 loc(#loc13)
    %1130 = llvm.and %992, %22 : i32 loc(#loc13)
    %1131 = llvm.icmp "eq" %1130, %26 : i32 loc(#loc13)
    %1132 = llvm.select %1131, %26, %22 : i1, i32 loc(#loc13)
    %1133 = llvm.xor %1129, %1132 : i32 loc(#loc13)
    %1134 = llvm.and %992, %30 : i32 loc(#loc13)
    %1135 = llvm.icmp "eq" %1134, %26 : i32 loc(#loc13)
    %1136 = llvm.select %1135, %26, %33 : i1, i32 loc(#loc13)
    %1137 = llvm.xor %21, %1136 : i32 loc(#loc13)
    %1138 = llvm.and %993, %33 : i32 loc(#loc13)
    %1139 = llvm.icmp "eq" %1138, %26 : i32 loc(#loc13)
    %1140 = llvm.select %1139, %26, %32 : i1, i32 loc(#loc13)
    %1141 = llvm.xor %1137, %1140 : i32 loc(#loc13)
    %1142 = llvm.and %993, %32 : i32 loc(#loc13)
    %1143 = llvm.icmp "eq" %1142, %26 : i32 loc(#loc13)
    %1144 = llvm.select %1143, %26, %23 : i1, i32 loc(#loc13)
    %1145 = llvm.xor %1133, %1144 : i32 loc(#loc13)
    %1146 = llvm.select %1143, %26, %24 : i1, i32 loc(#loc13)
    %1147 = llvm.xor %1141, %1146 : i32 loc(#loc13)
    %1148 = llvm.mul %1145, %33 : i32 loc(#loc13)
    %1149 = llvm.add %1148, %26 : i32 loc(#loc13)
    %1150 = llvm.mul %1147, %30 : i32 loc(#loc13)
    %1151 = llvm.add %1149, %1150 : i32 loc(#loc13)
    %1152 = llvm.getelementptr inbounds %12[%1151] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1153 = llvm.insertelement %986, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1153, %1152 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1154 = llvm.and %992, %33 : i32 loc(#loc13)
    %1155 = llvm.icmp "eq" %1154, %26 : i32 loc(#loc13)
    %1156 = llvm.select %1155, %26, %33 : i1, i32 loc(#loc13)
    %1157 = llvm.xor %26, %1156 : i32 loc(#loc13)
    %1158 = llvm.and %992, %32 : i32 loc(#loc13)
    %1159 = llvm.icmp "eq" %1158, %26 : i32 loc(#loc13)
    %1160 = llvm.select %1159, %26, %32 : i1, i32 loc(#loc13)
    %1161 = llvm.xor %1157, %1160 : i32 loc(#loc13)
    %1162 = llvm.and %992, %24 : i32 loc(#loc13)
    %1163 = llvm.icmp "eq" %1162, %26 : i32 loc(#loc13)
    %1164 = llvm.select %1163, %26, %24 : i1, i32 loc(#loc13)
    %1165 = llvm.xor %1161, %1164 : i32 loc(#loc13)
    %1166 = llvm.and %992, %23 : i32 loc(#loc13)
    %1167 = llvm.icmp "eq" %1166, %26 : i32 loc(#loc13)
    %1168 = llvm.select %1167, %26, %23 : i1, i32 loc(#loc13)
    %1169 = llvm.xor %1165, %1168 : i32 loc(#loc13)
    %1170 = llvm.and %992, %22 : i32 loc(#loc13)
    %1171 = llvm.icmp "eq" %1170, %26 : i32 loc(#loc13)
    %1172 = llvm.select %1171, %26, %22 : i1, i32 loc(#loc13)
    %1173 = llvm.xor %1169, %1172 : i32 loc(#loc13)
    %1174 = llvm.and %992, %30 : i32 loc(#loc13)
    %1175 = llvm.icmp "eq" %1174, %26 : i32 loc(#loc13)
    %1176 = llvm.select %1175, %26, %33 : i1, i32 loc(#loc13)
    %1177 = llvm.xor %30, %1176 : i32 loc(#loc13)
    %1178 = llvm.and %993, %33 : i32 loc(#loc13)
    %1179 = llvm.icmp "eq" %1178, %26 : i32 loc(#loc13)
    %1180 = llvm.select %1179, %26, %32 : i1, i32 loc(#loc13)
    %1181 = llvm.xor %1177, %1180 : i32 loc(#loc13)
    %1182 = llvm.and %993, %32 : i32 loc(#loc13)
    %1183 = llvm.icmp "eq" %1182, %26 : i32 loc(#loc13)
    %1184 = llvm.select %1183, %26, %23 : i1, i32 loc(#loc13)
    %1185 = llvm.xor %1173, %1184 : i32 loc(#loc13)
    %1186 = llvm.select %1183, %26, %24 : i1, i32 loc(#loc13)
    %1187 = llvm.xor %1181, %1186 : i32 loc(#loc13)
    %1188 = llvm.mul %1185, %33 : i32 loc(#loc13)
    %1189 = llvm.add %1188, %26 : i32 loc(#loc13)
    %1190 = llvm.mul %1187, %30 : i32 loc(#loc13)
    %1191 = llvm.add %1189, %1190 : i32 loc(#loc13)
    %1192 = llvm.getelementptr inbounds %12[%1191] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1193 = llvm.insertelement %987, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1193, %1192 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1194 = llvm.and %992, %33 : i32 loc(#loc13)
    %1195 = llvm.icmp "eq" %1194, %26 : i32 loc(#loc13)
    %1196 = llvm.select %1195, %26, %33 : i1, i32 loc(#loc13)
    %1197 = llvm.xor %22, %1196 : i32 loc(#loc13)
    %1198 = llvm.and %992, %32 : i32 loc(#loc13)
    %1199 = llvm.icmp "eq" %1198, %26 : i32 loc(#loc13)
    %1200 = llvm.select %1199, %26, %32 : i1, i32 loc(#loc13)
    %1201 = llvm.xor %1197, %1200 : i32 loc(#loc13)
    %1202 = llvm.and %992, %24 : i32 loc(#loc13)
    %1203 = llvm.icmp "eq" %1202, %26 : i32 loc(#loc13)
    %1204 = llvm.select %1203, %26, %24 : i1, i32 loc(#loc13)
    %1205 = llvm.xor %1201, %1204 : i32 loc(#loc13)
    %1206 = llvm.and %992, %23 : i32 loc(#loc13)
    %1207 = llvm.icmp "eq" %1206, %26 : i32 loc(#loc13)
    %1208 = llvm.select %1207, %26, %23 : i1, i32 loc(#loc13)
    %1209 = llvm.xor %1205, %1208 : i32 loc(#loc13)
    %1210 = llvm.and %992, %22 : i32 loc(#loc13)
    %1211 = llvm.icmp "eq" %1210, %26 : i32 loc(#loc13)
    %1212 = llvm.select %1211, %26, %22 : i1, i32 loc(#loc13)
    %1213 = llvm.xor %1209, %1212 : i32 loc(#loc13)
    %1214 = llvm.and %992, %30 : i32 loc(#loc13)
    %1215 = llvm.icmp "eq" %1214, %26 : i32 loc(#loc13)
    %1216 = llvm.select %1215, %26, %33 : i1, i32 loc(#loc13)
    %1217 = llvm.xor %20, %1216 : i32 loc(#loc13)
    %1218 = llvm.and %993, %33 : i32 loc(#loc13)
    %1219 = llvm.icmp "eq" %1218, %26 : i32 loc(#loc13)
    %1220 = llvm.select %1219, %26, %32 : i1, i32 loc(#loc13)
    %1221 = llvm.xor %1217, %1220 : i32 loc(#loc13)
    %1222 = llvm.and %993, %32 : i32 loc(#loc13)
    %1223 = llvm.icmp "eq" %1222, %26 : i32 loc(#loc13)
    %1224 = llvm.select %1223, %26, %23 : i1, i32 loc(#loc13)
    %1225 = llvm.xor %1213, %1224 : i32 loc(#loc13)
    %1226 = llvm.select %1223, %26, %24 : i1, i32 loc(#loc13)
    %1227 = llvm.xor %1221, %1226 : i32 loc(#loc13)
    %1228 = llvm.mul %1225, %33 : i32 loc(#loc13)
    %1229 = llvm.add %1228, %26 : i32 loc(#loc13)
    %1230 = llvm.mul %1227, %30 : i32 loc(#loc13)
    %1231 = llvm.add %1229, %1230 : i32 loc(#loc13)
    %1232 = llvm.getelementptr inbounds %12[%1231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1233 = llvm.insertelement %988, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1233, %1232 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1234 = llvm.and %992, %33 : i32 loc(#loc13)
    %1235 = llvm.icmp "eq" %1234, %26 : i32 loc(#loc13)
    %1236 = llvm.select %1235, %26, %33 : i1, i32 loc(#loc13)
    %1237 = llvm.xor %26, %1236 : i32 loc(#loc13)
    %1238 = llvm.and %992, %32 : i32 loc(#loc13)
    %1239 = llvm.icmp "eq" %1238, %26 : i32 loc(#loc13)
    %1240 = llvm.select %1239, %26, %32 : i1, i32 loc(#loc13)
    %1241 = llvm.xor %1237, %1240 : i32 loc(#loc13)
    %1242 = llvm.and %992, %24 : i32 loc(#loc13)
    %1243 = llvm.icmp "eq" %1242, %26 : i32 loc(#loc13)
    %1244 = llvm.select %1243, %26, %24 : i1, i32 loc(#loc13)
    %1245 = llvm.xor %1241, %1244 : i32 loc(#loc13)
    %1246 = llvm.and %992, %23 : i32 loc(#loc13)
    %1247 = llvm.icmp "eq" %1246, %26 : i32 loc(#loc13)
    %1248 = llvm.select %1247, %26, %23 : i1, i32 loc(#loc13)
    %1249 = llvm.xor %1245, %1248 : i32 loc(#loc13)
    %1250 = llvm.and %992, %22 : i32 loc(#loc13)
    %1251 = llvm.icmp "eq" %1250, %26 : i32 loc(#loc13)
    %1252 = llvm.select %1251, %26, %22 : i1, i32 loc(#loc13)
    %1253 = llvm.xor %1249, %1252 : i32 loc(#loc13)
    %1254 = llvm.and %992, %30 : i32 loc(#loc13)
    %1255 = llvm.icmp "eq" %1254, %26 : i32 loc(#loc13)
    %1256 = llvm.select %1255, %26, %33 : i1, i32 loc(#loc13)
    %1257 = llvm.xor %19, %1256 : i32 loc(#loc13)
    %1258 = llvm.and %993, %33 : i32 loc(#loc13)
    %1259 = llvm.icmp "eq" %1258, %26 : i32 loc(#loc13)
    %1260 = llvm.select %1259, %26, %32 : i1, i32 loc(#loc13)
    %1261 = llvm.xor %1257, %1260 : i32 loc(#loc13)
    %1262 = llvm.and %993, %32 : i32 loc(#loc13)
    %1263 = llvm.icmp "eq" %1262, %26 : i32 loc(#loc13)
    %1264 = llvm.select %1263, %26, %23 : i1, i32 loc(#loc13)
    %1265 = llvm.xor %1253, %1264 : i32 loc(#loc13)
    %1266 = llvm.select %1263, %26, %24 : i1, i32 loc(#loc13)
    %1267 = llvm.xor %1261, %1266 : i32 loc(#loc13)
    %1268 = llvm.mul %1265, %33 : i32 loc(#loc13)
    %1269 = llvm.add %1268, %26 : i32 loc(#loc13)
    %1270 = llvm.mul %1267, %30 : i32 loc(#loc13)
    %1271 = llvm.add %1269, %1270 : i32 loc(#loc13)
    %1272 = llvm.getelementptr inbounds %12[%1271] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1273 = llvm.insertelement %989, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1273, %1272 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1274 = llvm.and %992, %33 : i32 loc(#loc13)
    %1275 = llvm.icmp "eq" %1274, %26 : i32 loc(#loc13)
    %1276 = llvm.select %1275, %26, %33 : i1, i32 loc(#loc13)
    %1277 = llvm.xor %22, %1276 : i32 loc(#loc13)
    %1278 = llvm.and %992, %32 : i32 loc(#loc13)
    %1279 = llvm.icmp "eq" %1278, %26 : i32 loc(#loc13)
    %1280 = llvm.select %1279, %26, %32 : i1, i32 loc(#loc13)
    %1281 = llvm.xor %1277, %1280 : i32 loc(#loc13)
    %1282 = llvm.and %992, %24 : i32 loc(#loc13)
    %1283 = llvm.icmp "eq" %1282, %26 : i32 loc(#loc13)
    %1284 = llvm.select %1283, %26, %24 : i1, i32 loc(#loc13)
    %1285 = llvm.xor %1281, %1284 : i32 loc(#loc13)
    %1286 = llvm.and %992, %23 : i32 loc(#loc13)
    %1287 = llvm.icmp "eq" %1286, %26 : i32 loc(#loc13)
    %1288 = llvm.select %1287, %26, %23 : i1, i32 loc(#loc13)
    %1289 = llvm.xor %1285, %1288 : i32 loc(#loc13)
    %1290 = llvm.and %992, %22 : i32 loc(#loc13)
    %1291 = llvm.icmp "eq" %1290, %26 : i32 loc(#loc13)
    %1292 = llvm.select %1291, %26, %22 : i1, i32 loc(#loc13)
    %1293 = llvm.xor %1289, %1292 : i32 loc(#loc13)
    %1294 = llvm.and %992, %30 : i32 loc(#loc13)
    %1295 = llvm.icmp "eq" %1294, %26 : i32 loc(#loc13)
    %1296 = llvm.select %1295, %26, %33 : i1, i32 loc(#loc13)
    %1297 = llvm.xor %18, %1296 : i32 loc(#loc13)
    %1298 = llvm.and %993, %33 : i32 loc(#loc13)
    %1299 = llvm.icmp "eq" %1298, %26 : i32 loc(#loc13)
    %1300 = llvm.select %1299, %26, %32 : i1, i32 loc(#loc13)
    %1301 = llvm.xor %1297, %1300 : i32 loc(#loc13)
    %1302 = llvm.and %993, %32 : i32 loc(#loc13)
    %1303 = llvm.icmp "eq" %1302, %26 : i32 loc(#loc13)
    %1304 = llvm.select %1303, %26, %23 : i1, i32 loc(#loc13)
    %1305 = llvm.xor %1293, %1304 : i32 loc(#loc13)
    %1306 = llvm.select %1303, %26, %24 : i1, i32 loc(#loc13)
    %1307 = llvm.xor %1301, %1306 : i32 loc(#loc13)
    %1308 = llvm.mul %1305, %33 : i32 loc(#loc13)
    %1309 = llvm.add %1308, %26 : i32 loc(#loc13)
    %1310 = llvm.mul %1307, %30 : i32 loc(#loc13)
    %1311 = llvm.add %1309, %1310 : i32 loc(#loc13)
    %1312 = llvm.getelementptr inbounds %12[%1311] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1313 = llvm.insertelement %990, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1313, %1312 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1314 = rocdl.workitem.id.x : i32 loc(#loc13)
    %1315 = llvm.udiv %1314, %27 : i32 loc(#loc13)
    %1316 = llvm.urem %1314, %27 : i32 loc(#loc13)
    %1317 = llvm.udiv %1315, %32 : i32 loc(#loc13)
    %1318 = llvm.urem %1317, %32 : i32 loc(#loc13)
    %1319 = llvm.urem %1318, %32 : i32 loc(#loc13)
    %1320 = llvm.urem %1315, %33 : i32 loc(#loc13)
    %1321 = llvm.mul %1319, %30 : i32 loc(#loc13)
    %1322 = llvm.urem %1316, %30 : i32 loc(#loc13)
    %1323 = llvm.icmp "uge" %1316, %30 : i32 loc(#loc13)
    %1324 = llvm.select %1323, %23, %26 : i1, i32 loc(#loc13)
    %1325 = llvm.add %1322, %26 : i32 loc(#loc13)
    %1326 = llvm.add %1325, %26 : i32 loc(#loc13)
    %1327 = llvm.add %1326, %1321 : i32 loc(#loc13)
    %1328 = llvm.add %1324, %26 : i32 loc(#loc13)
    %1329 = llvm.add %1328, %26 : i32 loc(#loc13)
    %1330 = llvm.add %1327, %26 : i32 loc(#loc13)
    %1331 = llvm.add %1329, %26 : i32 loc(#loc13)
    %1332 = llvm.urem %1316, %30 : i32 loc(#loc13)
    %1333 = llvm.icmp "uge" %1316, %30 : i32 loc(#loc13)
    %1334 = llvm.select %1333, %23, %26 : i1, i32 loc(#loc13)
    %1335 = llvm.add %1332, %26 : i32 loc(#loc13)
    %1336 = llvm.add %1335, %26 : i32 loc(#loc13)
    %1337 = llvm.add %1336, %1321 : i32 loc(#loc13)
    %1338 = llvm.add %1334, %22 : i32 loc(#loc13)
    %1339 = llvm.add %1338, %26 : i32 loc(#loc13)
    %1340 = llvm.add %1337, %26 : i32 loc(#loc13)
    %1341 = llvm.add %1339, %26 : i32 loc(#loc13)
    %1342 = llvm.udiv %1330, %24 : i32 loc(#loc13)
    %1343 = llvm.urem %1342, %24 : i32 loc(#loc13)
    %1344 = llvm.udiv %1331, %23 : i32 loc(#loc13)
    %1345 = llvm.xor %1344, %1343 : i32 loc(#loc13)
    %1346 = llvm.mul %1345, %23 : i32 loc(#loc13)
    %1347 = llvm.urem %1331, %23 : i32 loc(#loc13)
    %1348 = llvm.add %1346, %1347 : i32 loc(#loc13)
    %1349 = llvm.mul %1330, %30 : i32 loc(#loc13)
    %1350 = llvm.mul %1348, %33 : i32 loc(#loc13)
    %1351 = llvm.add %1349, %1350 : i32 loc(#loc13)
    %1352 = llvm.udiv %1340, %24 : i32 loc(#loc13)
    %1353 = llvm.urem %1352, %24 : i32 loc(#loc13)
    %1354 = llvm.udiv %1341, %23 : i32 loc(#loc13)
    %1355 = llvm.xor %1354, %1353 : i32 loc(#loc13)
    %1356 = llvm.mul %1355, %23 : i32 loc(#loc13)
    %1357 = llvm.urem %1341, %23 : i32 loc(#loc13)
    %1358 = llvm.add %1356, %1357 : i32 loc(#loc13)
    %1359 = llvm.mul %1340, %30 : i32 loc(#loc13)
    %1360 = llvm.mul %1358, %33 : i32 loc(#loc13)
    %1361 = llvm.add %1359, %1360 : i32 loc(#loc13)
    %1362 = llvm.mul %26, %30 : i32 loc(#loc13)
    %1363 = llvm.add %1362, %1351 : i32 loc(#loc13)
    %1364 = llvm.add %1362, %1361 : i32 loc(#loc13)
    %1365 = llvm.mul %26, %30 : i32 loc(#loc13)
    %1366 = llvm.sub %26, %1365 : i32 loc(#loc13)
    %1367 = llvm.getelementptr %12[%1366] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1368 = llvm.mul %26, %33 : i32 loc(#loc13)
    %1369 = llvm.sub %26, %1368 : i32 loc(#loc13)
    %1370 = llvm.getelementptr %1367[%1369] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1371 = llvm.add %1320, %26 : i32 loc(#loc13)
    %1372 = llvm.mul %1371, %8 : i32 loc(#loc13)
    %1373 = llvm.add %1363, %1372 : i32 loc(#loc13)
    %1374 = llvm.getelementptr %1370[%1373] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1375 = llvm.load %1374 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1376 = llvm.extractelement %1375[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1377 = llvm.extractelement %1375[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1378 = llvm.extractelement %1375[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1379 = llvm.extractelement %1375[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1380 = llvm.extractelement %1375[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1381 = llvm.extractelement %1375[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1382 = llvm.extractelement %1375[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1383 = llvm.extractelement %1375[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1384 = llvm.add %1364, %1372 : i32 loc(#loc13)
    %1385 = llvm.getelementptr %1370[%1384] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1386 = llvm.load %1385 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1387 = llvm.extractelement %1386[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1388 = llvm.extractelement %1386[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1389 = llvm.extractelement %1386[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1390 = llvm.extractelement %1386[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1391 = llvm.extractelement %1386[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1392 = llvm.extractelement %1386[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1393 = llvm.extractelement %1386[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1394 = llvm.extractelement %1386[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1395 = llvm.insertelement %1376, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1377, %1395[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.insertelement %1378, %1396[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1379, %1397[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.insertelement %1380, %1398[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1381, %1399[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1382, %1400[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1383, %1401[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.extractelement %1402[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1403, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.extractelement %1402[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1405, %1404[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.extractelement %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1407, %1406[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1402[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1402[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1402[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1402[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1402[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.insertelement %1387, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1388, %1419[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.insertelement %1389, %1420[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1390, %1421[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.insertelement %1391, %1422[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1392, %1423[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1393, %1424[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1394, %1425[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.extractelement %1426[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1427, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.extractelement %1426[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1429, %1428[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.extractelement %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1431, %1430[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1426[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1426[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1426[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1426[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1426[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.insertelement %964, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %965, %1443[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.insertelement %966, %1444[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %967, %1445[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.insertelement %968, %1446[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %969, %1447[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %970, %1448[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1450 = llvm.insertelement %971, %1449[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1451 = llvm.extractelement %1450[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1452 = llvm.insertelement %1451, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1453 = llvm.extractelement %1450[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1454 = llvm.insertelement %1453, %1452[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1455 = llvm.extractelement %1450[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1456 = llvm.insertelement %1455, %1454[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1457 = llvm.extractelement %1450[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1458 = llvm.insertelement %1457, %1456[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1459 = llvm.extractelement %1450[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1460 = llvm.insertelement %1459, %1458[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1461 = llvm.extractelement %1450[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1462 = llvm.insertelement %1461, %1460[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1463 = llvm.extractelement %1450[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1464 = llvm.insertelement %1463, %1462[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1465 = llvm.extractelement %1450[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1466 = llvm.insertelement %1465, %1464[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1467 = llvm.insertelement %975, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1468 = llvm.insertelement %976, %1467[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1469 = llvm.insertelement %977, %1468[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1470 = llvm.insertelement %978, %1469[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1471 = llvm.insertelement %979, %1470[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1472 = llvm.insertelement %980, %1471[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1473 = llvm.insertelement %981, %1472[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1474 = llvm.insertelement %982, %1473[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1475 = llvm.extractelement %1474[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1476 = llvm.insertelement %1475, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1477 = llvm.extractelement %1474[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1478 = llvm.insertelement %1477, %1476[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1479 = llvm.extractelement %1474[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1480 = llvm.insertelement %1479, %1478[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1481 = llvm.extractelement %1474[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1482 = llvm.insertelement %1481, %1480[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1483 = llvm.extractelement %1474[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1484 = llvm.insertelement %1483, %1482[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1485 = llvm.extractelement %1474[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1486 = llvm.insertelement %1485, %1484[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1487 = llvm.extractelement %1474[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1488 = llvm.insertelement %1487, %1486[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1489 = llvm.extractelement %1474[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1490 = llvm.insertelement %1489, %1488[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1491 = llvm.extractvalue %465[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.extractvalue %465[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.extractvalue %465[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.extractvalue %465[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.extractvalue %465[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.extractvalue %465[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.extractvalue %465[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.extractvalue %465[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1499 = llvm.extractvalue %465[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1500 = llvm.extractvalue %465[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1501 = llvm.extractvalue %465[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1502 = llvm.extractvalue %465[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1503 = llvm.extractvalue %465[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1504 = llvm.extractvalue %465[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1505 = llvm.extractvalue %465[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1506 = llvm.extractvalue %465[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1507 = llvm.insertelement %1491, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1508 = llvm.insertelement %1492, %1507[%33 : i32] : vector<16xf32> loc(#loc24)
    %1509 = llvm.insertelement %1493, %1508[%32 : i32] : vector<16xf32> loc(#loc24)
    %1510 = llvm.insertelement %1494, %1509[%16 : i32] : vector<16xf32> loc(#loc24)
    %1511 = llvm.insertelement %1495, %1510[%24 : i32] : vector<16xf32> loc(#loc24)
    %1512 = llvm.insertelement %1496, %1511[%11 : i32] : vector<16xf32> loc(#loc24)
    %1513 = llvm.insertelement %1497, %1512[%10 : i32] : vector<16xf32> loc(#loc24)
    %1514 = llvm.insertelement %1498, %1513[%9 : i32] : vector<16xf32> loc(#loc24)
    %1515 = llvm.insertelement %1499, %1514[%23 : i32] : vector<16xf32> loc(#loc24)
    %1516 = llvm.insertelement %1500, %1515[%15 : i32] : vector<16xf32> loc(#loc24)
    %1517 = llvm.insertelement %1501, %1516[%14 : i32] : vector<16xf32> loc(#loc24)
    %1518 = llvm.insertelement %1502, %1517[%13 : i32] : vector<16xf32> loc(#loc24)
    %1519 = llvm.insertelement %1503, %1518[%5 : i32] : vector<16xf32> loc(#loc24)
    %1520 = llvm.insertelement %1504, %1519[%4 : i32] : vector<16xf32> loc(#loc24)
    %1521 = llvm.insertelement %1505, %1520[%3 : i32] : vector<16xf32> loc(#loc24)
    %1522 = llvm.insertelement %1506, %1521[%2 : i32] : vector<16xf32> loc(#loc24)
    %1523 = rocdl.mfma.f32.32x32x16.bf16 %1466, %1418, %1522, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1524 = rocdl.mfma.f32.32x32x16.bf16 %1490, %1442, %1523, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1525 = llvm.extractelement %1524[%26 : i32] : vector<16xf32> loc(#loc24)
    %1526 = llvm.extractelement %1524[%33 : i32] : vector<16xf32> loc(#loc24)
    %1527 = llvm.extractelement %1524[%32 : i32] : vector<16xf32> loc(#loc24)
    %1528 = llvm.extractelement %1524[%16 : i32] : vector<16xf32> loc(#loc24)
    %1529 = llvm.extractelement %1524[%24 : i32] : vector<16xf32> loc(#loc24)
    %1530 = llvm.extractelement %1524[%11 : i32] : vector<16xf32> loc(#loc24)
    %1531 = llvm.extractelement %1524[%10 : i32] : vector<16xf32> loc(#loc24)
    %1532 = llvm.extractelement %1524[%9 : i32] : vector<16xf32> loc(#loc24)
    %1533 = llvm.extractelement %1524[%23 : i32] : vector<16xf32> loc(#loc24)
    %1534 = llvm.extractelement %1524[%15 : i32] : vector<16xf32> loc(#loc24)
    %1535 = llvm.extractelement %1524[%14 : i32] : vector<16xf32> loc(#loc24)
    %1536 = llvm.extractelement %1524[%13 : i32] : vector<16xf32> loc(#loc24)
    %1537 = llvm.extractelement %1524[%5 : i32] : vector<16xf32> loc(#loc24)
    %1538 = llvm.extractelement %1524[%4 : i32] : vector<16xf32> loc(#loc24)
    %1539 = llvm.extractelement %1524[%3 : i32] : vector<16xf32> loc(#loc24)
    %1540 = llvm.extractelement %1524[%2 : i32] : vector<16xf32> loc(#loc24)
    %1541 = llvm.insertvalue %1525, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1542 = llvm.insertvalue %1526, %1541[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1543 = llvm.insertvalue %1527, %1542[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1544 = llvm.insertvalue %1528, %1543[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1545 = llvm.insertvalue %1529, %1544[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1546 = llvm.insertvalue %1530, %1545[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1547 = llvm.insertvalue %1531, %1546[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1548 = llvm.insertvalue %1532, %1547[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1549 = llvm.insertvalue %1533, %1548[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1550 = llvm.insertvalue %1534, %1549[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1551 = llvm.insertvalue %1535, %1550[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1552 = llvm.insertvalue %1536, %1551[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1553 = llvm.insertvalue %1537, %1552[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1554 = llvm.insertvalue %1538, %1553[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1555 = llvm.insertvalue %1539, %1554[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1556 = llvm.insertvalue %1540, %1555[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1557 = llvm.add %464, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%1557, %1556, %467, %571, %469, %522 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %1558 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %1559 = llvm.sdiv %1558, %30 : i32 loc(#loc9)
    %1560 = llvm.icmp "sge" %1559, %33 : i32 loc(#loc9)
    %1561 = llvm.icmp "sge" %1559, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1562 = llvm.extractvalue %466[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1563 = llvm.extractvalue %466[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1564 = llvm.extractvalue %466[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1565 = llvm.extractvalue %466[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1566 = llvm.extractvalue %466[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1567 = llvm.extractvalue %466[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1568 = llvm.extractvalue %466[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1569 = llvm.extractvalue %466[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1570 = rocdl.workitem.id.x : i32 loc(#loc23)
    %1571 = llvm.urem %1570, %27 : i32 loc(#loc23)
    %1572 = llvm.udiv %1570, %27 : i32 loc(#loc23)
    %1573 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1574 = llvm.icmp "eq" %1573, %26 : i32 loc(#loc23)
    %1575 = llvm.select %1574, %26, %33 : i1, i32 loc(#loc23)
    %1576 = llvm.xor %26, %1575 : i32 loc(#loc23)
    %1577 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1578 = llvm.icmp "eq" %1577, %26 : i32 loc(#loc23)
    %1579 = llvm.select %1578, %26, %32 : i1, i32 loc(#loc23)
    %1580 = llvm.xor %1576, %1579 : i32 loc(#loc23)
    %1581 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1582 = llvm.icmp "eq" %1581, %26 : i32 loc(#loc23)
    %1583 = llvm.select %1582, %26, %24 : i1, i32 loc(#loc23)
    %1584 = llvm.xor %1580, %1583 : i32 loc(#loc23)
    %1585 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1586 = llvm.icmp "eq" %1585, %26 : i32 loc(#loc23)
    %1587 = llvm.select %1586, %26, %23 : i1, i32 loc(#loc23)
    %1588 = llvm.xor %1584, %1587 : i32 loc(#loc23)
    %1589 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1590 = llvm.icmp "eq" %1589, %26 : i32 loc(#loc23)
    %1591 = llvm.select %1590, %26, %22 : i1, i32 loc(#loc23)
    %1592 = llvm.xor %1588, %1591 : i32 loc(#loc23)
    %1593 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1594 = llvm.icmp "eq" %1593, %26 : i32 loc(#loc23)
    %1595 = llvm.select %1594, %26, %33 : i1, i32 loc(#loc23)
    %1596 = llvm.xor %26, %1595 : i32 loc(#loc23)
    %1597 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1598 = llvm.icmp "eq" %1597, %26 : i32 loc(#loc23)
    %1599 = llvm.select %1598, %26, %32 : i1, i32 loc(#loc23)
    %1600 = llvm.xor %1596, %1599 : i32 loc(#loc23)
    %1601 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1602 = llvm.icmp "eq" %1601, %26 : i32 loc(#loc23)
    %1603 = llvm.select %1602, %26, %23 : i1, i32 loc(#loc23)
    %1604 = llvm.xor %1592, %1603 : i32 loc(#loc23)
    %1605 = llvm.select %1602, %26, %24 : i1, i32 loc(#loc23)
    %1606 = llvm.xor %1600, %1605 : i32 loc(#loc23)
    %1607 = llvm.mul %1604, %33 : i32 loc(#loc23)
    %1608 = llvm.add %1607, %26 : i32 loc(#loc23)
    %1609 = llvm.mul %1606, %30 : i32 loc(#loc23)
    %1610 = llvm.add %1608, %1609 : i32 loc(#loc23)
    %1611 = llvm.getelementptr inbounds %12[%1610] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1612 = llvm.insertelement %1562, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1612, %1611 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1613 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1614 = llvm.icmp "eq" %1613, %26 : i32 loc(#loc23)
    %1615 = llvm.select %1614, %26, %33 : i1, i32 loc(#loc23)
    %1616 = llvm.xor %22, %1615 : i32 loc(#loc23)
    %1617 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1618 = llvm.icmp "eq" %1617, %26 : i32 loc(#loc23)
    %1619 = llvm.select %1618, %26, %32 : i1, i32 loc(#loc23)
    %1620 = llvm.xor %1616, %1619 : i32 loc(#loc23)
    %1621 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1622 = llvm.icmp "eq" %1621, %26 : i32 loc(#loc23)
    %1623 = llvm.select %1622, %26, %24 : i1, i32 loc(#loc23)
    %1624 = llvm.xor %1620, %1623 : i32 loc(#loc23)
    %1625 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1626 = llvm.icmp "eq" %1625, %26 : i32 loc(#loc23)
    %1627 = llvm.select %1626, %26, %23 : i1, i32 loc(#loc23)
    %1628 = llvm.xor %1624, %1627 : i32 loc(#loc23)
    %1629 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1630 = llvm.icmp "eq" %1629, %26 : i32 loc(#loc23)
    %1631 = llvm.select %1630, %26, %22 : i1, i32 loc(#loc23)
    %1632 = llvm.xor %1628, %1631 : i32 loc(#loc23)
    %1633 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1634 = llvm.icmp "eq" %1633, %26 : i32 loc(#loc23)
    %1635 = llvm.select %1634, %26, %33 : i1, i32 loc(#loc23)
    %1636 = llvm.xor %23, %1635 : i32 loc(#loc23)
    %1637 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1638 = llvm.icmp "eq" %1637, %26 : i32 loc(#loc23)
    %1639 = llvm.select %1638, %26, %32 : i1, i32 loc(#loc23)
    %1640 = llvm.xor %1636, %1639 : i32 loc(#loc23)
    %1641 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1642 = llvm.icmp "eq" %1641, %26 : i32 loc(#loc23)
    %1643 = llvm.select %1642, %26, %23 : i1, i32 loc(#loc23)
    %1644 = llvm.xor %1632, %1643 : i32 loc(#loc23)
    %1645 = llvm.select %1642, %26, %24 : i1, i32 loc(#loc23)
    %1646 = llvm.xor %1640, %1645 : i32 loc(#loc23)
    %1647 = llvm.mul %1644, %33 : i32 loc(#loc23)
    %1648 = llvm.add %1647, %26 : i32 loc(#loc23)
    %1649 = llvm.mul %1646, %30 : i32 loc(#loc23)
    %1650 = llvm.add %1648, %1649 : i32 loc(#loc23)
    %1651 = llvm.getelementptr inbounds %12[%1650] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1652 = llvm.insertelement %1563, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1652, %1651 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1653 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1654 = llvm.icmp "eq" %1653, %26 : i32 loc(#loc23)
    %1655 = llvm.select %1654, %26, %33 : i1, i32 loc(#loc23)
    %1656 = llvm.xor %26, %1655 : i32 loc(#loc23)
    %1657 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1658 = llvm.icmp "eq" %1657, %26 : i32 loc(#loc23)
    %1659 = llvm.select %1658, %26, %32 : i1, i32 loc(#loc23)
    %1660 = llvm.xor %1656, %1659 : i32 loc(#loc23)
    %1661 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1662 = llvm.icmp "eq" %1661, %26 : i32 loc(#loc23)
    %1663 = llvm.select %1662, %26, %24 : i1, i32 loc(#loc23)
    %1664 = llvm.xor %1660, %1663 : i32 loc(#loc23)
    %1665 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1666 = llvm.icmp "eq" %1665, %26 : i32 loc(#loc23)
    %1667 = llvm.select %1666, %26, %23 : i1, i32 loc(#loc23)
    %1668 = llvm.xor %1664, %1667 : i32 loc(#loc23)
    %1669 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1670 = llvm.icmp "eq" %1669, %26 : i32 loc(#loc23)
    %1671 = llvm.select %1670, %26, %22 : i1, i32 loc(#loc23)
    %1672 = llvm.xor %1668, %1671 : i32 loc(#loc23)
    %1673 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1674 = llvm.icmp "eq" %1673, %26 : i32 loc(#loc23)
    %1675 = llvm.select %1674, %26, %33 : i1, i32 loc(#loc23)
    %1676 = llvm.xor %22, %1675 : i32 loc(#loc23)
    %1677 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1678 = llvm.icmp "eq" %1677, %26 : i32 loc(#loc23)
    %1679 = llvm.select %1678, %26, %32 : i1, i32 loc(#loc23)
    %1680 = llvm.xor %1676, %1679 : i32 loc(#loc23)
    %1681 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1682 = llvm.icmp "eq" %1681, %26 : i32 loc(#loc23)
    %1683 = llvm.select %1682, %26, %23 : i1, i32 loc(#loc23)
    %1684 = llvm.xor %1672, %1683 : i32 loc(#loc23)
    %1685 = llvm.select %1682, %26, %24 : i1, i32 loc(#loc23)
    %1686 = llvm.xor %1680, %1685 : i32 loc(#loc23)
    %1687 = llvm.mul %1684, %33 : i32 loc(#loc23)
    %1688 = llvm.add %1687, %26 : i32 loc(#loc23)
    %1689 = llvm.mul %1686, %30 : i32 loc(#loc23)
    %1690 = llvm.add %1688, %1689 : i32 loc(#loc23)
    %1691 = llvm.getelementptr inbounds %12[%1690] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1692 = llvm.insertelement %1564, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1692, %1691 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1693 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1694 = llvm.icmp "eq" %1693, %26 : i32 loc(#loc23)
    %1695 = llvm.select %1694, %26, %33 : i1, i32 loc(#loc23)
    %1696 = llvm.xor %22, %1695 : i32 loc(#loc23)
    %1697 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1698 = llvm.icmp "eq" %1697, %26 : i32 loc(#loc23)
    %1699 = llvm.select %1698, %26, %32 : i1, i32 loc(#loc23)
    %1700 = llvm.xor %1696, %1699 : i32 loc(#loc23)
    %1701 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1702 = llvm.icmp "eq" %1701, %26 : i32 loc(#loc23)
    %1703 = llvm.select %1702, %26, %24 : i1, i32 loc(#loc23)
    %1704 = llvm.xor %1700, %1703 : i32 loc(#loc23)
    %1705 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1706 = llvm.icmp "eq" %1705, %26 : i32 loc(#loc23)
    %1707 = llvm.select %1706, %26, %23 : i1, i32 loc(#loc23)
    %1708 = llvm.xor %1704, %1707 : i32 loc(#loc23)
    %1709 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1710 = llvm.icmp "eq" %1709, %26 : i32 loc(#loc23)
    %1711 = llvm.select %1710, %26, %22 : i1, i32 loc(#loc23)
    %1712 = llvm.xor %1708, %1711 : i32 loc(#loc23)
    %1713 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1714 = llvm.icmp "eq" %1713, %26 : i32 loc(#loc23)
    %1715 = llvm.select %1714, %26, %33 : i1, i32 loc(#loc23)
    %1716 = llvm.xor %21, %1715 : i32 loc(#loc23)
    %1717 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1718 = llvm.icmp "eq" %1717, %26 : i32 loc(#loc23)
    %1719 = llvm.select %1718, %26, %32 : i1, i32 loc(#loc23)
    %1720 = llvm.xor %1716, %1719 : i32 loc(#loc23)
    %1721 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1722 = llvm.icmp "eq" %1721, %26 : i32 loc(#loc23)
    %1723 = llvm.select %1722, %26, %23 : i1, i32 loc(#loc23)
    %1724 = llvm.xor %1712, %1723 : i32 loc(#loc23)
    %1725 = llvm.select %1722, %26, %24 : i1, i32 loc(#loc23)
    %1726 = llvm.xor %1720, %1725 : i32 loc(#loc23)
    %1727 = llvm.mul %1724, %33 : i32 loc(#loc23)
    %1728 = llvm.add %1727, %26 : i32 loc(#loc23)
    %1729 = llvm.mul %1726, %30 : i32 loc(#loc23)
    %1730 = llvm.add %1728, %1729 : i32 loc(#loc23)
    %1731 = llvm.getelementptr inbounds %12[%1730] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1732 = llvm.insertelement %1565, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1732, %1731 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1733 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1734 = llvm.icmp "eq" %1733, %26 : i32 loc(#loc23)
    %1735 = llvm.select %1734, %26, %33 : i1, i32 loc(#loc23)
    %1736 = llvm.xor %26, %1735 : i32 loc(#loc23)
    %1737 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1738 = llvm.icmp "eq" %1737, %26 : i32 loc(#loc23)
    %1739 = llvm.select %1738, %26, %32 : i1, i32 loc(#loc23)
    %1740 = llvm.xor %1736, %1739 : i32 loc(#loc23)
    %1741 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1742 = llvm.icmp "eq" %1741, %26 : i32 loc(#loc23)
    %1743 = llvm.select %1742, %26, %24 : i1, i32 loc(#loc23)
    %1744 = llvm.xor %1740, %1743 : i32 loc(#loc23)
    %1745 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1746 = llvm.icmp "eq" %1745, %26 : i32 loc(#loc23)
    %1747 = llvm.select %1746, %26, %23 : i1, i32 loc(#loc23)
    %1748 = llvm.xor %1744, %1747 : i32 loc(#loc23)
    %1749 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1750 = llvm.icmp "eq" %1749, %26 : i32 loc(#loc23)
    %1751 = llvm.select %1750, %26, %22 : i1, i32 loc(#loc23)
    %1752 = llvm.xor %1748, %1751 : i32 loc(#loc23)
    %1753 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1754 = llvm.icmp "eq" %1753, %26 : i32 loc(#loc23)
    %1755 = llvm.select %1754, %26, %33 : i1, i32 loc(#loc23)
    %1756 = llvm.xor %30, %1755 : i32 loc(#loc23)
    %1757 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1758 = llvm.icmp "eq" %1757, %26 : i32 loc(#loc23)
    %1759 = llvm.select %1758, %26, %32 : i1, i32 loc(#loc23)
    %1760 = llvm.xor %1756, %1759 : i32 loc(#loc23)
    %1761 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1762 = llvm.icmp "eq" %1761, %26 : i32 loc(#loc23)
    %1763 = llvm.select %1762, %26, %23 : i1, i32 loc(#loc23)
    %1764 = llvm.xor %1752, %1763 : i32 loc(#loc23)
    %1765 = llvm.select %1762, %26, %24 : i1, i32 loc(#loc23)
    %1766 = llvm.xor %1760, %1765 : i32 loc(#loc23)
    %1767 = llvm.mul %1764, %33 : i32 loc(#loc23)
    %1768 = llvm.add %1767, %26 : i32 loc(#loc23)
    %1769 = llvm.mul %1766, %30 : i32 loc(#loc23)
    %1770 = llvm.add %1768, %1769 : i32 loc(#loc23)
    %1771 = llvm.getelementptr inbounds %12[%1770] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1772 = llvm.insertelement %1566, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1772, %1771 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1773 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1774 = llvm.icmp "eq" %1773, %26 : i32 loc(#loc23)
    %1775 = llvm.select %1774, %26, %33 : i1, i32 loc(#loc23)
    %1776 = llvm.xor %22, %1775 : i32 loc(#loc23)
    %1777 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1778 = llvm.icmp "eq" %1777, %26 : i32 loc(#loc23)
    %1779 = llvm.select %1778, %26, %32 : i1, i32 loc(#loc23)
    %1780 = llvm.xor %1776, %1779 : i32 loc(#loc23)
    %1781 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1782 = llvm.icmp "eq" %1781, %26 : i32 loc(#loc23)
    %1783 = llvm.select %1782, %26, %24 : i1, i32 loc(#loc23)
    %1784 = llvm.xor %1780, %1783 : i32 loc(#loc23)
    %1785 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1786 = llvm.icmp "eq" %1785, %26 : i32 loc(#loc23)
    %1787 = llvm.select %1786, %26, %23 : i1, i32 loc(#loc23)
    %1788 = llvm.xor %1784, %1787 : i32 loc(#loc23)
    %1789 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1790 = llvm.icmp "eq" %1789, %26 : i32 loc(#loc23)
    %1791 = llvm.select %1790, %26, %22 : i1, i32 loc(#loc23)
    %1792 = llvm.xor %1788, %1791 : i32 loc(#loc23)
    %1793 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1794 = llvm.icmp "eq" %1793, %26 : i32 loc(#loc23)
    %1795 = llvm.select %1794, %26, %33 : i1, i32 loc(#loc23)
    %1796 = llvm.xor %20, %1795 : i32 loc(#loc23)
    %1797 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1798 = llvm.icmp "eq" %1797, %26 : i32 loc(#loc23)
    %1799 = llvm.select %1798, %26, %32 : i1, i32 loc(#loc23)
    %1800 = llvm.xor %1796, %1799 : i32 loc(#loc23)
    %1801 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1802 = llvm.icmp "eq" %1801, %26 : i32 loc(#loc23)
    %1803 = llvm.select %1802, %26, %23 : i1, i32 loc(#loc23)
    %1804 = llvm.xor %1792, %1803 : i32 loc(#loc23)
    %1805 = llvm.select %1802, %26, %24 : i1, i32 loc(#loc23)
    %1806 = llvm.xor %1800, %1805 : i32 loc(#loc23)
    %1807 = llvm.mul %1804, %33 : i32 loc(#loc23)
    %1808 = llvm.add %1807, %26 : i32 loc(#loc23)
    %1809 = llvm.mul %1806, %30 : i32 loc(#loc23)
    %1810 = llvm.add %1808, %1809 : i32 loc(#loc23)
    %1811 = llvm.getelementptr inbounds %12[%1810] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1812 = llvm.insertelement %1567, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1812, %1811 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1813 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1814 = llvm.icmp "eq" %1813, %26 : i32 loc(#loc23)
    %1815 = llvm.select %1814, %26, %33 : i1, i32 loc(#loc23)
    %1816 = llvm.xor %26, %1815 : i32 loc(#loc23)
    %1817 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1818 = llvm.icmp "eq" %1817, %26 : i32 loc(#loc23)
    %1819 = llvm.select %1818, %26, %32 : i1, i32 loc(#loc23)
    %1820 = llvm.xor %1816, %1819 : i32 loc(#loc23)
    %1821 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1822 = llvm.icmp "eq" %1821, %26 : i32 loc(#loc23)
    %1823 = llvm.select %1822, %26, %24 : i1, i32 loc(#loc23)
    %1824 = llvm.xor %1820, %1823 : i32 loc(#loc23)
    %1825 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1826 = llvm.icmp "eq" %1825, %26 : i32 loc(#loc23)
    %1827 = llvm.select %1826, %26, %23 : i1, i32 loc(#loc23)
    %1828 = llvm.xor %1824, %1827 : i32 loc(#loc23)
    %1829 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1830 = llvm.icmp "eq" %1829, %26 : i32 loc(#loc23)
    %1831 = llvm.select %1830, %26, %22 : i1, i32 loc(#loc23)
    %1832 = llvm.xor %1828, %1831 : i32 loc(#loc23)
    %1833 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1834 = llvm.icmp "eq" %1833, %26 : i32 loc(#loc23)
    %1835 = llvm.select %1834, %26, %33 : i1, i32 loc(#loc23)
    %1836 = llvm.xor %19, %1835 : i32 loc(#loc23)
    %1837 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1838 = llvm.icmp "eq" %1837, %26 : i32 loc(#loc23)
    %1839 = llvm.select %1838, %26, %32 : i1, i32 loc(#loc23)
    %1840 = llvm.xor %1836, %1839 : i32 loc(#loc23)
    %1841 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1842 = llvm.icmp "eq" %1841, %26 : i32 loc(#loc23)
    %1843 = llvm.select %1842, %26, %23 : i1, i32 loc(#loc23)
    %1844 = llvm.xor %1832, %1843 : i32 loc(#loc23)
    %1845 = llvm.select %1842, %26, %24 : i1, i32 loc(#loc23)
    %1846 = llvm.xor %1840, %1845 : i32 loc(#loc23)
    %1847 = llvm.mul %1844, %33 : i32 loc(#loc23)
    %1848 = llvm.add %1847, %26 : i32 loc(#loc23)
    %1849 = llvm.mul %1846, %30 : i32 loc(#loc23)
    %1850 = llvm.add %1848, %1849 : i32 loc(#loc23)
    %1851 = llvm.getelementptr inbounds %12[%1850] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1852 = llvm.insertelement %1568, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1852, %1851 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1853 = llvm.and %1571, %33 : i32 loc(#loc23)
    %1854 = llvm.icmp "eq" %1853, %26 : i32 loc(#loc23)
    %1855 = llvm.select %1854, %26, %33 : i1, i32 loc(#loc23)
    %1856 = llvm.xor %22, %1855 : i32 loc(#loc23)
    %1857 = llvm.and %1571, %32 : i32 loc(#loc23)
    %1858 = llvm.icmp "eq" %1857, %26 : i32 loc(#loc23)
    %1859 = llvm.select %1858, %26, %32 : i1, i32 loc(#loc23)
    %1860 = llvm.xor %1856, %1859 : i32 loc(#loc23)
    %1861 = llvm.and %1571, %24 : i32 loc(#loc23)
    %1862 = llvm.icmp "eq" %1861, %26 : i32 loc(#loc23)
    %1863 = llvm.select %1862, %26, %24 : i1, i32 loc(#loc23)
    %1864 = llvm.xor %1860, %1863 : i32 loc(#loc23)
    %1865 = llvm.and %1571, %23 : i32 loc(#loc23)
    %1866 = llvm.icmp "eq" %1865, %26 : i32 loc(#loc23)
    %1867 = llvm.select %1866, %26, %23 : i1, i32 loc(#loc23)
    %1868 = llvm.xor %1864, %1867 : i32 loc(#loc23)
    %1869 = llvm.and %1571, %22 : i32 loc(#loc23)
    %1870 = llvm.icmp "eq" %1869, %26 : i32 loc(#loc23)
    %1871 = llvm.select %1870, %26, %22 : i1, i32 loc(#loc23)
    %1872 = llvm.xor %1868, %1871 : i32 loc(#loc23)
    %1873 = llvm.and %1571, %30 : i32 loc(#loc23)
    %1874 = llvm.icmp "eq" %1873, %26 : i32 loc(#loc23)
    %1875 = llvm.select %1874, %26, %33 : i1, i32 loc(#loc23)
    %1876 = llvm.xor %18, %1875 : i32 loc(#loc23)
    %1877 = llvm.and %1572, %33 : i32 loc(#loc23)
    %1878 = llvm.icmp "eq" %1877, %26 : i32 loc(#loc23)
    %1879 = llvm.select %1878, %26, %32 : i1, i32 loc(#loc23)
    %1880 = llvm.xor %1876, %1879 : i32 loc(#loc23)
    %1881 = llvm.and %1572, %32 : i32 loc(#loc23)
    %1882 = llvm.icmp "eq" %1881, %26 : i32 loc(#loc23)
    %1883 = llvm.select %1882, %26, %23 : i1, i32 loc(#loc23)
    %1884 = llvm.xor %1872, %1883 : i32 loc(#loc23)
    %1885 = llvm.select %1882, %26, %24 : i1, i32 loc(#loc23)
    %1886 = llvm.xor %1880, %1885 : i32 loc(#loc23)
    %1887 = llvm.mul %1884, %33 : i32 loc(#loc23)
    %1888 = llvm.add %1887, %26 : i32 loc(#loc23)
    %1889 = llvm.mul %1886, %30 : i32 loc(#loc23)
    %1890 = llvm.add %1888, %1889 : i32 loc(#loc23)
    %1891 = llvm.getelementptr inbounds %12[%1890] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1892 = llvm.insertelement %1569, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1892, %1891 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1893 = rocdl.workitem.id.x : i32 loc(#loc23)
    %1894 = llvm.udiv %1893, %27 : i32 loc(#loc23)
    %1895 = llvm.urem %1893, %27 : i32 loc(#loc23)
    %1896 = llvm.urem %1894, %32 : i32 loc(#loc23)
    %1897 = llvm.urem %1896, %32 : i32 loc(#loc23)
    %1898 = llvm.urem %1894, %33 : i32 loc(#loc23)
    %1899 = llvm.mul %1897, %30 : i32 loc(#loc23)
    %1900 = llvm.urem %1895, %30 : i32 loc(#loc23)
    %1901 = llvm.icmp "uge" %1895, %30 : i32 loc(#loc23)
    %1902 = llvm.select %1901, %23, %26 : i1, i32 loc(#loc23)
    %1903 = llvm.add %1900, %26 : i32 loc(#loc23)
    %1904 = llvm.add %1903, %26 : i32 loc(#loc23)
    %1905 = llvm.add %1904, %1899 : i32 loc(#loc23)
    %1906 = llvm.add %1902, %26 : i32 loc(#loc23)
    %1907 = llvm.add %1906, %26 : i32 loc(#loc23)
    %1908 = llvm.add %1905, %26 : i32 loc(#loc23)
    %1909 = llvm.add %1907, %26 : i32 loc(#loc23)
    %1910 = llvm.urem %1895, %30 : i32 loc(#loc23)
    %1911 = llvm.icmp "uge" %1895, %30 : i32 loc(#loc23)
    %1912 = llvm.select %1911, %23, %26 : i1, i32 loc(#loc23)
    %1913 = llvm.add %1910, %26 : i32 loc(#loc23)
    %1914 = llvm.add %1913, %26 : i32 loc(#loc23)
    %1915 = llvm.add %1914, %1899 : i32 loc(#loc23)
    %1916 = llvm.add %1912, %22 : i32 loc(#loc23)
    %1917 = llvm.add %1916, %26 : i32 loc(#loc23)
    %1918 = llvm.add %1915, %26 : i32 loc(#loc23)
    %1919 = llvm.add %1917, %26 : i32 loc(#loc23)
    %1920 = llvm.udiv %1908, %24 : i32 loc(#loc23)
    %1921 = llvm.urem %1920, %24 : i32 loc(#loc23)
    %1922 = llvm.udiv %1909, %23 : i32 loc(#loc23)
    %1923 = llvm.xor %1922, %1921 : i32 loc(#loc23)
    %1924 = llvm.mul %1923, %23 : i32 loc(#loc23)
    %1925 = llvm.urem %1909, %23 : i32 loc(#loc23)
    %1926 = llvm.add %1924, %1925 : i32 loc(#loc23)
    %1927 = llvm.mul %1926, %33 : i32 loc(#loc23)
    %1928 = llvm.mul %1908, %30 : i32 loc(#loc23)
    %1929 = llvm.add %1927, %1928 : i32 loc(#loc23)
    %1930 = llvm.udiv %1918, %24 : i32 loc(#loc23)
    %1931 = llvm.urem %1930, %24 : i32 loc(#loc23)
    %1932 = llvm.udiv %1919, %23 : i32 loc(#loc23)
    %1933 = llvm.xor %1932, %1931 : i32 loc(#loc23)
    %1934 = llvm.mul %1933, %23 : i32 loc(#loc23)
    %1935 = llvm.urem %1919, %23 : i32 loc(#loc23)
    %1936 = llvm.add %1934, %1935 : i32 loc(#loc23)
    %1937 = llvm.mul %1936, %33 : i32 loc(#loc23)
    %1938 = llvm.mul %1918, %30 : i32 loc(#loc23)
    %1939 = llvm.add %1937, %1938 : i32 loc(#loc23)
    %1940 = llvm.mul %26, %30 : i32 loc(#loc23)
    %1941 = llvm.add %1940, %1929 : i32 loc(#loc23)
    %1942 = llvm.add %1940, %1939 : i32 loc(#loc23)
    %1943 = llvm.mul %26, %33 : i32 loc(#loc23)
    %1944 = llvm.sub %26, %1943 : i32 loc(#loc23)
    %1945 = llvm.getelementptr %12[%1944] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1946 = llvm.mul %26, %30 : i32 loc(#loc23)
    %1947 = llvm.sub %26, %1946 : i32 loc(#loc23)
    %1948 = llvm.getelementptr %1945[%1947] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1949 = llvm.add %1898, %26 : i32 loc(#loc23)
    %1950 = llvm.mul %1949, %8 : i32 loc(#loc23)
    %1951 = llvm.add %1941, %1950 : i32 loc(#loc23)
    %1952 = llvm.getelementptr %1948[%1951] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1953 = llvm.load %1952 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1954 = llvm.extractelement %1953[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1955 = llvm.extractelement %1953[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1956 = llvm.extractelement %1953[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1957 = llvm.extractelement %1953[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1958 = llvm.extractelement %1953[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1959 = llvm.extractelement %1953[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1960 = llvm.extractelement %1953[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1961 = llvm.extractelement %1953[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1962 = llvm.add %1942, %1950 : i32 loc(#loc23)
    %1963 = llvm.getelementptr %1948[%1962] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %1964 = llvm.load %1963 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1965 = llvm.extractelement %1964[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1966 = llvm.extractelement %1964[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1967 = llvm.extractelement %1964[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1968 = llvm.extractelement %1964[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1969 = llvm.extractelement %1964[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1970 = llvm.extractelement %1964[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1971 = llvm.extractelement %1964[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1972 = llvm.extractelement %1964[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1973 = llvm.extractvalue %468[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1974 = llvm.extractvalue %468[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1975 = llvm.extractvalue %468[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1976 = llvm.extractvalue %468[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1977 = llvm.extractvalue %468[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1978 = llvm.extractvalue %468[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1979 = llvm.extractvalue %468[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1980 = llvm.extractvalue %468[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1981 = rocdl.workitem.id.x : i32 loc(#loc13)
    %1982 = llvm.urem %1981, %27 : i32 loc(#loc13)
    %1983 = llvm.udiv %1981, %27 : i32 loc(#loc13)
    %1984 = llvm.and %1982, %33 : i32 loc(#loc13)
    %1985 = llvm.icmp "eq" %1984, %26 : i32 loc(#loc13)
    %1986 = llvm.select %1985, %26, %33 : i1, i32 loc(#loc13)
    %1987 = llvm.xor %26, %1986 : i32 loc(#loc13)
    %1988 = llvm.and %1982, %32 : i32 loc(#loc13)
    %1989 = llvm.icmp "eq" %1988, %26 : i32 loc(#loc13)
    %1990 = llvm.select %1989, %26, %32 : i1, i32 loc(#loc13)
    %1991 = llvm.xor %1987, %1990 : i32 loc(#loc13)
    %1992 = llvm.and %1982, %24 : i32 loc(#loc13)
    %1993 = llvm.icmp "eq" %1992, %26 : i32 loc(#loc13)
    %1994 = llvm.select %1993, %26, %24 : i1, i32 loc(#loc13)
    %1995 = llvm.xor %1991, %1994 : i32 loc(#loc13)
    %1996 = llvm.and %1982, %23 : i32 loc(#loc13)
    %1997 = llvm.icmp "eq" %1996, %26 : i32 loc(#loc13)
    %1998 = llvm.select %1997, %26, %23 : i1, i32 loc(#loc13)
    %1999 = llvm.xor %1995, %1998 : i32 loc(#loc13)
    %2000 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2001 = llvm.icmp "eq" %2000, %26 : i32 loc(#loc13)
    %2002 = llvm.select %2001, %26, %22 : i1, i32 loc(#loc13)
    %2003 = llvm.xor %1999, %2002 : i32 loc(#loc13)
    %2004 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2005 = llvm.icmp "eq" %2004, %26 : i32 loc(#loc13)
    %2006 = llvm.select %2005, %26, %33 : i1, i32 loc(#loc13)
    %2007 = llvm.xor %26, %2006 : i32 loc(#loc13)
    %2008 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2009 = llvm.icmp "eq" %2008, %26 : i32 loc(#loc13)
    %2010 = llvm.select %2009, %26, %32 : i1, i32 loc(#loc13)
    %2011 = llvm.xor %2007, %2010 : i32 loc(#loc13)
    %2012 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2013 = llvm.icmp "eq" %2012, %26 : i32 loc(#loc13)
    %2014 = llvm.select %2013, %26, %23 : i1, i32 loc(#loc13)
    %2015 = llvm.xor %2003, %2014 : i32 loc(#loc13)
    %2016 = llvm.select %2013, %26, %24 : i1, i32 loc(#loc13)
    %2017 = llvm.xor %2011, %2016 : i32 loc(#loc13)
    %2018 = llvm.mul %2015, %33 : i32 loc(#loc13)
    %2019 = llvm.add %2018, %26 : i32 loc(#loc13)
    %2020 = llvm.mul %2017, %30 : i32 loc(#loc13)
    %2021 = llvm.add %2019, %2020 : i32 loc(#loc13)
    %2022 = llvm.getelementptr inbounds %12[%2021] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2023 = llvm.insertelement %1973, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2023, %2022 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2024 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2025 = llvm.icmp "eq" %2024, %26 : i32 loc(#loc13)
    %2026 = llvm.select %2025, %26, %33 : i1, i32 loc(#loc13)
    %2027 = llvm.xor %22, %2026 : i32 loc(#loc13)
    %2028 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2029 = llvm.icmp "eq" %2028, %26 : i32 loc(#loc13)
    %2030 = llvm.select %2029, %26, %32 : i1, i32 loc(#loc13)
    %2031 = llvm.xor %2027, %2030 : i32 loc(#loc13)
    %2032 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2033 = llvm.icmp "eq" %2032, %26 : i32 loc(#loc13)
    %2034 = llvm.select %2033, %26, %24 : i1, i32 loc(#loc13)
    %2035 = llvm.xor %2031, %2034 : i32 loc(#loc13)
    %2036 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2037 = llvm.icmp "eq" %2036, %26 : i32 loc(#loc13)
    %2038 = llvm.select %2037, %26, %23 : i1, i32 loc(#loc13)
    %2039 = llvm.xor %2035, %2038 : i32 loc(#loc13)
    %2040 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2041 = llvm.icmp "eq" %2040, %26 : i32 loc(#loc13)
    %2042 = llvm.select %2041, %26, %22 : i1, i32 loc(#loc13)
    %2043 = llvm.xor %2039, %2042 : i32 loc(#loc13)
    %2044 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2045 = llvm.icmp "eq" %2044, %26 : i32 loc(#loc13)
    %2046 = llvm.select %2045, %26, %33 : i1, i32 loc(#loc13)
    %2047 = llvm.xor %23, %2046 : i32 loc(#loc13)
    %2048 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2049 = llvm.icmp "eq" %2048, %26 : i32 loc(#loc13)
    %2050 = llvm.select %2049, %26, %32 : i1, i32 loc(#loc13)
    %2051 = llvm.xor %2047, %2050 : i32 loc(#loc13)
    %2052 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2053 = llvm.icmp "eq" %2052, %26 : i32 loc(#loc13)
    %2054 = llvm.select %2053, %26, %23 : i1, i32 loc(#loc13)
    %2055 = llvm.xor %2043, %2054 : i32 loc(#loc13)
    %2056 = llvm.select %2053, %26, %24 : i1, i32 loc(#loc13)
    %2057 = llvm.xor %2051, %2056 : i32 loc(#loc13)
    %2058 = llvm.mul %2055, %33 : i32 loc(#loc13)
    %2059 = llvm.add %2058, %26 : i32 loc(#loc13)
    %2060 = llvm.mul %2057, %30 : i32 loc(#loc13)
    %2061 = llvm.add %2059, %2060 : i32 loc(#loc13)
    %2062 = llvm.getelementptr inbounds %12[%2061] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2063 = llvm.insertelement %1974, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2063, %2062 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2064 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2065 = llvm.icmp "eq" %2064, %26 : i32 loc(#loc13)
    %2066 = llvm.select %2065, %26, %33 : i1, i32 loc(#loc13)
    %2067 = llvm.xor %26, %2066 : i32 loc(#loc13)
    %2068 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2069 = llvm.icmp "eq" %2068, %26 : i32 loc(#loc13)
    %2070 = llvm.select %2069, %26, %32 : i1, i32 loc(#loc13)
    %2071 = llvm.xor %2067, %2070 : i32 loc(#loc13)
    %2072 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2073 = llvm.icmp "eq" %2072, %26 : i32 loc(#loc13)
    %2074 = llvm.select %2073, %26, %24 : i1, i32 loc(#loc13)
    %2075 = llvm.xor %2071, %2074 : i32 loc(#loc13)
    %2076 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2077 = llvm.icmp "eq" %2076, %26 : i32 loc(#loc13)
    %2078 = llvm.select %2077, %26, %23 : i1, i32 loc(#loc13)
    %2079 = llvm.xor %2075, %2078 : i32 loc(#loc13)
    %2080 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2081 = llvm.icmp "eq" %2080, %26 : i32 loc(#loc13)
    %2082 = llvm.select %2081, %26, %22 : i1, i32 loc(#loc13)
    %2083 = llvm.xor %2079, %2082 : i32 loc(#loc13)
    %2084 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2085 = llvm.icmp "eq" %2084, %26 : i32 loc(#loc13)
    %2086 = llvm.select %2085, %26, %33 : i1, i32 loc(#loc13)
    %2087 = llvm.xor %22, %2086 : i32 loc(#loc13)
    %2088 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2089 = llvm.icmp "eq" %2088, %26 : i32 loc(#loc13)
    %2090 = llvm.select %2089, %26, %32 : i1, i32 loc(#loc13)
    %2091 = llvm.xor %2087, %2090 : i32 loc(#loc13)
    %2092 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2093 = llvm.icmp "eq" %2092, %26 : i32 loc(#loc13)
    %2094 = llvm.select %2093, %26, %23 : i1, i32 loc(#loc13)
    %2095 = llvm.xor %2083, %2094 : i32 loc(#loc13)
    %2096 = llvm.select %2093, %26, %24 : i1, i32 loc(#loc13)
    %2097 = llvm.xor %2091, %2096 : i32 loc(#loc13)
    %2098 = llvm.mul %2095, %33 : i32 loc(#loc13)
    %2099 = llvm.add %2098, %26 : i32 loc(#loc13)
    %2100 = llvm.mul %2097, %30 : i32 loc(#loc13)
    %2101 = llvm.add %2099, %2100 : i32 loc(#loc13)
    %2102 = llvm.getelementptr inbounds %12[%2101] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2103 = llvm.insertelement %1975, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2103, %2102 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2104 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2105 = llvm.icmp "eq" %2104, %26 : i32 loc(#loc13)
    %2106 = llvm.select %2105, %26, %33 : i1, i32 loc(#loc13)
    %2107 = llvm.xor %22, %2106 : i32 loc(#loc13)
    %2108 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2109 = llvm.icmp "eq" %2108, %26 : i32 loc(#loc13)
    %2110 = llvm.select %2109, %26, %32 : i1, i32 loc(#loc13)
    %2111 = llvm.xor %2107, %2110 : i32 loc(#loc13)
    %2112 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2113 = llvm.icmp "eq" %2112, %26 : i32 loc(#loc13)
    %2114 = llvm.select %2113, %26, %24 : i1, i32 loc(#loc13)
    %2115 = llvm.xor %2111, %2114 : i32 loc(#loc13)
    %2116 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2117 = llvm.icmp "eq" %2116, %26 : i32 loc(#loc13)
    %2118 = llvm.select %2117, %26, %23 : i1, i32 loc(#loc13)
    %2119 = llvm.xor %2115, %2118 : i32 loc(#loc13)
    %2120 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2121 = llvm.icmp "eq" %2120, %26 : i32 loc(#loc13)
    %2122 = llvm.select %2121, %26, %22 : i1, i32 loc(#loc13)
    %2123 = llvm.xor %2119, %2122 : i32 loc(#loc13)
    %2124 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2125 = llvm.icmp "eq" %2124, %26 : i32 loc(#loc13)
    %2126 = llvm.select %2125, %26, %33 : i1, i32 loc(#loc13)
    %2127 = llvm.xor %21, %2126 : i32 loc(#loc13)
    %2128 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2129 = llvm.icmp "eq" %2128, %26 : i32 loc(#loc13)
    %2130 = llvm.select %2129, %26, %32 : i1, i32 loc(#loc13)
    %2131 = llvm.xor %2127, %2130 : i32 loc(#loc13)
    %2132 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2133 = llvm.icmp "eq" %2132, %26 : i32 loc(#loc13)
    %2134 = llvm.select %2133, %26, %23 : i1, i32 loc(#loc13)
    %2135 = llvm.xor %2123, %2134 : i32 loc(#loc13)
    %2136 = llvm.select %2133, %26, %24 : i1, i32 loc(#loc13)
    %2137 = llvm.xor %2131, %2136 : i32 loc(#loc13)
    %2138 = llvm.mul %2135, %33 : i32 loc(#loc13)
    %2139 = llvm.add %2138, %26 : i32 loc(#loc13)
    %2140 = llvm.mul %2137, %30 : i32 loc(#loc13)
    %2141 = llvm.add %2139, %2140 : i32 loc(#loc13)
    %2142 = llvm.getelementptr inbounds %12[%2141] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2143 = llvm.insertelement %1976, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2143, %2142 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2144 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2145 = llvm.icmp "eq" %2144, %26 : i32 loc(#loc13)
    %2146 = llvm.select %2145, %26, %33 : i1, i32 loc(#loc13)
    %2147 = llvm.xor %26, %2146 : i32 loc(#loc13)
    %2148 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2149 = llvm.icmp "eq" %2148, %26 : i32 loc(#loc13)
    %2150 = llvm.select %2149, %26, %32 : i1, i32 loc(#loc13)
    %2151 = llvm.xor %2147, %2150 : i32 loc(#loc13)
    %2152 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2153 = llvm.icmp "eq" %2152, %26 : i32 loc(#loc13)
    %2154 = llvm.select %2153, %26, %24 : i1, i32 loc(#loc13)
    %2155 = llvm.xor %2151, %2154 : i32 loc(#loc13)
    %2156 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2157 = llvm.icmp "eq" %2156, %26 : i32 loc(#loc13)
    %2158 = llvm.select %2157, %26, %23 : i1, i32 loc(#loc13)
    %2159 = llvm.xor %2155, %2158 : i32 loc(#loc13)
    %2160 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2161 = llvm.icmp "eq" %2160, %26 : i32 loc(#loc13)
    %2162 = llvm.select %2161, %26, %22 : i1, i32 loc(#loc13)
    %2163 = llvm.xor %2159, %2162 : i32 loc(#loc13)
    %2164 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2165 = llvm.icmp "eq" %2164, %26 : i32 loc(#loc13)
    %2166 = llvm.select %2165, %26, %33 : i1, i32 loc(#loc13)
    %2167 = llvm.xor %30, %2166 : i32 loc(#loc13)
    %2168 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2169 = llvm.icmp "eq" %2168, %26 : i32 loc(#loc13)
    %2170 = llvm.select %2169, %26, %32 : i1, i32 loc(#loc13)
    %2171 = llvm.xor %2167, %2170 : i32 loc(#loc13)
    %2172 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2173 = llvm.icmp "eq" %2172, %26 : i32 loc(#loc13)
    %2174 = llvm.select %2173, %26, %23 : i1, i32 loc(#loc13)
    %2175 = llvm.xor %2163, %2174 : i32 loc(#loc13)
    %2176 = llvm.select %2173, %26, %24 : i1, i32 loc(#loc13)
    %2177 = llvm.xor %2171, %2176 : i32 loc(#loc13)
    %2178 = llvm.mul %2175, %33 : i32 loc(#loc13)
    %2179 = llvm.add %2178, %26 : i32 loc(#loc13)
    %2180 = llvm.mul %2177, %30 : i32 loc(#loc13)
    %2181 = llvm.add %2179, %2180 : i32 loc(#loc13)
    %2182 = llvm.getelementptr inbounds %12[%2181] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2183 = llvm.insertelement %1977, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2183, %2182 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2184 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2185 = llvm.icmp "eq" %2184, %26 : i32 loc(#loc13)
    %2186 = llvm.select %2185, %26, %33 : i1, i32 loc(#loc13)
    %2187 = llvm.xor %22, %2186 : i32 loc(#loc13)
    %2188 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2189 = llvm.icmp "eq" %2188, %26 : i32 loc(#loc13)
    %2190 = llvm.select %2189, %26, %32 : i1, i32 loc(#loc13)
    %2191 = llvm.xor %2187, %2190 : i32 loc(#loc13)
    %2192 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2193 = llvm.icmp "eq" %2192, %26 : i32 loc(#loc13)
    %2194 = llvm.select %2193, %26, %24 : i1, i32 loc(#loc13)
    %2195 = llvm.xor %2191, %2194 : i32 loc(#loc13)
    %2196 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2197 = llvm.icmp "eq" %2196, %26 : i32 loc(#loc13)
    %2198 = llvm.select %2197, %26, %23 : i1, i32 loc(#loc13)
    %2199 = llvm.xor %2195, %2198 : i32 loc(#loc13)
    %2200 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2201 = llvm.icmp "eq" %2200, %26 : i32 loc(#loc13)
    %2202 = llvm.select %2201, %26, %22 : i1, i32 loc(#loc13)
    %2203 = llvm.xor %2199, %2202 : i32 loc(#loc13)
    %2204 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2205 = llvm.icmp "eq" %2204, %26 : i32 loc(#loc13)
    %2206 = llvm.select %2205, %26, %33 : i1, i32 loc(#loc13)
    %2207 = llvm.xor %20, %2206 : i32 loc(#loc13)
    %2208 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2209 = llvm.icmp "eq" %2208, %26 : i32 loc(#loc13)
    %2210 = llvm.select %2209, %26, %32 : i1, i32 loc(#loc13)
    %2211 = llvm.xor %2207, %2210 : i32 loc(#loc13)
    %2212 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2213 = llvm.icmp "eq" %2212, %26 : i32 loc(#loc13)
    %2214 = llvm.select %2213, %26, %23 : i1, i32 loc(#loc13)
    %2215 = llvm.xor %2203, %2214 : i32 loc(#loc13)
    %2216 = llvm.select %2213, %26, %24 : i1, i32 loc(#loc13)
    %2217 = llvm.xor %2211, %2216 : i32 loc(#loc13)
    %2218 = llvm.mul %2215, %33 : i32 loc(#loc13)
    %2219 = llvm.add %2218, %26 : i32 loc(#loc13)
    %2220 = llvm.mul %2217, %30 : i32 loc(#loc13)
    %2221 = llvm.add %2219, %2220 : i32 loc(#loc13)
    %2222 = llvm.getelementptr inbounds %12[%2221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2223 = llvm.insertelement %1978, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2223, %2222 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2224 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2225 = llvm.icmp "eq" %2224, %26 : i32 loc(#loc13)
    %2226 = llvm.select %2225, %26, %33 : i1, i32 loc(#loc13)
    %2227 = llvm.xor %26, %2226 : i32 loc(#loc13)
    %2228 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2229 = llvm.icmp "eq" %2228, %26 : i32 loc(#loc13)
    %2230 = llvm.select %2229, %26, %32 : i1, i32 loc(#loc13)
    %2231 = llvm.xor %2227, %2230 : i32 loc(#loc13)
    %2232 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2233 = llvm.icmp "eq" %2232, %26 : i32 loc(#loc13)
    %2234 = llvm.select %2233, %26, %24 : i1, i32 loc(#loc13)
    %2235 = llvm.xor %2231, %2234 : i32 loc(#loc13)
    %2236 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2237 = llvm.icmp "eq" %2236, %26 : i32 loc(#loc13)
    %2238 = llvm.select %2237, %26, %23 : i1, i32 loc(#loc13)
    %2239 = llvm.xor %2235, %2238 : i32 loc(#loc13)
    %2240 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2241 = llvm.icmp "eq" %2240, %26 : i32 loc(#loc13)
    %2242 = llvm.select %2241, %26, %22 : i1, i32 loc(#loc13)
    %2243 = llvm.xor %2239, %2242 : i32 loc(#loc13)
    %2244 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2245 = llvm.icmp "eq" %2244, %26 : i32 loc(#loc13)
    %2246 = llvm.select %2245, %26, %33 : i1, i32 loc(#loc13)
    %2247 = llvm.xor %19, %2246 : i32 loc(#loc13)
    %2248 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2249 = llvm.icmp "eq" %2248, %26 : i32 loc(#loc13)
    %2250 = llvm.select %2249, %26, %32 : i1, i32 loc(#loc13)
    %2251 = llvm.xor %2247, %2250 : i32 loc(#loc13)
    %2252 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2253 = llvm.icmp "eq" %2252, %26 : i32 loc(#loc13)
    %2254 = llvm.select %2253, %26, %23 : i1, i32 loc(#loc13)
    %2255 = llvm.xor %2243, %2254 : i32 loc(#loc13)
    %2256 = llvm.select %2253, %26, %24 : i1, i32 loc(#loc13)
    %2257 = llvm.xor %2251, %2256 : i32 loc(#loc13)
    %2258 = llvm.mul %2255, %33 : i32 loc(#loc13)
    %2259 = llvm.add %2258, %26 : i32 loc(#loc13)
    %2260 = llvm.mul %2257, %30 : i32 loc(#loc13)
    %2261 = llvm.add %2259, %2260 : i32 loc(#loc13)
    %2262 = llvm.getelementptr inbounds %12[%2261] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2263 = llvm.insertelement %1979, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2263, %2262 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %2264 = llvm.and %1982, %33 : i32 loc(#loc13)
    %2265 = llvm.icmp "eq" %2264, %26 : i32 loc(#loc13)
    %2266 = llvm.select %2265, %26, %33 : i1, i32 loc(#loc13)
    %2267 = llvm.xor %22, %2266 : i32 loc(#loc13)
    %2268 = llvm.and %1982, %32 : i32 loc(#loc13)
    %2269 = llvm.icmp "eq" %2268, %26 : i32 loc(#loc13)
    %2270 = llvm.select %2269, %26, %32 : i1, i32 loc(#loc13)
    %2271 = llvm.xor %2267, %2270 : i32 loc(#loc13)
    %2272 = llvm.and %1982, %24 : i32 loc(#loc13)
    %2273 = llvm.icmp "eq" %2272, %26 : i32 loc(#loc13)
    %2274 = llvm.select %2273, %26, %24 : i1, i32 loc(#loc13)
    %2275 = llvm.xor %2271, %2274 : i32 loc(#loc13)
    %2276 = llvm.and %1982, %23 : i32 loc(#loc13)
    %2277 = llvm.icmp "eq" %2276, %26 : i32 loc(#loc13)
    %2278 = llvm.select %2277, %26, %23 : i1, i32 loc(#loc13)
    %2279 = llvm.xor %2275, %2278 : i32 loc(#loc13)
    %2280 = llvm.and %1982, %22 : i32 loc(#loc13)
    %2281 = llvm.icmp "eq" %2280, %26 : i32 loc(#loc13)
    %2282 = llvm.select %2281, %26, %22 : i1, i32 loc(#loc13)
    %2283 = llvm.xor %2279, %2282 : i32 loc(#loc13)
    %2284 = llvm.and %1982, %30 : i32 loc(#loc13)
    %2285 = llvm.icmp "eq" %2284, %26 : i32 loc(#loc13)
    %2286 = llvm.select %2285, %26, %33 : i1, i32 loc(#loc13)
    %2287 = llvm.xor %18, %2286 : i32 loc(#loc13)
    %2288 = llvm.and %1983, %33 : i32 loc(#loc13)
    %2289 = llvm.icmp "eq" %2288, %26 : i32 loc(#loc13)
    %2290 = llvm.select %2289, %26, %32 : i1, i32 loc(#loc13)
    %2291 = llvm.xor %2287, %2290 : i32 loc(#loc13)
    %2292 = llvm.and %1983, %32 : i32 loc(#loc13)
    %2293 = llvm.icmp "eq" %2292, %26 : i32 loc(#loc13)
    %2294 = llvm.select %2293, %26, %23 : i1, i32 loc(#loc13)
    %2295 = llvm.xor %2283, %2294 : i32 loc(#loc13)
    %2296 = llvm.select %2293, %26, %24 : i1, i32 loc(#loc13)
    %2297 = llvm.xor %2291, %2296 : i32 loc(#loc13)
    %2298 = llvm.mul %2295, %33 : i32 loc(#loc13)
    %2299 = llvm.add %2298, %26 : i32 loc(#loc13)
    %2300 = llvm.mul %2297, %30 : i32 loc(#loc13)
    %2301 = llvm.add %2299, %2300 : i32 loc(#loc13)
    %2302 = llvm.getelementptr inbounds %12[%2301] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2303 = llvm.insertelement %1980, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %2303, %2302 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %2304 = rocdl.workitem.id.x : i32 loc(#loc13)
    %2305 = llvm.udiv %2304, %27 : i32 loc(#loc13)
    %2306 = llvm.urem %2304, %27 : i32 loc(#loc13)
    %2307 = llvm.udiv %2305, %32 : i32 loc(#loc13)
    %2308 = llvm.urem %2307, %32 : i32 loc(#loc13)
    %2309 = llvm.urem %2308, %32 : i32 loc(#loc13)
    %2310 = llvm.urem %2305, %33 : i32 loc(#loc13)
    %2311 = llvm.mul %2309, %30 : i32 loc(#loc13)
    %2312 = llvm.urem %2306, %30 : i32 loc(#loc13)
    %2313 = llvm.icmp "uge" %2306, %30 : i32 loc(#loc13)
    %2314 = llvm.select %2313, %23, %26 : i1, i32 loc(#loc13)
    %2315 = llvm.add %2312, %26 : i32 loc(#loc13)
    %2316 = llvm.add %2315, %26 : i32 loc(#loc13)
    %2317 = llvm.add %2316, %2311 : i32 loc(#loc13)
    %2318 = llvm.add %2314, %26 : i32 loc(#loc13)
    %2319 = llvm.add %2318, %26 : i32 loc(#loc13)
    %2320 = llvm.add %2317, %26 : i32 loc(#loc13)
    %2321 = llvm.add %2319, %26 : i32 loc(#loc13)
    %2322 = llvm.urem %2306, %30 : i32 loc(#loc13)
    %2323 = llvm.icmp "uge" %2306, %30 : i32 loc(#loc13)
    %2324 = llvm.select %2323, %23, %26 : i1, i32 loc(#loc13)
    %2325 = llvm.add %2322, %26 : i32 loc(#loc13)
    %2326 = llvm.add %2325, %26 : i32 loc(#loc13)
    %2327 = llvm.add %2326, %2311 : i32 loc(#loc13)
    %2328 = llvm.add %2324, %22 : i32 loc(#loc13)
    %2329 = llvm.add %2328, %26 : i32 loc(#loc13)
    %2330 = llvm.add %2327, %26 : i32 loc(#loc13)
    %2331 = llvm.add %2329, %26 : i32 loc(#loc13)
    %2332 = llvm.udiv %2320, %24 : i32 loc(#loc13)
    %2333 = llvm.urem %2332, %24 : i32 loc(#loc13)
    %2334 = llvm.udiv %2321, %23 : i32 loc(#loc13)
    %2335 = llvm.xor %2334, %2333 : i32 loc(#loc13)
    %2336 = llvm.mul %2335, %23 : i32 loc(#loc13)
    %2337 = llvm.urem %2321, %23 : i32 loc(#loc13)
    %2338 = llvm.add %2336, %2337 : i32 loc(#loc13)
    %2339 = llvm.mul %2320, %30 : i32 loc(#loc13)
    %2340 = llvm.mul %2338, %33 : i32 loc(#loc13)
    %2341 = llvm.add %2339, %2340 : i32 loc(#loc13)
    %2342 = llvm.udiv %2330, %24 : i32 loc(#loc13)
    %2343 = llvm.urem %2342, %24 : i32 loc(#loc13)
    %2344 = llvm.udiv %2331, %23 : i32 loc(#loc13)
    %2345 = llvm.xor %2344, %2343 : i32 loc(#loc13)
    %2346 = llvm.mul %2345, %23 : i32 loc(#loc13)
    %2347 = llvm.urem %2331, %23 : i32 loc(#loc13)
    %2348 = llvm.add %2346, %2347 : i32 loc(#loc13)
    %2349 = llvm.mul %2330, %30 : i32 loc(#loc13)
    %2350 = llvm.mul %2348, %33 : i32 loc(#loc13)
    %2351 = llvm.add %2349, %2350 : i32 loc(#loc13)
    %2352 = llvm.mul %26, %30 : i32 loc(#loc13)
    %2353 = llvm.add %2352, %2341 : i32 loc(#loc13)
    %2354 = llvm.add %2352, %2351 : i32 loc(#loc13)
    %2355 = llvm.mul %26, %30 : i32 loc(#loc13)
    %2356 = llvm.sub %26, %2355 : i32 loc(#loc13)
    %2357 = llvm.getelementptr %12[%2356] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2358 = llvm.mul %26, %33 : i32 loc(#loc13)
    %2359 = llvm.sub %26, %2358 : i32 loc(#loc13)
    %2360 = llvm.getelementptr %2357[%2359] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2361 = llvm.add %2310, %26 : i32 loc(#loc13)
    %2362 = llvm.mul %2361, %8 : i32 loc(#loc13)
    %2363 = llvm.add %2353, %2362 : i32 loc(#loc13)
    %2364 = llvm.getelementptr %2360[%2363] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2365 = llvm.load %2364 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %2366 = llvm.extractelement %2365[%26 : i32] : vector<8xbf16> loc(#loc13)
    %2367 = llvm.extractelement %2365[%33 : i32] : vector<8xbf16> loc(#loc13)
    %2368 = llvm.extractelement %2365[%32 : i32] : vector<8xbf16> loc(#loc13)
    %2369 = llvm.extractelement %2365[%16 : i32] : vector<8xbf16> loc(#loc13)
    %2370 = llvm.extractelement %2365[%24 : i32] : vector<8xbf16> loc(#loc13)
    %2371 = llvm.extractelement %2365[%11 : i32] : vector<8xbf16> loc(#loc13)
    %2372 = llvm.extractelement %2365[%10 : i32] : vector<8xbf16> loc(#loc13)
    %2373 = llvm.extractelement %2365[%9 : i32] : vector<8xbf16> loc(#loc13)
    %2374 = llvm.add %2354, %2362 : i32 loc(#loc13)
    %2375 = llvm.getelementptr %2360[%2374] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %2376 = llvm.load %2375 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %2377 = llvm.extractelement %2376[%26 : i32] : vector<8xbf16> loc(#loc13)
    %2378 = llvm.extractelement %2376[%33 : i32] : vector<8xbf16> loc(#loc13)
    %2379 = llvm.extractelement %2376[%32 : i32] : vector<8xbf16> loc(#loc13)
    %2380 = llvm.extractelement %2376[%16 : i32] : vector<8xbf16> loc(#loc13)
    %2381 = llvm.extractelement %2376[%24 : i32] : vector<8xbf16> loc(#loc13)
    %2382 = llvm.extractelement %2376[%11 : i32] : vector<8xbf16> loc(#loc13)
    %2383 = llvm.extractelement %2376[%10 : i32] : vector<8xbf16> loc(#loc13)
    %2384 = llvm.extractelement %2376[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %1560, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %2385 = llvm.insertelement %2366, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2386 = llvm.insertelement %2367, %2385[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2387 = llvm.insertelement %2368, %2386[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2388 = llvm.insertelement %2369, %2387[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2389 = llvm.insertelement %2370, %2388[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2390 = llvm.insertelement %2371, %2389[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2391 = llvm.insertelement %2372, %2390[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2392 = llvm.insertelement %2373, %2391[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2393 = llvm.extractelement %2392[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2394 = llvm.insertelement %2393, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2395 = llvm.extractelement %2392[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2396 = llvm.insertelement %2395, %2394[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2397 = llvm.extractelement %2392[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2398 = llvm.insertelement %2397, %2396[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2399 = llvm.extractelement %2392[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2400 = llvm.insertelement %2399, %2398[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2401 = llvm.extractelement %2392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2402 = llvm.insertelement %2401, %2400[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2403 = llvm.extractelement %2392[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2404 = llvm.insertelement %2403, %2402[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2405 = llvm.extractelement %2392[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2406 = llvm.insertelement %2405, %2404[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2407 = llvm.extractelement %2392[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2408 = llvm.insertelement %2407, %2406[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2409 = llvm.insertelement %2377, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2410 = llvm.insertelement %2378, %2409[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2411 = llvm.insertelement %2379, %2410[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2412 = llvm.insertelement %2380, %2411[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2413 = llvm.insertelement %2381, %2412[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2414 = llvm.insertelement %2382, %2413[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2415 = llvm.insertelement %2383, %2414[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2416 = llvm.insertelement %2384, %2415[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2417 = llvm.extractelement %2416[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2418 = llvm.insertelement %2417, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2419 = llvm.extractelement %2416[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2420 = llvm.insertelement %2419, %2418[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2421 = llvm.extractelement %2416[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2422 = llvm.insertelement %2421, %2420[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2423 = llvm.extractelement %2416[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2424 = llvm.insertelement %2423, %2422[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2425 = llvm.extractelement %2416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2426 = llvm.insertelement %2425, %2424[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2427 = llvm.extractelement %2416[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2428 = llvm.insertelement %2427, %2426[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2429 = llvm.extractelement %2416[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2430 = llvm.insertelement %2429, %2428[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2431 = llvm.extractelement %2416[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2432 = llvm.insertelement %2431, %2430[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2433 = llvm.insertelement %1954, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2434 = llvm.insertelement %1955, %2433[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2435 = llvm.insertelement %1956, %2434[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2436 = llvm.insertelement %1957, %2435[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2437 = llvm.insertelement %1958, %2436[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2438 = llvm.insertelement %1959, %2437[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2439 = llvm.insertelement %1960, %2438[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2440 = llvm.insertelement %1961, %2439[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2441 = llvm.extractelement %2440[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2442 = llvm.insertelement %2441, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2443 = llvm.extractelement %2440[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2444 = llvm.insertelement %2443, %2442[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2445 = llvm.extractelement %2440[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2446 = llvm.insertelement %2445, %2444[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2447 = llvm.extractelement %2440[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2448 = llvm.insertelement %2447, %2446[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2449 = llvm.extractelement %2440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2450 = llvm.insertelement %2449, %2448[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2451 = llvm.extractelement %2440[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2452 = llvm.insertelement %2451, %2450[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2453 = llvm.extractelement %2440[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2454 = llvm.insertelement %2453, %2452[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2455 = llvm.extractelement %2440[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2456 = llvm.insertelement %2455, %2454[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2457 = llvm.insertelement %1965, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2458 = llvm.insertelement %1966, %2457[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2459 = llvm.insertelement %1967, %2458[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2460 = llvm.insertelement %1968, %2459[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2461 = llvm.insertelement %1969, %2460[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2462 = llvm.insertelement %1970, %2461[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2463 = llvm.insertelement %1971, %2462[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2464 = llvm.insertelement %1972, %2463[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2465 = llvm.extractelement %2464[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2466 = llvm.insertelement %2465, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %2467 = llvm.extractelement %2464[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2468 = llvm.insertelement %2467, %2466[%33 : i32] : vector<8xbf16> loc(#loc24)
    %2469 = llvm.extractelement %2464[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2470 = llvm.insertelement %2469, %2468[%32 : i32] : vector<8xbf16> loc(#loc24)
    %2471 = llvm.extractelement %2464[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2472 = llvm.insertelement %2471, %2470[%16 : i32] : vector<8xbf16> loc(#loc24)
    %2473 = llvm.extractelement %2464[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2474 = llvm.insertelement %2473, %2472[%24 : i32] : vector<8xbf16> loc(#loc24)
    %2475 = llvm.extractelement %2464[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2476 = llvm.insertelement %2475, %2474[%11 : i32] : vector<8xbf16> loc(#loc24)
    %2477 = llvm.extractelement %2464[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2478 = llvm.insertelement %2477, %2476[%10 : i32] : vector<8xbf16> loc(#loc24)
    %2479 = llvm.extractelement %2464[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2480 = llvm.insertelement %2479, %2478[%9 : i32] : vector<8xbf16> loc(#loc24)
    %2481 = llvm.extractvalue %465[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2482 = llvm.extractvalue %465[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2483 = llvm.extractvalue %465[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2484 = llvm.extractvalue %465[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2485 = llvm.extractvalue %465[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2486 = llvm.extractvalue %465[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2487 = llvm.extractvalue %465[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2488 = llvm.extractvalue %465[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2489 = llvm.extractvalue %465[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2490 = llvm.extractvalue %465[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2491 = llvm.extractvalue %465[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2492 = llvm.extractvalue %465[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2493 = llvm.extractvalue %465[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2494 = llvm.extractvalue %465[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2495 = llvm.extractvalue %465[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2496 = llvm.extractvalue %465[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2497 = llvm.insertelement %2481, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %2498 = llvm.insertelement %2482, %2497[%33 : i32] : vector<16xf32> loc(#loc24)
    %2499 = llvm.insertelement %2483, %2498[%32 : i32] : vector<16xf32> loc(#loc24)
    %2500 = llvm.insertelement %2484, %2499[%16 : i32] : vector<16xf32> loc(#loc24)
    %2501 = llvm.insertelement %2485, %2500[%24 : i32] : vector<16xf32> loc(#loc24)
    %2502 = llvm.insertelement %2486, %2501[%11 : i32] : vector<16xf32> loc(#loc24)
    %2503 = llvm.insertelement %2487, %2502[%10 : i32] : vector<16xf32> loc(#loc24)
    %2504 = llvm.insertelement %2488, %2503[%9 : i32] : vector<16xf32> loc(#loc24)
    %2505 = llvm.insertelement %2489, %2504[%23 : i32] : vector<16xf32> loc(#loc24)
    %2506 = llvm.insertelement %2490, %2505[%15 : i32] : vector<16xf32> loc(#loc24)
    %2507 = llvm.insertelement %2491, %2506[%14 : i32] : vector<16xf32> loc(#loc24)
    %2508 = llvm.insertelement %2492, %2507[%13 : i32] : vector<16xf32> loc(#loc24)
    %2509 = llvm.insertelement %2493, %2508[%5 : i32] : vector<16xf32> loc(#loc24)
    %2510 = llvm.insertelement %2494, %2509[%4 : i32] : vector<16xf32> loc(#loc24)
    %2511 = llvm.insertelement %2495, %2510[%3 : i32] : vector<16xf32> loc(#loc24)
    %2512 = llvm.insertelement %2496, %2511[%2 : i32] : vector<16xf32> loc(#loc24)
    %2513 = rocdl.mfma.f32.32x32x16.bf16 %2456, %2408, %2512, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %2514 = rocdl.mfma.f32.32x32x16.bf16 %2480, %2432, %2513, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %2515 = llvm.extractelement %2514[%26 : i32] : vector<16xf32> loc(#loc24)
    %2516 = llvm.extractelement %2514[%33 : i32] : vector<16xf32> loc(#loc24)
    %2517 = llvm.extractelement %2514[%32 : i32] : vector<16xf32> loc(#loc24)
    %2518 = llvm.extractelement %2514[%16 : i32] : vector<16xf32> loc(#loc24)
    %2519 = llvm.extractelement %2514[%24 : i32] : vector<16xf32> loc(#loc24)
    %2520 = llvm.extractelement %2514[%11 : i32] : vector<16xf32> loc(#loc24)
    %2521 = llvm.extractelement %2514[%10 : i32] : vector<16xf32> loc(#loc24)
    %2522 = llvm.extractelement %2514[%9 : i32] : vector<16xf32> loc(#loc24)
    %2523 = llvm.extractelement %2514[%23 : i32] : vector<16xf32> loc(#loc24)
    %2524 = llvm.extractelement %2514[%15 : i32] : vector<16xf32> loc(#loc24)
    %2525 = llvm.extractelement %2514[%14 : i32] : vector<16xf32> loc(#loc24)
    %2526 = llvm.extractelement %2514[%13 : i32] : vector<16xf32> loc(#loc24)
    %2527 = llvm.extractelement %2514[%5 : i32] : vector<16xf32> loc(#loc24)
    %2528 = llvm.extractelement %2514[%4 : i32] : vector<16xf32> loc(#loc24)
    %2529 = llvm.extractelement %2514[%3 : i32] : vector<16xf32> loc(#loc24)
    %2530 = llvm.extractelement %2514[%2 : i32] : vector<16xf32> loc(#loc24)
    %2531 = llvm.insertvalue %2515, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2532 = llvm.insertvalue %2516, %2531[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2533 = llvm.insertvalue %2517, %2532[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2534 = llvm.insertvalue %2518, %2533[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2535 = llvm.insertvalue %2519, %2534[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2536 = llvm.insertvalue %2520, %2535[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2537 = llvm.insertvalue %2521, %2536[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2538 = llvm.insertvalue %2522, %2537[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2539 = llvm.insertvalue %2523, %2538[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2540 = llvm.insertvalue %2524, %2539[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2541 = llvm.insertvalue %2525, %2540[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2542 = llvm.insertvalue %2526, %2541[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2543 = llvm.insertvalue %2527, %2542[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2544 = llvm.insertvalue %2528, %2543[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2545 = llvm.insertvalue %2529, %2544[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %2546 = llvm.insertvalue %2530, %2545[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%2546 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%465 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%2547: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %2548 = llvm.extractvalue %2547[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2549 = llvm.extractvalue %2547[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2550 = llvm.extractvalue %2547[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2551 = llvm.extractvalue %2547[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2552 = llvm.extractvalue %2547[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2553 = llvm.extractvalue %2547[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2554 = llvm.extractvalue %2547[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2555 = llvm.extractvalue %2547[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2556 = llvm.extractvalue %2547[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2557 = llvm.extractvalue %2547[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2558 = llvm.extractvalue %2547[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2559 = llvm.extractvalue %2547[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2560 = llvm.extractvalue %2547[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2561 = llvm.extractvalue %2547[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2562 = llvm.extractvalue %2547[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2563 = llvm.extractvalue %2547[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2564 = llvm.extractvalue %465[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2565 = llvm.extractvalue %465[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2566 = llvm.extractvalue %465[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2567 = llvm.extractvalue %465[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2568 = llvm.extractvalue %465[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2569 = llvm.extractvalue %465[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2570 = llvm.extractvalue %465[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2571 = llvm.extractvalue %465[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2572 = llvm.extractvalue %465[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2573 = llvm.extractvalue %465[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2574 = llvm.extractvalue %465[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2575 = llvm.extractvalue %465[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2576 = llvm.extractvalue %465[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2577 = llvm.extractvalue %465[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2578 = llvm.extractvalue %465[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2579 = llvm.extractvalue %465[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2580 = llvm.select %1560, %2548, %2564 : i1, f32 loc(#loc9)
    %2581 = llvm.select %1560, %2549, %2565 : i1, f32 loc(#loc9)
    %2582 = llvm.select %1560, %2550, %2566 : i1, f32 loc(#loc9)
    %2583 = llvm.select %1560, %2551, %2567 : i1, f32 loc(#loc9)
    %2584 = llvm.select %1560, %2552, %2568 : i1, f32 loc(#loc9)
    %2585 = llvm.select %1560, %2553, %2569 : i1, f32 loc(#loc9)
    %2586 = llvm.select %1560, %2554, %2570 : i1, f32 loc(#loc9)
    %2587 = llvm.select %1560, %2555, %2571 : i1, f32 loc(#loc9)
    %2588 = llvm.select %1560, %2556, %2572 : i1, f32 loc(#loc9)
    %2589 = llvm.select %1560, %2557, %2573 : i1, f32 loc(#loc9)
    %2590 = llvm.select %1560, %2558, %2574 : i1, f32 loc(#loc9)
    %2591 = llvm.select %1560, %2559, %2575 : i1, f32 loc(#loc9)
    %2592 = llvm.select %1560, %2560, %2576 : i1, f32 loc(#loc9)
    %2593 = llvm.select %1560, %2561, %2577 : i1, f32 loc(#loc9)
    %2594 = llvm.select %1560, %2562, %2578 : i1, f32 loc(#loc9)
    %2595 = llvm.select %1560, %2563, %2579 : i1, f32 loc(#loc9)
    %2596 = llvm.insertvalue %2580, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2597 = llvm.insertvalue %2581, %2596[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2598 = llvm.insertvalue %2582, %2597[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2599 = llvm.insertvalue %2583, %2598[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2600 = llvm.insertvalue %2584, %2599[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2601 = llvm.insertvalue %2585, %2600[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2602 = llvm.insertvalue %2586, %2601[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2603 = llvm.insertvalue %2587, %2602[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2604 = llvm.insertvalue %2588, %2603[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2605 = llvm.insertvalue %2589, %2604[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2606 = llvm.insertvalue %2590, %2605[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2607 = llvm.insertvalue %2591, %2606[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2608 = llvm.insertvalue %2592, %2607[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2609 = llvm.insertvalue %2593, %2608[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2610 = llvm.insertvalue %2594, %2609[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %2611 = llvm.insertvalue %2595, %2610[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %2612 = llvm.extractvalue %467[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2613 = llvm.extractvalue %467[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2614 = llvm.extractvalue %467[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2615 = llvm.extractvalue %467[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2616 = llvm.extractvalue %467[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2617 = llvm.extractvalue %467[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2618 = llvm.extractvalue %467[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2619 = llvm.extractvalue %467[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %2620 = rocdl.workitem.id.x : i32 loc(#loc23)
    %2621 = llvm.urem %2620, %27 : i32 loc(#loc23)
    %2622 = llvm.udiv %2620, %27 : i32 loc(#loc23)
    %2623 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2624 = llvm.icmp "eq" %2623, %26 : i32 loc(#loc23)
    %2625 = llvm.select %2624, %26, %33 : i1, i32 loc(#loc23)
    %2626 = llvm.xor %26, %2625 : i32 loc(#loc23)
    %2627 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2628 = llvm.icmp "eq" %2627, %26 : i32 loc(#loc23)
    %2629 = llvm.select %2628, %26, %32 : i1, i32 loc(#loc23)
    %2630 = llvm.xor %2626, %2629 : i32 loc(#loc23)
    %2631 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2632 = llvm.icmp "eq" %2631, %26 : i32 loc(#loc23)
    %2633 = llvm.select %2632, %26, %24 : i1, i32 loc(#loc23)
    %2634 = llvm.xor %2630, %2633 : i32 loc(#loc23)
    %2635 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2636 = llvm.icmp "eq" %2635, %26 : i32 loc(#loc23)
    %2637 = llvm.select %2636, %26, %23 : i1, i32 loc(#loc23)
    %2638 = llvm.xor %2634, %2637 : i32 loc(#loc23)
    %2639 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2640 = llvm.icmp "eq" %2639, %26 : i32 loc(#loc23)
    %2641 = llvm.select %2640, %26, %22 : i1, i32 loc(#loc23)
    %2642 = llvm.xor %2638, %2641 : i32 loc(#loc23)
    %2643 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2644 = llvm.icmp "eq" %2643, %26 : i32 loc(#loc23)
    %2645 = llvm.select %2644, %26, %33 : i1, i32 loc(#loc23)
    %2646 = llvm.xor %26, %2645 : i32 loc(#loc23)
    %2647 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2648 = llvm.icmp "eq" %2647, %26 : i32 loc(#loc23)
    %2649 = llvm.select %2648, %26, %32 : i1, i32 loc(#loc23)
    %2650 = llvm.xor %2646, %2649 : i32 loc(#loc23)
    %2651 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2652 = llvm.icmp "eq" %2651, %26 : i32 loc(#loc23)
    %2653 = llvm.select %2652, %26, %23 : i1, i32 loc(#loc23)
    %2654 = llvm.xor %2642, %2653 : i32 loc(#loc23)
    %2655 = llvm.select %2652, %26, %24 : i1, i32 loc(#loc23)
    %2656 = llvm.xor %2650, %2655 : i32 loc(#loc23)
    %2657 = llvm.mul %2654, %33 : i32 loc(#loc23)
    %2658 = llvm.add %2657, %26 : i32 loc(#loc23)
    %2659 = llvm.mul %2656, %30 : i32 loc(#loc23)
    %2660 = llvm.add %2658, %2659 : i32 loc(#loc23)
    %2661 = llvm.getelementptr inbounds %12[%2660] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2662 = llvm.insertelement %2612, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2662, %2661 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2663 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2664 = llvm.icmp "eq" %2663, %26 : i32 loc(#loc23)
    %2665 = llvm.select %2664, %26, %33 : i1, i32 loc(#loc23)
    %2666 = llvm.xor %22, %2665 : i32 loc(#loc23)
    %2667 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2668 = llvm.icmp "eq" %2667, %26 : i32 loc(#loc23)
    %2669 = llvm.select %2668, %26, %32 : i1, i32 loc(#loc23)
    %2670 = llvm.xor %2666, %2669 : i32 loc(#loc23)
    %2671 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2672 = llvm.icmp "eq" %2671, %26 : i32 loc(#loc23)
    %2673 = llvm.select %2672, %26, %24 : i1, i32 loc(#loc23)
    %2674 = llvm.xor %2670, %2673 : i32 loc(#loc23)
    %2675 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2676 = llvm.icmp "eq" %2675, %26 : i32 loc(#loc23)
    %2677 = llvm.select %2676, %26, %23 : i1, i32 loc(#loc23)
    %2678 = llvm.xor %2674, %2677 : i32 loc(#loc23)
    %2679 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2680 = llvm.icmp "eq" %2679, %26 : i32 loc(#loc23)
    %2681 = llvm.select %2680, %26, %22 : i1, i32 loc(#loc23)
    %2682 = llvm.xor %2678, %2681 : i32 loc(#loc23)
    %2683 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2684 = llvm.icmp "eq" %2683, %26 : i32 loc(#loc23)
    %2685 = llvm.select %2684, %26, %33 : i1, i32 loc(#loc23)
    %2686 = llvm.xor %23, %2685 : i32 loc(#loc23)
    %2687 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2688 = llvm.icmp "eq" %2687, %26 : i32 loc(#loc23)
    %2689 = llvm.select %2688, %26, %32 : i1, i32 loc(#loc23)
    %2690 = llvm.xor %2686, %2689 : i32 loc(#loc23)
    %2691 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2692 = llvm.icmp "eq" %2691, %26 : i32 loc(#loc23)
    %2693 = llvm.select %2692, %26, %23 : i1, i32 loc(#loc23)
    %2694 = llvm.xor %2682, %2693 : i32 loc(#loc23)
    %2695 = llvm.select %2692, %26, %24 : i1, i32 loc(#loc23)
    %2696 = llvm.xor %2690, %2695 : i32 loc(#loc23)
    %2697 = llvm.mul %2694, %33 : i32 loc(#loc23)
    %2698 = llvm.add %2697, %26 : i32 loc(#loc23)
    %2699 = llvm.mul %2696, %30 : i32 loc(#loc23)
    %2700 = llvm.add %2698, %2699 : i32 loc(#loc23)
    %2701 = llvm.getelementptr inbounds %12[%2700] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2702 = llvm.insertelement %2613, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2702, %2701 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2703 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2704 = llvm.icmp "eq" %2703, %26 : i32 loc(#loc23)
    %2705 = llvm.select %2704, %26, %33 : i1, i32 loc(#loc23)
    %2706 = llvm.xor %26, %2705 : i32 loc(#loc23)
    %2707 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2708 = llvm.icmp "eq" %2707, %26 : i32 loc(#loc23)
    %2709 = llvm.select %2708, %26, %32 : i1, i32 loc(#loc23)
    %2710 = llvm.xor %2706, %2709 : i32 loc(#loc23)
    %2711 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2712 = llvm.icmp "eq" %2711, %26 : i32 loc(#loc23)
    %2713 = llvm.select %2712, %26, %24 : i1, i32 loc(#loc23)
    %2714 = llvm.xor %2710, %2713 : i32 loc(#loc23)
    %2715 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2716 = llvm.icmp "eq" %2715, %26 : i32 loc(#loc23)
    %2717 = llvm.select %2716, %26, %23 : i1, i32 loc(#loc23)
    %2718 = llvm.xor %2714, %2717 : i32 loc(#loc23)
    %2719 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2720 = llvm.icmp "eq" %2719, %26 : i32 loc(#loc23)
    %2721 = llvm.select %2720, %26, %22 : i1, i32 loc(#loc23)
    %2722 = llvm.xor %2718, %2721 : i32 loc(#loc23)
    %2723 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2724 = llvm.icmp "eq" %2723, %26 : i32 loc(#loc23)
    %2725 = llvm.select %2724, %26, %33 : i1, i32 loc(#loc23)
    %2726 = llvm.xor %22, %2725 : i32 loc(#loc23)
    %2727 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2728 = llvm.icmp "eq" %2727, %26 : i32 loc(#loc23)
    %2729 = llvm.select %2728, %26, %32 : i1, i32 loc(#loc23)
    %2730 = llvm.xor %2726, %2729 : i32 loc(#loc23)
    %2731 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2732 = llvm.icmp "eq" %2731, %26 : i32 loc(#loc23)
    %2733 = llvm.select %2732, %26, %23 : i1, i32 loc(#loc23)
    %2734 = llvm.xor %2722, %2733 : i32 loc(#loc23)
    %2735 = llvm.select %2732, %26, %24 : i1, i32 loc(#loc23)
    %2736 = llvm.xor %2730, %2735 : i32 loc(#loc23)
    %2737 = llvm.mul %2734, %33 : i32 loc(#loc23)
    %2738 = llvm.add %2737, %26 : i32 loc(#loc23)
    %2739 = llvm.mul %2736, %30 : i32 loc(#loc23)
    %2740 = llvm.add %2738, %2739 : i32 loc(#loc23)
    %2741 = llvm.getelementptr inbounds %12[%2740] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2742 = llvm.insertelement %2614, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2742, %2741 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2743 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2744 = llvm.icmp "eq" %2743, %26 : i32 loc(#loc23)
    %2745 = llvm.select %2744, %26, %33 : i1, i32 loc(#loc23)
    %2746 = llvm.xor %22, %2745 : i32 loc(#loc23)
    %2747 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2748 = llvm.icmp "eq" %2747, %26 : i32 loc(#loc23)
    %2749 = llvm.select %2748, %26, %32 : i1, i32 loc(#loc23)
    %2750 = llvm.xor %2746, %2749 : i32 loc(#loc23)
    %2751 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2752 = llvm.icmp "eq" %2751, %26 : i32 loc(#loc23)
    %2753 = llvm.select %2752, %26, %24 : i1, i32 loc(#loc23)
    %2754 = llvm.xor %2750, %2753 : i32 loc(#loc23)
    %2755 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2756 = llvm.icmp "eq" %2755, %26 : i32 loc(#loc23)
    %2757 = llvm.select %2756, %26, %23 : i1, i32 loc(#loc23)
    %2758 = llvm.xor %2754, %2757 : i32 loc(#loc23)
    %2759 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2760 = llvm.icmp "eq" %2759, %26 : i32 loc(#loc23)
    %2761 = llvm.select %2760, %26, %22 : i1, i32 loc(#loc23)
    %2762 = llvm.xor %2758, %2761 : i32 loc(#loc23)
    %2763 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2764 = llvm.icmp "eq" %2763, %26 : i32 loc(#loc23)
    %2765 = llvm.select %2764, %26, %33 : i1, i32 loc(#loc23)
    %2766 = llvm.xor %21, %2765 : i32 loc(#loc23)
    %2767 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2768 = llvm.icmp "eq" %2767, %26 : i32 loc(#loc23)
    %2769 = llvm.select %2768, %26, %32 : i1, i32 loc(#loc23)
    %2770 = llvm.xor %2766, %2769 : i32 loc(#loc23)
    %2771 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2772 = llvm.icmp "eq" %2771, %26 : i32 loc(#loc23)
    %2773 = llvm.select %2772, %26, %23 : i1, i32 loc(#loc23)
    %2774 = llvm.xor %2762, %2773 : i32 loc(#loc23)
    %2775 = llvm.select %2772, %26, %24 : i1, i32 loc(#loc23)
    %2776 = llvm.xor %2770, %2775 : i32 loc(#loc23)
    %2777 = llvm.mul %2774, %33 : i32 loc(#loc23)
    %2778 = llvm.add %2777, %26 : i32 loc(#loc23)
    %2779 = llvm.mul %2776, %30 : i32 loc(#loc23)
    %2780 = llvm.add %2778, %2779 : i32 loc(#loc23)
    %2781 = llvm.getelementptr inbounds %12[%2780] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2782 = llvm.insertelement %2615, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2782, %2781 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2783 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2784 = llvm.icmp "eq" %2783, %26 : i32 loc(#loc23)
    %2785 = llvm.select %2784, %26, %33 : i1, i32 loc(#loc23)
    %2786 = llvm.xor %26, %2785 : i32 loc(#loc23)
    %2787 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2788 = llvm.icmp "eq" %2787, %26 : i32 loc(#loc23)
    %2789 = llvm.select %2788, %26, %32 : i1, i32 loc(#loc23)
    %2790 = llvm.xor %2786, %2789 : i32 loc(#loc23)
    %2791 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2792 = llvm.icmp "eq" %2791, %26 : i32 loc(#loc23)
    %2793 = llvm.select %2792, %26, %24 : i1, i32 loc(#loc23)
    %2794 = llvm.xor %2790, %2793 : i32 loc(#loc23)
    %2795 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2796 = llvm.icmp "eq" %2795, %26 : i32 loc(#loc23)
    %2797 = llvm.select %2796, %26, %23 : i1, i32 loc(#loc23)
    %2798 = llvm.xor %2794, %2797 : i32 loc(#loc23)
    %2799 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2800 = llvm.icmp "eq" %2799, %26 : i32 loc(#loc23)
    %2801 = llvm.select %2800, %26, %22 : i1, i32 loc(#loc23)
    %2802 = llvm.xor %2798, %2801 : i32 loc(#loc23)
    %2803 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2804 = llvm.icmp "eq" %2803, %26 : i32 loc(#loc23)
    %2805 = llvm.select %2804, %26, %33 : i1, i32 loc(#loc23)
    %2806 = llvm.xor %30, %2805 : i32 loc(#loc23)
    %2807 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2808 = llvm.icmp "eq" %2807, %26 : i32 loc(#loc23)
    %2809 = llvm.select %2808, %26, %32 : i1, i32 loc(#loc23)
    %2810 = llvm.xor %2806, %2809 : i32 loc(#loc23)
    %2811 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2812 = llvm.icmp "eq" %2811, %26 : i32 loc(#loc23)
    %2813 = llvm.select %2812, %26, %23 : i1, i32 loc(#loc23)
    %2814 = llvm.xor %2802, %2813 : i32 loc(#loc23)
    %2815 = llvm.select %2812, %26, %24 : i1, i32 loc(#loc23)
    %2816 = llvm.xor %2810, %2815 : i32 loc(#loc23)
    %2817 = llvm.mul %2814, %33 : i32 loc(#loc23)
    %2818 = llvm.add %2817, %26 : i32 loc(#loc23)
    %2819 = llvm.mul %2816, %30 : i32 loc(#loc23)
    %2820 = llvm.add %2818, %2819 : i32 loc(#loc23)
    %2821 = llvm.getelementptr inbounds %12[%2820] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2822 = llvm.insertelement %2616, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2822, %2821 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2823 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2824 = llvm.icmp "eq" %2823, %26 : i32 loc(#loc23)
    %2825 = llvm.select %2824, %26, %33 : i1, i32 loc(#loc23)
    %2826 = llvm.xor %22, %2825 : i32 loc(#loc23)
    %2827 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2828 = llvm.icmp "eq" %2827, %26 : i32 loc(#loc23)
    %2829 = llvm.select %2828, %26, %32 : i1, i32 loc(#loc23)
    %2830 = llvm.xor %2826, %2829 : i32 loc(#loc23)
    %2831 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2832 = llvm.icmp "eq" %2831, %26 : i32 loc(#loc23)
    %2833 = llvm.select %2832, %26, %24 : i1, i32 loc(#loc23)
    %2834 = llvm.xor %2830, %2833 : i32 loc(#loc23)
    %2835 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2836 = llvm.icmp "eq" %2835, %26 : i32 loc(#loc23)
    %2837 = llvm.select %2836, %26, %23 : i1, i32 loc(#loc23)
    %2838 = llvm.xor %2834, %2837 : i32 loc(#loc23)
    %2839 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2840 = llvm.icmp "eq" %2839, %26 : i32 loc(#loc23)
    %2841 = llvm.select %2840, %26, %22 : i1, i32 loc(#loc23)
    %2842 = llvm.xor %2838, %2841 : i32 loc(#loc23)
    %2843 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2844 = llvm.icmp "eq" %2843, %26 : i32 loc(#loc23)
    %2845 = llvm.select %2844, %26, %33 : i1, i32 loc(#loc23)
    %2846 = llvm.xor %20, %2845 : i32 loc(#loc23)
    %2847 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2848 = llvm.icmp "eq" %2847, %26 : i32 loc(#loc23)
    %2849 = llvm.select %2848, %26, %32 : i1, i32 loc(#loc23)
    %2850 = llvm.xor %2846, %2849 : i32 loc(#loc23)
    %2851 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2852 = llvm.icmp "eq" %2851, %26 : i32 loc(#loc23)
    %2853 = llvm.select %2852, %26, %23 : i1, i32 loc(#loc23)
    %2854 = llvm.xor %2842, %2853 : i32 loc(#loc23)
    %2855 = llvm.select %2852, %26, %24 : i1, i32 loc(#loc23)
    %2856 = llvm.xor %2850, %2855 : i32 loc(#loc23)
    %2857 = llvm.mul %2854, %33 : i32 loc(#loc23)
    %2858 = llvm.add %2857, %26 : i32 loc(#loc23)
    %2859 = llvm.mul %2856, %30 : i32 loc(#loc23)
    %2860 = llvm.add %2858, %2859 : i32 loc(#loc23)
    %2861 = llvm.getelementptr inbounds %12[%2860] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2862 = llvm.insertelement %2617, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2862, %2861 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2863 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2864 = llvm.icmp "eq" %2863, %26 : i32 loc(#loc23)
    %2865 = llvm.select %2864, %26, %33 : i1, i32 loc(#loc23)
    %2866 = llvm.xor %26, %2865 : i32 loc(#loc23)
    %2867 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2868 = llvm.icmp "eq" %2867, %26 : i32 loc(#loc23)
    %2869 = llvm.select %2868, %26, %32 : i1, i32 loc(#loc23)
    %2870 = llvm.xor %2866, %2869 : i32 loc(#loc23)
    %2871 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2872 = llvm.icmp "eq" %2871, %26 : i32 loc(#loc23)
    %2873 = llvm.select %2872, %26, %24 : i1, i32 loc(#loc23)
    %2874 = llvm.xor %2870, %2873 : i32 loc(#loc23)
    %2875 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2876 = llvm.icmp "eq" %2875, %26 : i32 loc(#loc23)
    %2877 = llvm.select %2876, %26, %23 : i1, i32 loc(#loc23)
    %2878 = llvm.xor %2874, %2877 : i32 loc(#loc23)
    %2879 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2880 = llvm.icmp "eq" %2879, %26 : i32 loc(#loc23)
    %2881 = llvm.select %2880, %26, %22 : i1, i32 loc(#loc23)
    %2882 = llvm.xor %2878, %2881 : i32 loc(#loc23)
    %2883 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2884 = llvm.icmp "eq" %2883, %26 : i32 loc(#loc23)
    %2885 = llvm.select %2884, %26, %33 : i1, i32 loc(#loc23)
    %2886 = llvm.xor %19, %2885 : i32 loc(#loc23)
    %2887 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2888 = llvm.icmp "eq" %2887, %26 : i32 loc(#loc23)
    %2889 = llvm.select %2888, %26, %32 : i1, i32 loc(#loc23)
    %2890 = llvm.xor %2886, %2889 : i32 loc(#loc23)
    %2891 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2892 = llvm.icmp "eq" %2891, %26 : i32 loc(#loc23)
    %2893 = llvm.select %2892, %26, %23 : i1, i32 loc(#loc23)
    %2894 = llvm.xor %2882, %2893 : i32 loc(#loc23)
    %2895 = llvm.select %2892, %26, %24 : i1, i32 loc(#loc23)
    %2896 = llvm.xor %2890, %2895 : i32 loc(#loc23)
    %2897 = llvm.mul %2894, %33 : i32 loc(#loc23)
    %2898 = llvm.add %2897, %26 : i32 loc(#loc23)
    %2899 = llvm.mul %2896, %30 : i32 loc(#loc23)
    %2900 = llvm.add %2898, %2899 : i32 loc(#loc23)
    %2901 = llvm.getelementptr inbounds %12[%2900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2902 = llvm.insertelement %2618, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2902, %2901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %2903 = llvm.and %2621, %33 : i32 loc(#loc23)
    %2904 = llvm.icmp "eq" %2903, %26 : i32 loc(#loc23)
    %2905 = llvm.select %2904, %26, %33 : i1, i32 loc(#loc23)
    %2906 = llvm.xor %22, %2905 : i32 loc(#loc23)
    %2907 = llvm.and %2621, %32 : i32 loc(#loc23)
    %2908 = llvm.icmp "eq" %2907, %26 : i32 loc(#loc23)
    %2909 = llvm.select %2908, %26, %32 : i1, i32 loc(#loc23)
    %2910 = llvm.xor %2906, %2909 : i32 loc(#loc23)
    %2911 = llvm.and %2621, %24 : i32 loc(#loc23)
    %2912 = llvm.icmp "eq" %2911, %26 : i32 loc(#loc23)
    %2913 = llvm.select %2912, %26, %24 : i1, i32 loc(#loc23)
    %2914 = llvm.xor %2910, %2913 : i32 loc(#loc23)
    %2915 = llvm.and %2621, %23 : i32 loc(#loc23)
    %2916 = llvm.icmp "eq" %2915, %26 : i32 loc(#loc23)
    %2917 = llvm.select %2916, %26, %23 : i1, i32 loc(#loc23)
    %2918 = llvm.xor %2914, %2917 : i32 loc(#loc23)
    %2919 = llvm.and %2621, %22 : i32 loc(#loc23)
    %2920 = llvm.icmp "eq" %2919, %26 : i32 loc(#loc23)
    %2921 = llvm.select %2920, %26, %22 : i1, i32 loc(#loc23)
    %2922 = llvm.xor %2918, %2921 : i32 loc(#loc23)
    %2923 = llvm.and %2621, %30 : i32 loc(#loc23)
    %2924 = llvm.icmp "eq" %2923, %26 : i32 loc(#loc23)
    %2925 = llvm.select %2924, %26, %33 : i1, i32 loc(#loc23)
    %2926 = llvm.xor %18, %2925 : i32 loc(#loc23)
    %2927 = llvm.and %2622, %33 : i32 loc(#loc23)
    %2928 = llvm.icmp "eq" %2927, %26 : i32 loc(#loc23)
    %2929 = llvm.select %2928, %26, %32 : i1, i32 loc(#loc23)
    %2930 = llvm.xor %2926, %2929 : i32 loc(#loc23)
    %2931 = llvm.and %2622, %32 : i32 loc(#loc23)
    %2932 = llvm.icmp "eq" %2931, %26 : i32 loc(#loc23)
    %2933 = llvm.select %2932, %26, %23 : i1, i32 loc(#loc23)
    %2934 = llvm.xor %2922, %2933 : i32 loc(#loc23)
    %2935 = llvm.select %2932, %26, %24 : i1, i32 loc(#loc23)
    %2936 = llvm.xor %2930, %2935 : i32 loc(#loc23)
    %2937 = llvm.mul %2934, %33 : i32 loc(#loc23)
    %2938 = llvm.add %2937, %26 : i32 loc(#loc23)
    %2939 = llvm.mul %2936, %30 : i32 loc(#loc23)
    %2940 = llvm.add %2938, %2939 : i32 loc(#loc23)
    %2941 = llvm.getelementptr inbounds %12[%2940] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2942 = llvm.insertelement %2619, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %2942, %2941 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %2943 = rocdl.workitem.id.x : i32 loc(#loc23)
    %2944 = llvm.udiv %2943, %27 : i32 loc(#loc23)
    %2945 = llvm.urem %2943, %27 : i32 loc(#loc23)
    %2946 = llvm.urem %2944, %32 : i32 loc(#loc23)
    %2947 = llvm.urem %2946, %32 : i32 loc(#loc23)
    %2948 = llvm.urem %2944, %33 : i32 loc(#loc23)
    %2949 = llvm.mul %2947, %30 : i32 loc(#loc23)
    %2950 = llvm.urem %2945, %30 : i32 loc(#loc23)
    %2951 = llvm.icmp "uge" %2945, %30 : i32 loc(#loc23)
    %2952 = llvm.select %2951, %23, %26 : i1, i32 loc(#loc23)
    %2953 = llvm.add %2950, %26 : i32 loc(#loc23)
    %2954 = llvm.add %2953, %26 : i32 loc(#loc23)
    %2955 = llvm.add %2954, %2949 : i32 loc(#loc23)
    %2956 = llvm.add %2952, %26 : i32 loc(#loc23)
    %2957 = llvm.add %2956, %26 : i32 loc(#loc23)
    %2958 = llvm.add %2955, %26 : i32 loc(#loc23)
    %2959 = llvm.add %2957, %26 : i32 loc(#loc23)
    %2960 = llvm.urem %2945, %30 : i32 loc(#loc23)
    %2961 = llvm.icmp "uge" %2945, %30 : i32 loc(#loc23)
    %2962 = llvm.select %2961, %23, %26 : i1, i32 loc(#loc23)
    %2963 = llvm.add %2960, %26 : i32 loc(#loc23)
    %2964 = llvm.add %2963, %26 : i32 loc(#loc23)
    %2965 = llvm.add %2964, %2949 : i32 loc(#loc23)
    %2966 = llvm.add %2962, %22 : i32 loc(#loc23)
    %2967 = llvm.add %2966, %26 : i32 loc(#loc23)
    %2968 = llvm.add %2965, %26 : i32 loc(#loc23)
    %2969 = llvm.add %2967, %26 : i32 loc(#loc23)
    %2970 = llvm.udiv %2958, %24 : i32 loc(#loc23)
    %2971 = llvm.urem %2970, %24 : i32 loc(#loc23)
    %2972 = llvm.udiv %2959, %23 : i32 loc(#loc23)
    %2973 = llvm.xor %2972, %2971 : i32 loc(#loc23)
    %2974 = llvm.mul %2973, %23 : i32 loc(#loc23)
    %2975 = llvm.urem %2959, %23 : i32 loc(#loc23)
    %2976 = llvm.add %2974, %2975 : i32 loc(#loc23)
    %2977 = llvm.mul %2976, %33 : i32 loc(#loc23)
    %2978 = llvm.mul %2958, %30 : i32 loc(#loc23)
    %2979 = llvm.add %2977, %2978 : i32 loc(#loc23)
    %2980 = llvm.udiv %2968, %24 : i32 loc(#loc23)
    %2981 = llvm.urem %2980, %24 : i32 loc(#loc23)
    %2982 = llvm.udiv %2969, %23 : i32 loc(#loc23)
    %2983 = llvm.xor %2982, %2981 : i32 loc(#loc23)
    %2984 = llvm.mul %2983, %23 : i32 loc(#loc23)
    %2985 = llvm.urem %2969, %23 : i32 loc(#loc23)
    %2986 = llvm.add %2984, %2985 : i32 loc(#loc23)
    %2987 = llvm.mul %2986, %33 : i32 loc(#loc23)
    %2988 = llvm.mul %2968, %30 : i32 loc(#loc23)
    %2989 = llvm.add %2987, %2988 : i32 loc(#loc23)
    %2990 = llvm.mul %26, %30 : i32 loc(#loc23)
    %2991 = llvm.add %2990, %2979 : i32 loc(#loc23)
    %2992 = llvm.add %2990, %2989 : i32 loc(#loc23)
    %2993 = llvm.mul %26, %33 : i32 loc(#loc23)
    %2994 = llvm.sub %26, %2993 : i32 loc(#loc23)
    %2995 = llvm.getelementptr %12[%2994] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2996 = llvm.mul %26, %30 : i32 loc(#loc23)
    %2997 = llvm.sub %26, %2996 : i32 loc(#loc23)
    %2998 = llvm.getelementptr %2995[%2997] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %2999 = llvm.add %2948, %26 : i32 loc(#loc23)
    %3000 = llvm.mul %2999, %8 : i32 loc(#loc23)
    %3001 = llvm.add %2991, %3000 : i32 loc(#loc23)
    %3002 = llvm.getelementptr %2998[%3001] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %3003 = llvm.load %3002 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %3004 = llvm.extractelement %3003[%26 : i32] : vector<8xbf16> loc(#loc23)
    %3005 = llvm.extractelement %3003[%33 : i32] : vector<8xbf16> loc(#loc23)
    %3006 = llvm.extractelement %3003[%32 : i32] : vector<8xbf16> loc(#loc23)
    %3007 = llvm.extractelement %3003[%16 : i32] : vector<8xbf16> loc(#loc23)
    %3008 = llvm.extractelement %3003[%24 : i32] : vector<8xbf16> loc(#loc23)
    %3009 = llvm.extractelement %3003[%11 : i32] : vector<8xbf16> loc(#loc23)
    %3010 = llvm.extractelement %3003[%10 : i32] : vector<8xbf16> loc(#loc23)
    %3011 = llvm.extractelement %3003[%9 : i32] : vector<8xbf16> loc(#loc23)
    %3012 = llvm.add %2992, %3000 : i32 loc(#loc23)
    %3013 = llvm.getelementptr %2998[%3012] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %3014 = llvm.load %3013 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %3015 = llvm.extractelement %3014[%26 : i32] : vector<8xbf16> loc(#loc23)
    %3016 = llvm.extractelement %3014[%33 : i32] : vector<8xbf16> loc(#loc23)
    %3017 = llvm.extractelement %3014[%32 : i32] : vector<8xbf16> loc(#loc23)
    %3018 = llvm.extractelement %3014[%16 : i32] : vector<8xbf16> loc(#loc23)
    %3019 = llvm.extractelement %3014[%24 : i32] : vector<8xbf16> loc(#loc23)
    %3020 = llvm.extractelement %3014[%11 : i32] : vector<8xbf16> loc(#loc23)
    %3021 = llvm.extractelement %3014[%10 : i32] : vector<8xbf16> loc(#loc23)
    %3022 = llvm.extractelement %3014[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %3023 = llvm.extractvalue %469[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3024 = llvm.extractvalue %469[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3025 = llvm.extractvalue %469[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3026 = llvm.extractvalue %469[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3027 = llvm.extractvalue %469[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3028 = llvm.extractvalue %469[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3029 = llvm.extractvalue %469[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3030 = llvm.extractvalue %469[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %3031 = rocdl.workitem.id.x : i32 loc(#loc13)
    %3032 = llvm.urem %3031, %27 : i32 loc(#loc13)
    %3033 = llvm.udiv %3031, %27 : i32 loc(#loc13)
    %3034 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3035 = llvm.icmp "eq" %3034, %26 : i32 loc(#loc13)
    %3036 = llvm.select %3035, %26, %33 : i1, i32 loc(#loc13)
    %3037 = llvm.xor %26, %3036 : i32 loc(#loc13)
    %3038 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3039 = llvm.icmp "eq" %3038, %26 : i32 loc(#loc13)
    %3040 = llvm.select %3039, %26, %32 : i1, i32 loc(#loc13)
    %3041 = llvm.xor %3037, %3040 : i32 loc(#loc13)
    %3042 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3043 = llvm.icmp "eq" %3042, %26 : i32 loc(#loc13)
    %3044 = llvm.select %3043, %26, %24 : i1, i32 loc(#loc13)
    %3045 = llvm.xor %3041, %3044 : i32 loc(#loc13)
    %3046 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3047 = llvm.icmp "eq" %3046, %26 : i32 loc(#loc13)
    %3048 = llvm.select %3047, %26, %23 : i1, i32 loc(#loc13)
    %3049 = llvm.xor %3045, %3048 : i32 loc(#loc13)
    %3050 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3051 = llvm.icmp "eq" %3050, %26 : i32 loc(#loc13)
    %3052 = llvm.select %3051, %26, %22 : i1, i32 loc(#loc13)
    %3053 = llvm.xor %3049, %3052 : i32 loc(#loc13)
    %3054 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3055 = llvm.icmp "eq" %3054, %26 : i32 loc(#loc13)
    %3056 = llvm.select %3055, %26, %33 : i1, i32 loc(#loc13)
    %3057 = llvm.xor %26, %3056 : i32 loc(#loc13)
    %3058 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3059 = llvm.icmp "eq" %3058, %26 : i32 loc(#loc13)
    %3060 = llvm.select %3059, %26, %32 : i1, i32 loc(#loc13)
    %3061 = llvm.xor %3057, %3060 : i32 loc(#loc13)
    %3062 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3063 = llvm.icmp "eq" %3062, %26 : i32 loc(#loc13)
    %3064 = llvm.select %3063, %26, %23 : i1, i32 loc(#loc13)
    %3065 = llvm.xor %3053, %3064 : i32 loc(#loc13)
    %3066 = llvm.select %3063, %26, %24 : i1, i32 loc(#loc13)
    %3067 = llvm.xor %3061, %3066 : i32 loc(#loc13)
    %3068 = llvm.mul %3065, %33 : i32 loc(#loc13)
    %3069 = llvm.add %3068, %26 : i32 loc(#loc13)
    %3070 = llvm.mul %3067, %30 : i32 loc(#loc13)
    %3071 = llvm.add %3069, %3070 : i32 loc(#loc13)
    %3072 = llvm.getelementptr inbounds %12[%3071] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3073 = llvm.insertelement %3023, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3073, %3072 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3074 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3075 = llvm.icmp "eq" %3074, %26 : i32 loc(#loc13)
    %3076 = llvm.select %3075, %26, %33 : i1, i32 loc(#loc13)
    %3077 = llvm.xor %22, %3076 : i32 loc(#loc13)
    %3078 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3079 = llvm.icmp "eq" %3078, %26 : i32 loc(#loc13)
    %3080 = llvm.select %3079, %26, %32 : i1, i32 loc(#loc13)
    %3081 = llvm.xor %3077, %3080 : i32 loc(#loc13)
    %3082 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3083 = llvm.icmp "eq" %3082, %26 : i32 loc(#loc13)
    %3084 = llvm.select %3083, %26, %24 : i1, i32 loc(#loc13)
    %3085 = llvm.xor %3081, %3084 : i32 loc(#loc13)
    %3086 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3087 = llvm.icmp "eq" %3086, %26 : i32 loc(#loc13)
    %3088 = llvm.select %3087, %26, %23 : i1, i32 loc(#loc13)
    %3089 = llvm.xor %3085, %3088 : i32 loc(#loc13)
    %3090 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3091 = llvm.icmp "eq" %3090, %26 : i32 loc(#loc13)
    %3092 = llvm.select %3091, %26, %22 : i1, i32 loc(#loc13)
    %3093 = llvm.xor %3089, %3092 : i32 loc(#loc13)
    %3094 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3095 = llvm.icmp "eq" %3094, %26 : i32 loc(#loc13)
    %3096 = llvm.select %3095, %26, %33 : i1, i32 loc(#loc13)
    %3097 = llvm.xor %23, %3096 : i32 loc(#loc13)
    %3098 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3099 = llvm.icmp "eq" %3098, %26 : i32 loc(#loc13)
    %3100 = llvm.select %3099, %26, %32 : i1, i32 loc(#loc13)
    %3101 = llvm.xor %3097, %3100 : i32 loc(#loc13)
    %3102 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3103 = llvm.icmp "eq" %3102, %26 : i32 loc(#loc13)
    %3104 = llvm.select %3103, %26, %23 : i1, i32 loc(#loc13)
    %3105 = llvm.xor %3093, %3104 : i32 loc(#loc13)
    %3106 = llvm.select %3103, %26, %24 : i1, i32 loc(#loc13)
    %3107 = llvm.xor %3101, %3106 : i32 loc(#loc13)
    %3108 = llvm.mul %3105, %33 : i32 loc(#loc13)
    %3109 = llvm.add %3108, %26 : i32 loc(#loc13)
    %3110 = llvm.mul %3107, %30 : i32 loc(#loc13)
    %3111 = llvm.add %3109, %3110 : i32 loc(#loc13)
    %3112 = llvm.getelementptr inbounds %12[%3111] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3113 = llvm.insertelement %3024, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3113, %3112 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3114 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3115 = llvm.icmp "eq" %3114, %26 : i32 loc(#loc13)
    %3116 = llvm.select %3115, %26, %33 : i1, i32 loc(#loc13)
    %3117 = llvm.xor %26, %3116 : i32 loc(#loc13)
    %3118 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3119 = llvm.icmp "eq" %3118, %26 : i32 loc(#loc13)
    %3120 = llvm.select %3119, %26, %32 : i1, i32 loc(#loc13)
    %3121 = llvm.xor %3117, %3120 : i32 loc(#loc13)
    %3122 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3123 = llvm.icmp "eq" %3122, %26 : i32 loc(#loc13)
    %3124 = llvm.select %3123, %26, %24 : i1, i32 loc(#loc13)
    %3125 = llvm.xor %3121, %3124 : i32 loc(#loc13)
    %3126 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3127 = llvm.icmp "eq" %3126, %26 : i32 loc(#loc13)
    %3128 = llvm.select %3127, %26, %23 : i1, i32 loc(#loc13)
    %3129 = llvm.xor %3125, %3128 : i32 loc(#loc13)
    %3130 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3131 = llvm.icmp "eq" %3130, %26 : i32 loc(#loc13)
    %3132 = llvm.select %3131, %26, %22 : i1, i32 loc(#loc13)
    %3133 = llvm.xor %3129, %3132 : i32 loc(#loc13)
    %3134 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3135 = llvm.icmp "eq" %3134, %26 : i32 loc(#loc13)
    %3136 = llvm.select %3135, %26, %33 : i1, i32 loc(#loc13)
    %3137 = llvm.xor %22, %3136 : i32 loc(#loc13)
    %3138 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3139 = llvm.icmp "eq" %3138, %26 : i32 loc(#loc13)
    %3140 = llvm.select %3139, %26, %32 : i1, i32 loc(#loc13)
    %3141 = llvm.xor %3137, %3140 : i32 loc(#loc13)
    %3142 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3143 = llvm.icmp "eq" %3142, %26 : i32 loc(#loc13)
    %3144 = llvm.select %3143, %26, %23 : i1, i32 loc(#loc13)
    %3145 = llvm.xor %3133, %3144 : i32 loc(#loc13)
    %3146 = llvm.select %3143, %26, %24 : i1, i32 loc(#loc13)
    %3147 = llvm.xor %3141, %3146 : i32 loc(#loc13)
    %3148 = llvm.mul %3145, %33 : i32 loc(#loc13)
    %3149 = llvm.add %3148, %26 : i32 loc(#loc13)
    %3150 = llvm.mul %3147, %30 : i32 loc(#loc13)
    %3151 = llvm.add %3149, %3150 : i32 loc(#loc13)
    %3152 = llvm.getelementptr inbounds %12[%3151] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3153 = llvm.insertelement %3025, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3153, %3152 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3154 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3155 = llvm.icmp "eq" %3154, %26 : i32 loc(#loc13)
    %3156 = llvm.select %3155, %26, %33 : i1, i32 loc(#loc13)
    %3157 = llvm.xor %22, %3156 : i32 loc(#loc13)
    %3158 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3159 = llvm.icmp "eq" %3158, %26 : i32 loc(#loc13)
    %3160 = llvm.select %3159, %26, %32 : i1, i32 loc(#loc13)
    %3161 = llvm.xor %3157, %3160 : i32 loc(#loc13)
    %3162 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3163 = llvm.icmp "eq" %3162, %26 : i32 loc(#loc13)
    %3164 = llvm.select %3163, %26, %24 : i1, i32 loc(#loc13)
    %3165 = llvm.xor %3161, %3164 : i32 loc(#loc13)
    %3166 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3167 = llvm.icmp "eq" %3166, %26 : i32 loc(#loc13)
    %3168 = llvm.select %3167, %26, %23 : i1, i32 loc(#loc13)
    %3169 = llvm.xor %3165, %3168 : i32 loc(#loc13)
    %3170 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3171 = llvm.icmp "eq" %3170, %26 : i32 loc(#loc13)
    %3172 = llvm.select %3171, %26, %22 : i1, i32 loc(#loc13)
    %3173 = llvm.xor %3169, %3172 : i32 loc(#loc13)
    %3174 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3175 = llvm.icmp "eq" %3174, %26 : i32 loc(#loc13)
    %3176 = llvm.select %3175, %26, %33 : i1, i32 loc(#loc13)
    %3177 = llvm.xor %21, %3176 : i32 loc(#loc13)
    %3178 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3179 = llvm.icmp "eq" %3178, %26 : i32 loc(#loc13)
    %3180 = llvm.select %3179, %26, %32 : i1, i32 loc(#loc13)
    %3181 = llvm.xor %3177, %3180 : i32 loc(#loc13)
    %3182 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3183 = llvm.icmp "eq" %3182, %26 : i32 loc(#loc13)
    %3184 = llvm.select %3183, %26, %23 : i1, i32 loc(#loc13)
    %3185 = llvm.xor %3173, %3184 : i32 loc(#loc13)
    %3186 = llvm.select %3183, %26, %24 : i1, i32 loc(#loc13)
    %3187 = llvm.xor %3181, %3186 : i32 loc(#loc13)
    %3188 = llvm.mul %3185, %33 : i32 loc(#loc13)
    %3189 = llvm.add %3188, %26 : i32 loc(#loc13)
    %3190 = llvm.mul %3187, %30 : i32 loc(#loc13)
    %3191 = llvm.add %3189, %3190 : i32 loc(#loc13)
    %3192 = llvm.getelementptr inbounds %12[%3191] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3193 = llvm.insertelement %3026, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3193, %3192 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3194 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3195 = llvm.icmp "eq" %3194, %26 : i32 loc(#loc13)
    %3196 = llvm.select %3195, %26, %33 : i1, i32 loc(#loc13)
    %3197 = llvm.xor %26, %3196 : i32 loc(#loc13)
    %3198 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3199 = llvm.icmp "eq" %3198, %26 : i32 loc(#loc13)
    %3200 = llvm.select %3199, %26, %32 : i1, i32 loc(#loc13)
    %3201 = llvm.xor %3197, %3200 : i32 loc(#loc13)
    %3202 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3203 = llvm.icmp "eq" %3202, %26 : i32 loc(#loc13)
    %3204 = llvm.select %3203, %26, %24 : i1, i32 loc(#loc13)
    %3205 = llvm.xor %3201, %3204 : i32 loc(#loc13)
    %3206 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3207 = llvm.icmp "eq" %3206, %26 : i32 loc(#loc13)
    %3208 = llvm.select %3207, %26, %23 : i1, i32 loc(#loc13)
    %3209 = llvm.xor %3205, %3208 : i32 loc(#loc13)
    %3210 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3211 = llvm.icmp "eq" %3210, %26 : i32 loc(#loc13)
    %3212 = llvm.select %3211, %26, %22 : i1, i32 loc(#loc13)
    %3213 = llvm.xor %3209, %3212 : i32 loc(#loc13)
    %3214 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3215 = llvm.icmp "eq" %3214, %26 : i32 loc(#loc13)
    %3216 = llvm.select %3215, %26, %33 : i1, i32 loc(#loc13)
    %3217 = llvm.xor %30, %3216 : i32 loc(#loc13)
    %3218 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3219 = llvm.icmp "eq" %3218, %26 : i32 loc(#loc13)
    %3220 = llvm.select %3219, %26, %32 : i1, i32 loc(#loc13)
    %3221 = llvm.xor %3217, %3220 : i32 loc(#loc13)
    %3222 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3223 = llvm.icmp "eq" %3222, %26 : i32 loc(#loc13)
    %3224 = llvm.select %3223, %26, %23 : i1, i32 loc(#loc13)
    %3225 = llvm.xor %3213, %3224 : i32 loc(#loc13)
    %3226 = llvm.select %3223, %26, %24 : i1, i32 loc(#loc13)
    %3227 = llvm.xor %3221, %3226 : i32 loc(#loc13)
    %3228 = llvm.mul %3225, %33 : i32 loc(#loc13)
    %3229 = llvm.add %3228, %26 : i32 loc(#loc13)
    %3230 = llvm.mul %3227, %30 : i32 loc(#loc13)
    %3231 = llvm.add %3229, %3230 : i32 loc(#loc13)
    %3232 = llvm.getelementptr inbounds %12[%3231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3233 = llvm.insertelement %3027, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3233, %3232 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3234 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3235 = llvm.icmp "eq" %3234, %26 : i32 loc(#loc13)
    %3236 = llvm.select %3235, %26, %33 : i1, i32 loc(#loc13)
    %3237 = llvm.xor %22, %3236 : i32 loc(#loc13)
    %3238 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3239 = llvm.icmp "eq" %3238, %26 : i32 loc(#loc13)
    %3240 = llvm.select %3239, %26, %32 : i1, i32 loc(#loc13)
    %3241 = llvm.xor %3237, %3240 : i32 loc(#loc13)
    %3242 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3243 = llvm.icmp "eq" %3242, %26 : i32 loc(#loc13)
    %3244 = llvm.select %3243, %26, %24 : i1, i32 loc(#loc13)
    %3245 = llvm.xor %3241, %3244 : i32 loc(#loc13)
    %3246 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3247 = llvm.icmp "eq" %3246, %26 : i32 loc(#loc13)
    %3248 = llvm.select %3247, %26, %23 : i1, i32 loc(#loc13)
    %3249 = llvm.xor %3245, %3248 : i32 loc(#loc13)
    %3250 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3251 = llvm.icmp "eq" %3250, %26 : i32 loc(#loc13)
    %3252 = llvm.select %3251, %26, %22 : i1, i32 loc(#loc13)
    %3253 = llvm.xor %3249, %3252 : i32 loc(#loc13)
    %3254 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3255 = llvm.icmp "eq" %3254, %26 : i32 loc(#loc13)
    %3256 = llvm.select %3255, %26, %33 : i1, i32 loc(#loc13)
    %3257 = llvm.xor %20, %3256 : i32 loc(#loc13)
    %3258 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3259 = llvm.icmp "eq" %3258, %26 : i32 loc(#loc13)
    %3260 = llvm.select %3259, %26, %32 : i1, i32 loc(#loc13)
    %3261 = llvm.xor %3257, %3260 : i32 loc(#loc13)
    %3262 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3263 = llvm.icmp "eq" %3262, %26 : i32 loc(#loc13)
    %3264 = llvm.select %3263, %26, %23 : i1, i32 loc(#loc13)
    %3265 = llvm.xor %3253, %3264 : i32 loc(#loc13)
    %3266 = llvm.select %3263, %26, %24 : i1, i32 loc(#loc13)
    %3267 = llvm.xor %3261, %3266 : i32 loc(#loc13)
    %3268 = llvm.mul %3265, %33 : i32 loc(#loc13)
    %3269 = llvm.add %3268, %26 : i32 loc(#loc13)
    %3270 = llvm.mul %3267, %30 : i32 loc(#loc13)
    %3271 = llvm.add %3269, %3270 : i32 loc(#loc13)
    %3272 = llvm.getelementptr inbounds %12[%3271] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3273 = llvm.insertelement %3028, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3273, %3272 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3274 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3275 = llvm.icmp "eq" %3274, %26 : i32 loc(#loc13)
    %3276 = llvm.select %3275, %26, %33 : i1, i32 loc(#loc13)
    %3277 = llvm.xor %26, %3276 : i32 loc(#loc13)
    %3278 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3279 = llvm.icmp "eq" %3278, %26 : i32 loc(#loc13)
    %3280 = llvm.select %3279, %26, %32 : i1, i32 loc(#loc13)
    %3281 = llvm.xor %3277, %3280 : i32 loc(#loc13)
    %3282 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3283 = llvm.icmp "eq" %3282, %26 : i32 loc(#loc13)
    %3284 = llvm.select %3283, %26, %24 : i1, i32 loc(#loc13)
    %3285 = llvm.xor %3281, %3284 : i32 loc(#loc13)
    %3286 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3287 = llvm.icmp "eq" %3286, %26 : i32 loc(#loc13)
    %3288 = llvm.select %3287, %26, %23 : i1, i32 loc(#loc13)
    %3289 = llvm.xor %3285, %3288 : i32 loc(#loc13)
    %3290 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3291 = llvm.icmp "eq" %3290, %26 : i32 loc(#loc13)
    %3292 = llvm.select %3291, %26, %22 : i1, i32 loc(#loc13)
    %3293 = llvm.xor %3289, %3292 : i32 loc(#loc13)
    %3294 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3295 = llvm.icmp "eq" %3294, %26 : i32 loc(#loc13)
    %3296 = llvm.select %3295, %26, %33 : i1, i32 loc(#loc13)
    %3297 = llvm.xor %19, %3296 : i32 loc(#loc13)
    %3298 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3299 = llvm.icmp "eq" %3298, %26 : i32 loc(#loc13)
    %3300 = llvm.select %3299, %26, %32 : i1, i32 loc(#loc13)
    %3301 = llvm.xor %3297, %3300 : i32 loc(#loc13)
    %3302 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3303 = llvm.icmp "eq" %3302, %26 : i32 loc(#loc13)
    %3304 = llvm.select %3303, %26, %23 : i1, i32 loc(#loc13)
    %3305 = llvm.xor %3293, %3304 : i32 loc(#loc13)
    %3306 = llvm.select %3303, %26, %24 : i1, i32 loc(#loc13)
    %3307 = llvm.xor %3301, %3306 : i32 loc(#loc13)
    %3308 = llvm.mul %3305, %33 : i32 loc(#loc13)
    %3309 = llvm.add %3308, %26 : i32 loc(#loc13)
    %3310 = llvm.mul %3307, %30 : i32 loc(#loc13)
    %3311 = llvm.add %3309, %3310 : i32 loc(#loc13)
    %3312 = llvm.getelementptr inbounds %12[%3311] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3313 = llvm.insertelement %3029, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3313, %3312 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %3314 = llvm.and %3032, %33 : i32 loc(#loc13)
    %3315 = llvm.icmp "eq" %3314, %26 : i32 loc(#loc13)
    %3316 = llvm.select %3315, %26, %33 : i1, i32 loc(#loc13)
    %3317 = llvm.xor %22, %3316 : i32 loc(#loc13)
    %3318 = llvm.and %3032, %32 : i32 loc(#loc13)
    %3319 = llvm.icmp "eq" %3318, %26 : i32 loc(#loc13)
    %3320 = llvm.select %3319, %26, %32 : i1, i32 loc(#loc13)
    %3321 = llvm.xor %3317, %3320 : i32 loc(#loc13)
    %3322 = llvm.and %3032, %24 : i32 loc(#loc13)
    %3323 = llvm.icmp "eq" %3322, %26 : i32 loc(#loc13)
    %3324 = llvm.select %3323, %26, %24 : i1, i32 loc(#loc13)
    %3325 = llvm.xor %3321, %3324 : i32 loc(#loc13)
    %3326 = llvm.and %3032, %23 : i32 loc(#loc13)
    %3327 = llvm.icmp "eq" %3326, %26 : i32 loc(#loc13)
    %3328 = llvm.select %3327, %26, %23 : i1, i32 loc(#loc13)
    %3329 = llvm.xor %3325, %3328 : i32 loc(#loc13)
    %3330 = llvm.and %3032, %22 : i32 loc(#loc13)
    %3331 = llvm.icmp "eq" %3330, %26 : i32 loc(#loc13)
    %3332 = llvm.select %3331, %26, %22 : i1, i32 loc(#loc13)
    %3333 = llvm.xor %3329, %3332 : i32 loc(#loc13)
    %3334 = llvm.and %3032, %30 : i32 loc(#loc13)
    %3335 = llvm.icmp "eq" %3334, %26 : i32 loc(#loc13)
    %3336 = llvm.select %3335, %26, %33 : i1, i32 loc(#loc13)
    %3337 = llvm.xor %18, %3336 : i32 loc(#loc13)
    %3338 = llvm.and %3033, %33 : i32 loc(#loc13)
    %3339 = llvm.icmp "eq" %3338, %26 : i32 loc(#loc13)
    %3340 = llvm.select %3339, %26, %32 : i1, i32 loc(#loc13)
    %3341 = llvm.xor %3337, %3340 : i32 loc(#loc13)
    %3342 = llvm.and %3033, %32 : i32 loc(#loc13)
    %3343 = llvm.icmp "eq" %3342, %26 : i32 loc(#loc13)
    %3344 = llvm.select %3343, %26, %23 : i1, i32 loc(#loc13)
    %3345 = llvm.xor %3333, %3344 : i32 loc(#loc13)
    %3346 = llvm.select %3343, %26, %24 : i1, i32 loc(#loc13)
    %3347 = llvm.xor %3341, %3346 : i32 loc(#loc13)
    %3348 = llvm.mul %3345, %33 : i32 loc(#loc13)
    %3349 = llvm.add %3348, %26 : i32 loc(#loc13)
    %3350 = llvm.mul %3347, %30 : i32 loc(#loc13)
    %3351 = llvm.add %3349, %3350 : i32 loc(#loc13)
    %3352 = llvm.getelementptr inbounds %12[%3351] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3353 = llvm.insertelement %3030, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %3353, %3352 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %3354 = rocdl.workitem.id.x : i32 loc(#loc13)
    %3355 = llvm.udiv %3354, %27 : i32 loc(#loc13)
    %3356 = llvm.urem %3354, %27 : i32 loc(#loc13)
    %3357 = llvm.udiv %3355, %32 : i32 loc(#loc13)
    %3358 = llvm.urem %3357, %32 : i32 loc(#loc13)
    %3359 = llvm.urem %3358, %32 : i32 loc(#loc13)
    %3360 = llvm.urem %3355, %33 : i32 loc(#loc13)
    %3361 = llvm.mul %3359, %30 : i32 loc(#loc13)
    %3362 = llvm.urem %3356, %30 : i32 loc(#loc13)
    %3363 = llvm.icmp "uge" %3356, %30 : i32 loc(#loc13)
    %3364 = llvm.select %3363, %23, %26 : i1, i32 loc(#loc13)
    %3365 = llvm.add %3362, %26 : i32 loc(#loc13)
    %3366 = llvm.add %3365, %26 : i32 loc(#loc13)
    %3367 = llvm.add %3366, %3361 : i32 loc(#loc13)
    %3368 = llvm.add %3364, %26 : i32 loc(#loc13)
    %3369 = llvm.add %3368, %26 : i32 loc(#loc13)
    %3370 = llvm.add %3367, %26 : i32 loc(#loc13)
    %3371 = llvm.add %3369, %26 : i32 loc(#loc13)
    %3372 = llvm.urem %3356, %30 : i32 loc(#loc13)
    %3373 = llvm.icmp "uge" %3356, %30 : i32 loc(#loc13)
    %3374 = llvm.select %3373, %23, %26 : i1, i32 loc(#loc13)
    %3375 = llvm.add %3372, %26 : i32 loc(#loc13)
    %3376 = llvm.add %3375, %26 : i32 loc(#loc13)
    %3377 = llvm.add %3376, %3361 : i32 loc(#loc13)
    %3378 = llvm.add %3374, %22 : i32 loc(#loc13)
    %3379 = llvm.add %3378, %26 : i32 loc(#loc13)
    %3380 = llvm.add %3377, %26 : i32 loc(#loc13)
    %3381 = llvm.add %3379, %26 : i32 loc(#loc13)
    %3382 = llvm.udiv %3370, %24 : i32 loc(#loc13)
    %3383 = llvm.urem %3382, %24 : i32 loc(#loc13)
    %3384 = llvm.udiv %3371, %23 : i32 loc(#loc13)
    %3385 = llvm.xor %3384, %3383 : i32 loc(#loc13)
    %3386 = llvm.mul %3385, %23 : i32 loc(#loc13)
    %3387 = llvm.urem %3371, %23 : i32 loc(#loc13)
    %3388 = llvm.add %3386, %3387 : i32 loc(#loc13)
    %3389 = llvm.mul %3370, %30 : i32 loc(#loc13)
    %3390 = llvm.mul %3388, %33 : i32 loc(#loc13)
    %3391 = llvm.add %3389, %3390 : i32 loc(#loc13)
    %3392 = llvm.udiv %3380, %24 : i32 loc(#loc13)
    %3393 = llvm.urem %3392, %24 : i32 loc(#loc13)
    %3394 = llvm.udiv %3381, %23 : i32 loc(#loc13)
    %3395 = llvm.xor %3394, %3393 : i32 loc(#loc13)
    %3396 = llvm.mul %3395, %23 : i32 loc(#loc13)
    %3397 = llvm.urem %3381, %23 : i32 loc(#loc13)
    %3398 = llvm.add %3396, %3397 : i32 loc(#loc13)
    %3399 = llvm.mul %3380, %30 : i32 loc(#loc13)
    %3400 = llvm.mul %3398, %33 : i32 loc(#loc13)
    %3401 = llvm.add %3399, %3400 : i32 loc(#loc13)
    %3402 = llvm.mul %26, %30 : i32 loc(#loc13)
    %3403 = llvm.add %3402, %3391 : i32 loc(#loc13)
    %3404 = llvm.add %3402, %3401 : i32 loc(#loc13)
    %3405 = llvm.mul %26, %30 : i32 loc(#loc13)
    %3406 = llvm.sub %26, %3405 : i32 loc(#loc13)
    %3407 = llvm.getelementptr %12[%3406] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3408 = llvm.mul %26, %33 : i32 loc(#loc13)
    %3409 = llvm.sub %26, %3408 : i32 loc(#loc13)
    %3410 = llvm.getelementptr %3407[%3409] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3411 = llvm.add %3360, %26 : i32 loc(#loc13)
    %3412 = llvm.mul %3411, %8 : i32 loc(#loc13)
    %3413 = llvm.add %3403, %3412 : i32 loc(#loc13)
    %3414 = llvm.getelementptr %3410[%3413] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3415 = llvm.load %3414 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %3416 = llvm.extractelement %3415[%26 : i32] : vector<8xbf16> loc(#loc13)
    %3417 = llvm.extractelement %3415[%33 : i32] : vector<8xbf16> loc(#loc13)
    %3418 = llvm.extractelement %3415[%32 : i32] : vector<8xbf16> loc(#loc13)
    %3419 = llvm.extractelement %3415[%16 : i32] : vector<8xbf16> loc(#loc13)
    %3420 = llvm.extractelement %3415[%24 : i32] : vector<8xbf16> loc(#loc13)
    %3421 = llvm.extractelement %3415[%11 : i32] : vector<8xbf16> loc(#loc13)
    %3422 = llvm.extractelement %3415[%10 : i32] : vector<8xbf16> loc(#loc13)
    %3423 = llvm.extractelement %3415[%9 : i32] : vector<8xbf16> loc(#loc13)
    %3424 = llvm.add %3404, %3412 : i32 loc(#loc13)
    %3425 = llvm.getelementptr %3410[%3424] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %3426 = llvm.load %3425 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %3427 = llvm.extractelement %3426[%26 : i32] : vector<8xbf16> loc(#loc13)
    %3428 = llvm.extractelement %3426[%33 : i32] : vector<8xbf16> loc(#loc13)
    %3429 = llvm.extractelement %3426[%32 : i32] : vector<8xbf16> loc(#loc13)
    %3430 = llvm.extractelement %3426[%16 : i32] : vector<8xbf16> loc(#loc13)
    %3431 = llvm.extractelement %3426[%24 : i32] : vector<8xbf16> loc(#loc13)
    %3432 = llvm.extractelement %3426[%11 : i32] : vector<8xbf16> loc(#loc13)
    %3433 = llvm.extractelement %3426[%10 : i32] : vector<8xbf16> loc(#loc13)
    %3434 = llvm.extractelement %3426[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %1561, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %3435 = llvm.insertelement %3416, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3436 = llvm.insertelement %3417, %3435[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3437 = llvm.insertelement %3418, %3436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3438 = llvm.insertelement %3419, %3437[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3439 = llvm.insertelement %3420, %3438[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3440 = llvm.insertelement %3421, %3439[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3441 = llvm.insertelement %3422, %3440[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3442 = llvm.insertelement %3423, %3441[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3443 = llvm.extractelement %3442[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3444 = llvm.insertelement %3443, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3445 = llvm.extractelement %3442[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3446 = llvm.insertelement %3445, %3444[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3447 = llvm.extractelement %3442[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3448 = llvm.insertelement %3447, %3446[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3449 = llvm.extractelement %3442[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3450 = llvm.insertelement %3449, %3448[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3451 = llvm.extractelement %3442[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3452 = llvm.insertelement %3451, %3450[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3453 = llvm.extractelement %3442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3454 = llvm.insertelement %3453, %3452[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3455 = llvm.extractelement %3442[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3456 = llvm.insertelement %3455, %3454[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3457 = llvm.extractelement %3442[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3458 = llvm.insertelement %3457, %3456[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3459 = llvm.insertelement %3427, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3460 = llvm.insertelement %3428, %3459[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3461 = llvm.insertelement %3429, %3460[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3462 = llvm.insertelement %3430, %3461[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3463 = llvm.insertelement %3431, %3462[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3464 = llvm.insertelement %3432, %3463[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3465 = llvm.insertelement %3433, %3464[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3466 = llvm.insertelement %3434, %3465[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3467 = llvm.extractelement %3466[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3468 = llvm.insertelement %3467, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3469 = llvm.extractelement %3466[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3470 = llvm.insertelement %3469, %3468[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3471 = llvm.extractelement %3466[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3472 = llvm.insertelement %3471, %3470[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3473 = llvm.extractelement %3466[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3474 = llvm.insertelement %3473, %3472[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3475 = llvm.extractelement %3466[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3476 = llvm.insertelement %3475, %3474[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3477 = llvm.extractelement %3466[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3478 = llvm.insertelement %3477, %3476[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3479 = llvm.extractelement %3466[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3480 = llvm.insertelement %3479, %3478[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3481 = llvm.extractelement %3466[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3482 = llvm.insertelement %3481, %3480[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3483 = llvm.insertelement %3004, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3484 = llvm.insertelement %3005, %3483[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3485 = llvm.insertelement %3006, %3484[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3486 = llvm.insertelement %3007, %3485[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3487 = llvm.insertelement %3008, %3486[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3488 = llvm.insertelement %3009, %3487[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3489 = llvm.insertelement %3010, %3488[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3490 = llvm.insertelement %3011, %3489[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3491 = llvm.extractelement %3490[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3492 = llvm.insertelement %3491, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3493 = llvm.extractelement %3490[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3494 = llvm.insertelement %3493, %3492[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3495 = llvm.extractelement %3490[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3496 = llvm.insertelement %3495, %3494[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3497 = llvm.extractelement %3490[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3498 = llvm.insertelement %3497, %3496[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3499 = llvm.extractelement %3490[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3500 = llvm.insertelement %3499, %3498[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3501 = llvm.extractelement %3490[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3502 = llvm.insertelement %3501, %3500[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3503 = llvm.extractelement %3490[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3504 = llvm.insertelement %3503, %3502[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3505 = llvm.extractelement %3490[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3506 = llvm.insertelement %3505, %3504[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3507 = llvm.insertelement %3015, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3508 = llvm.insertelement %3016, %3507[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3509 = llvm.insertelement %3017, %3508[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3510 = llvm.insertelement %3018, %3509[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3511 = llvm.insertelement %3019, %3510[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3512 = llvm.insertelement %3020, %3511[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3513 = llvm.insertelement %3021, %3512[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3514 = llvm.insertelement %3022, %3513[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3515 = llvm.extractelement %3514[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3516 = llvm.insertelement %3515, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %3517 = llvm.extractelement %3514[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3518 = llvm.insertelement %3517, %3516[%33 : i32] : vector<8xbf16> loc(#loc24)
    %3519 = llvm.extractelement %3514[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3520 = llvm.insertelement %3519, %3518[%32 : i32] : vector<8xbf16> loc(#loc24)
    %3521 = llvm.extractelement %3514[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3522 = llvm.insertelement %3521, %3520[%16 : i32] : vector<8xbf16> loc(#loc24)
    %3523 = llvm.extractelement %3514[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3524 = llvm.insertelement %3523, %3522[%24 : i32] : vector<8xbf16> loc(#loc24)
    %3525 = llvm.extractelement %3514[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3526 = llvm.insertelement %3525, %3524[%11 : i32] : vector<8xbf16> loc(#loc24)
    %3527 = llvm.extractelement %3514[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3528 = llvm.insertelement %3527, %3526[%10 : i32] : vector<8xbf16> loc(#loc24)
    %3529 = llvm.extractelement %3514[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3530 = llvm.insertelement %3529, %3528[%9 : i32] : vector<8xbf16> loc(#loc24)
    %3531 = llvm.insertelement %2580, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %3532 = llvm.insertelement %2581, %3531[%33 : i32] : vector<16xf32> loc(#loc24)
    %3533 = llvm.insertelement %2582, %3532[%32 : i32] : vector<16xf32> loc(#loc24)
    %3534 = llvm.insertelement %2583, %3533[%16 : i32] : vector<16xf32> loc(#loc24)
    %3535 = llvm.insertelement %2584, %3534[%24 : i32] : vector<16xf32> loc(#loc24)
    %3536 = llvm.insertelement %2585, %3535[%11 : i32] : vector<16xf32> loc(#loc24)
    %3537 = llvm.insertelement %2586, %3536[%10 : i32] : vector<16xf32> loc(#loc24)
    %3538 = llvm.insertelement %2587, %3537[%9 : i32] : vector<16xf32> loc(#loc24)
    %3539 = llvm.insertelement %2588, %3538[%23 : i32] : vector<16xf32> loc(#loc24)
    %3540 = llvm.insertelement %2589, %3539[%15 : i32] : vector<16xf32> loc(#loc24)
    %3541 = llvm.insertelement %2590, %3540[%14 : i32] : vector<16xf32> loc(#loc24)
    %3542 = llvm.insertelement %2591, %3541[%13 : i32] : vector<16xf32> loc(#loc24)
    %3543 = llvm.insertelement %2592, %3542[%5 : i32] : vector<16xf32> loc(#loc24)
    %3544 = llvm.insertelement %2593, %3543[%4 : i32] : vector<16xf32> loc(#loc24)
    %3545 = llvm.insertelement %2594, %3544[%3 : i32] : vector<16xf32> loc(#loc24)
    %3546 = llvm.insertelement %2595, %3545[%2 : i32] : vector<16xf32> loc(#loc24)
    %3547 = rocdl.mfma.f32.32x32x16.bf16 %3506, %3458, %3546, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %3548 = rocdl.mfma.f32.32x32x16.bf16 %3530, %3482, %3547, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %3549 = llvm.extractelement %3548[%26 : i32] : vector<16xf32> loc(#loc24)
    %3550 = llvm.extractelement %3548[%33 : i32] : vector<16xf32> loc(#loc24)
    %3551 = llvm.extractelement %3548[%32 : i32] : vector<16xf32> loc(#loc24)
    %3552 = llvm.extractelement %3548[%16 : i32] : vector<16xf32> loc(#loc24)
    %3553 = llvm.extractelement %3548[%24 : i32] : vector<16xf32> loc(#loc24)
    %3554 = llvm.extractelement %3548[%11 : i32] : vector<16xf32> loc(#loc24)
    %3555 = llvm.extractelement %3548[%10 : i32] : vector<16xf32> loc(#loc24)
    %3556 = llvm.extractelement %3548[%9 : i32] : vector<16xf32> loc(#loc24)
    %3557 = llvm.extractelement %3548[%23 : i32] : vector<16xf32> loc(#loc24)
    %3558 = llvm.extractelement %3548[%15 : i32] : vector<16xf32> loc(#loc24)
    %3559 = llvm.extractelement %3548[%14 : i32] : vector<16xf32> loc(#loc24)
    %3560 = llvm.extractelement %3548[%13 : i32] : vector<16xf32> loc(#loc24)
    %3561 = llvm.extractelement %3548[%5 : i32] : vector<16xf32> loc(#loc24)
    %3562 = llvm.extractelement %3548[%4 : i32] : vector<16xf32> loc(#loc24)
    %3563 = llvm.extractelement %3548[%3 : i32] : vector<16xf32> loc(#loc24)
    %3564 = llvm.extractelement %3548[%2 : i32] : vector<16xf32> loc(#loc24)
    %3565 = llvm.insertvalue %3549, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3566 = llvm.insertvalue %3550, %3565[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3567 = llvm.insertvalue %3551, %3566[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3568 = llvm.insertvalue %3552, %3567[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3569 = llvm.insertvalue %3553, %3568[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3570 = llvm.insertvalue %3554, %3569[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3571 = llvm.insertvalue %3555, %3570[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3572 = llvm.insertvalue %3556, %3571[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3573 = llvm.insertvalue %3557, %3572[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3574 = llvm.insertvalue %3558, %3573[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3575 = llvm.insertvalue %3559, %3574[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3576 = llvm.insertvalue %3560, %3575[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3577 = llvm.insertvalue %3561, %3576[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3578 = llvm.insertvalue %3562, %3577[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3579 = llvm.insertvalue %3563, %3578[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %3580 = llvm.insertvalue %3564, %3579[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%3580 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%2611 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%3581: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %3582 = llvm.extractvalue %3581[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3583 = llvm.extractvalue %3581[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3584 = llvm.extractvalue %3581[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3585 = llvm.extractvalue %3581[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3586 = llvm.extractvalue %3581[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3587 = llvm.extractvalue %3581[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3588 = llvm.extractvalue %3581[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3589 = llvm.extractvalue %3581[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3590 = llvm.extractvalue %3581[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3591 = llvm.extractvalue %3581[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3592 = llvm.extractvalue %3581[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3593 = llvm.extractvalue %3581[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3594 = llvm.extractvalue %3581[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3595 = llvm.extractvalue %3581[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3596 = llvm.extractvalue %3581[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3597 = llvm.extractvalue %3581[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %3598 = llvm.select %1561, %3582, %2580 : i1, f32 loc(#loc9)
    %3599 = llvm.select %1561, %3583, %2581 : i1, f32 loc(#loc9)
    %3600 = llvm.select %1561, %3584, %2582 : i1, f32 loc(#loc9)
    %3601 = llvm.select %1561, %3585, %2583 : i1, f32 loc(#loc9)
    %3602 = llvm.select %1561, %3586, %2584 : i1, f32 loc(#loc9)
    %3603 = llvm.select %1561, %3587, %2585 : i1, f32 loc(#loc9)
    %3604 = llvm.select %1561, %3588, %2586 : i1, f32 loc(#loc9)
    %3605 = llvm.select %1561, %3589, %2587 : i1, f32 loc(#loc9)
    %3606 = llvm.select %1561, %3590, %2588 : i1, f32 loc(#loc9)
    %3607 = llvm.select %1561, %3591, %2589 : i1, f32 loc(#loc9)
    %3608 = llvm.select %1561, %3592, %2590 : i1, f32 loc(#loc9)
    %3609 = llvm.select %1561, %3593, %2591 : i1, f32 loc(#loc9)
    %3610 = llvm.select %1561, %3594, %2592 : i1, f32 loc(#loc9)
    %3611 = llvm.select %1561, %3595, %2593 : i1, f32 loc(#loc9)
    %3612 = llvm.select %1561, %3596, %2594 : i1, f32 loc(#loc9)
    %3613 = llvm.select %1561, %3597, %2595 : i1, f32 loc(#loc9)
    %3614 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %3615 = llvm.mul %438, %arg8 : i32 loc(#loc25)
    %3616 = llvm.getelementptr %arg0[%3614] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %3617 = llvm.getelementptr %3616[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %3618 = llvm.add %454, %3615 : i32 loc(#loc26)
    %3619 = llvm.add %455, %3615 : i32 loc(#loc26)
    %3620 = llvm.add %456, %3615 : i32 loc(#loc26)
    %3621 = llvm.add %457, %3615 : i32 loc(#loc26)
    %3622 = llvm.icmp "slt" %458, %arg3 : i32 loc(#loc27)
    %3623 = llvm.icmp "slt" %459, %arg4 : i32 loc(#loc28)
    %3624 = llvm.icmp "slt" %460, %arg4 : i32 loc(#loc28)
    %3625 = llvm.icmp "slt" %461, %arg4 : i32 loc(#loc28)
    %3626 = llvm.icmp "slt" %462, %arg4 : i32 loc(#loc28)
    %3627 = llvm.and %3622, %3623 : i1 loc(#loc29)
    %3628 = llvm.and %3622, %3624 : i1 loc(#loc29)
    %3629 = llvm.and %3622, %3625 : i1 loc(#loc29)
    %3630 = llvm.and %3622, %3626 : i1 loc(#loc29)
    %3631 = llvm.getelementptr %3617[%3618] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %3632 = llvm.getelementptr %3617[%3619] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %3633 = llvm.getelementptr %3617[%3620] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %3634 = llvm.getelementptr %3617[%3621] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %3635 = llvm.and %1, %3627 : i1 loc(#loc30)
    %3636 = llvm.insertelement %3598, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %3637 = llvm.insertelement %3599, %3636[%33 : i32] : vector<4xf32> loc(#loc30)
    %3638 = llvm.insertelement %3600, %3637[%32 : i32] : vector<4xf32> loc(#loc30)
    %3639 = llvm.insertelement %3601, %3638[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%3631, %3639, %3635) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %3640 = llvm.and %1, %3628 : i1 loc(#loc30)
    %3641 = llvm.insertelement %3602, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %3642 = llvm.insertelement %3603, %3641[%33 : i32] : vector<4xf32> loc(#loc30)
    %3643 = llvm.insertelement %3604, %3642[%32 : i32] : vector<4xf32> loc(#loc30)
    %3644 = llvm.insertelement %3605, %3643[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%3632, %3644, %3640) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %3645 = llvm.and %1, %3629 : i1 loc(#loc30)
    %3646 = llvm.insertelement %3606, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %3647 = llvm.insertelement %3607, %3646[%33 : i32] : vector<4xf32> loc(#loc30)
    %3648 = llvm.insertelement %3608, %3647[%32 : i32] : vector<4xf32> loc(#loc30)
    %3649 = llvm.insertelement %3609, %3648[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%3633, %3649, %3645) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %3650 = llvm.and %1, %3630 : i1 loc(#loc30)
    %3651 = llvm.insertelement %3610, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %3652 = llvm.insertelement %3611, %3651[%33 : i32] : vector<4xf32> loc(#loc30)
    %3653 = llvm.insertelement %3612, %3652[%32 : i32] : vector<4xf32> loc(#loc30)
    %3654 = llvm.insertelement %3613, %3653[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%3634, %3654, %3650) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before ConvertControlFlowToLLVMPass (convert-cf-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)


// -----// IR Dump Before ConvertBuiltinFuncToLLVM (convert-builtin-func-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)
#loc1 = loc(unknown)
#loc9 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26)
#loc13 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)
#loc21 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28)
#loc24 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 4096 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> attributes {libname = "", libpath = ""} loc(#loc32)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(!llvm.ptr<1>, vector<4xf32>, i1) attributes {libname = "", libpath = ""} loc(#loc33)
  llvm.func @matmul_abt_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg2: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg5: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg6: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg7: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0), %arg9: !llvm.ptr<1> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":41:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xf32> loc(#loc1)
    %1 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %2 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(14 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(13 : i32) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(12 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.undef : vector<16xf32> loc(#loc1)
    %7 = llvm.mlir.undef : vector<8xbf16> loc(#loc1)
    %8 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(7 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(6 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(5 : i32) : i32 loc(#loc1)
    %12 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc1)
    %13 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %14 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %15 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %16 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %17 = llvm.mlir.undef : vector<1xbf16> loc(#loc1)
    %18 = llvm.mlir.constant(56 : i32) : i32 loc(#loc1)
    %19 = llvm.mlir.constant(48 : i32) : i32 loc(#loc1)
    %20 = llvm.mlir.constant(40 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %22 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %23 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %24 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %25 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %26 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %27 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %28 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc1)
    %29 = llvm.mlir.constant(0.000000e+00 : bf16) : bf16 loc(#loc1)
    %30 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %31 = llvm.mlir.constant(31 : i32) : i32 loc(#loc1)
    %32 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %33 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %34 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc1)
    %35 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc1)
    %36 = llvm.insertvalue %35, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %37 = llvm.insertvalue %35, %36[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %38 = llvm.insertvalue %35, %37[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %39 = llvm.insertvalue %35, %38[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %40 = llvm.insertvalue %35, %39[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %41 = llvm.insertvalue %35, %40[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %42 = llvm.insertvalue %35, %41[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %43 = llvm.insertvalue %35, %42[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %44 = llvm.insertvalue %35, %43[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %45 = llvm.insertvalue %35, %44[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %46 = llvm.insertvalue %35, %45[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %47 = llvm.insertvalue %35, %46[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %48 = llvm.insertvalue %35, %47[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %49 = llvm.insertvalue %35, %48[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %50 = llvm.insertvalue %35, %49[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %51 = llvm.insertvalue %35, %50[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc1)
    %52 = rocdl.workgroup.id.x : i32 loc(#loc2)
    %53 = llvm.mul %52, %27 : i32 loc(#loc3)
    %54 = rocdl.workitem.id.x : i32 loc(#loc4)
    %55 = llvm.urem %54, %27 : i32 loc(#loc4)
    %56 = llvm.udiv %54, %27 : i32 loc(#loc4)
    %57 = llvm.and %55, %30 : i32 loc(#loc4)
    %58 = llvm.icmp "eq" %57, %26 : i32 loc(#loc4)
    %59 = llvm.select %58, %26, %33 : i1, i32 loc(#loc4)
    %60 = llvm.xor %26, %59 : i32 loc(#loc4)
    %61 = llvm.and %56, %33 : i32 loc(#loc4)
    %62 = llvm.icmp "eq" %61, %26 : i32 loc(#loc4)
    %63 = llvm.select %62, %26, %32 : i1, i32 loc(#loc4)
    %64 = llvm.xor %60, %63 : i32 loc(#loc4)
    %65 = llvm.and %56, %32 : i32 loc(#loc4)
    %66 = llvm.icmp "eq" %65, %26 : i32 loc(#loc4)
    %67 = llvm.select %66, %26, %24 : i1, i32 loc(#loc4)
    %68 = llvm.xor %64, %67 : i32 loc(#loc4)
    %69 = llvm.xor %68, %26 : i32 loc(#loc4)
    %70 = llvm.xor %68, %23 : i32 loc(#loc4)
    %71 = llvm.xor %68, %22 : i32 loc(#loc4)
    %72 = llvm.xor %68, %21 : i32 loc(#loc4)
    %73 = llvm.xor %68, %30 : i32 loc(#loc4)
    %74 = llvm.xor %68, %20 : i32 loc(#loc4)
    %75 = llvm.xor %68, %19 : i32 loc(#loc4)
    %76 = llvm.xor %68, %18 : i32 loc(#loc4)
    %77 = llvm.add %69, %25 : i32 loc(#loc4)
    %78 = llvm.add %70, %25 : i32 loc(#loc4)
    %79 = llvm.add %71, %25 : i32 loc(#loc4)
    %80 = llvm.add %72, %25 : i32 loc(#loc4)
    %81 = llvm.add %73, %25 : i32 loc(#loc4)
    %82 = llvm.add %74, %25 : i32 loc(#loc4)
    %83 = llvm.add %75, %25 : i32 loc(#loc4)
    %84 = llvm.add %76, %25 : i32 loc(#loc4)
    %85 = llvm.add %53, %77 : i32 loc(#loc5)
    %86 = llvm.add %53, %78 : i32 loc(#loc5)
    %87 = llvm.add %53, %79 : i32 loc(#loc5)
    %88 = llvm.add %53, %80 : i32 loc(#loc5)
    %89 = llvm.add %53, %81 : i32 loc(#loc5)
    %90 = llvm.add %53, %82 : i32 loc(#loc5)
    %91 = llvm.add %53, %83 : i32 loc(#loc5)
    %92 = llvm.add %53, %84 : i32 loc(#loc5)
    %93 = llvm.mul %53, %arg6 : i32 loc(#loc6)
    %94 = llvm.mul %77, %arg6 : i32 loc(#loc6)
    %95 = llvm.mul %78, %arg6 : i32 loc(#loc6)
    %96 = llvm.mul %79, %arg6 : i32 loc(#loc6)
    %97 = llvm.mul %80, %arg6 : i32 loc(#loc6)
    %98 = llvm.mul %81, %arg6 : i32 loc(#loc6)
    %99 = llvm.mul %82, %arg6 : i32 loc(#loc6)
    %100 = llvm.mul %83, %arg6 : i32 loc(#loc6)
    %101 = llvm.mul %84, %arg6 : i32 loc(#loc6)
    %102 = llvm.getelementptr %arg1[%93] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc6)
    %103 = llvm.and %55, %33 : i32 loc(#loc7)
    %104 = llvm.icmp "eq" %103, %26 : i32 loc(#loc7)
    %105 = llvm.select %104, %26, %33 : i1, i32 loc(#loc7)
    %106 = llvm.xor %26, %105 : i32 loc(#loc7)
    %107 = llvm.and %55, %32 : i32 loc(#loc7)
    %108 = llvm.icmp "eq" %107, %26 : i32 loc(#loc7)
    %109 = llvm.select %108, %26, %32 : i1, i32 loc(#loc7)
    %110 = llvm.xor %106, %109 : i32 loc(#loc7)
    %111 = llvm.and %55, %24 : i32 loc(#loc7)
    %112 = llvm.icmp "eq" %111, %26 : i32 loc(#loc7)
    %113 = llvm.select %112, %26, %24 : i1, i32 loc(#loc7)
    %114 = llvm.xor %110, %113 : i32 loc(#loc7)
    %115 = llvm.and %55, %23 : i32 loc(#loc7)
    %116 = llvm.icmp "eq" %115, %26 : i32 loc(#loc7)
    %117 = llvm.select %116, %26, %23 : i1, i32 loc(#loc7)
    %118 = llvm.xor %114, %117 : i32 loc(#loc7)
    %119 = llvm.and %55, %22 : i32 loc(#loc7)
    %120 = llvm.icmp "eq" %119, %26 : i32 loc(#loc7)
    %121 = llvm.select %120, %26, %22 : i1, i32 loc(#loc7)
    %122 = llvm.xor %118, %121 : i32 loc(#loc7)
    %123 = llvm.xor %122, %26 : i32 loc(#loc7)
    %124 = llvm.add %123, %25 : i32 loc(#loc7)
    %125 = llvm.add %124, %94 : i32 loc(#loc8)
    %126 = llvm.add %124, %95 : i32 loc(#loc8)
    %127 = llvm.add %124, %96 : i32 loc(#loc8)
    %128 = llvm.add %124, %97 : i32 loc(#loc8)
    %129 = llvm.add %124, %98 : i32 loc(#loc8)
    %130 = llvm.add %124, %99 : i32 loc(#loc8)
    %131 = llvm.add %124, %100 : i32 loc(#loc8)
    %132 = llvm.add %124, %101 : i32 loc(#loc8)
    %133 = llvm.icmp "sgt" %arg5, %26 : i32 loc(#loc9)
    %134 = llvm.icmp "slt" %85, %arg3 : i32 loc(#loc10)
    %135 = llvm.icmp "slt" %86, %arg3 : i32 loc(#loc10)
    %136 = llvm.icmp "slt" %87, %arg3 : i32 loc(#loc10)
    %137 = llvm.icmp "slt" %88, %arg3 : i32 loc(#loc10)
    %138 = llvm.icmp "slt" %89, %arg3 : i32 loc(#loc10)
    %139 = llvm.icmp "slt" %90, %arg3 : i32 loc(#loc10)
    %140 = llvm.icmp "slt" %91, %arg3 : i32 loc(#loc10)
    %141 = llvm.icmp "slt" %92, %arg3 : i32 loc(#loc10)
    %142 = llvm.icmp "slt" %124, %arg5 : i32 loc(#loc11)
    %143 = llvm.and %134, %142 : i1 loc(#loc12)
    %144 = llvm.and %135, %142 : i1 loc(#loc12)
    %145 = llvm.and %136, %142 : i1 loc(#loc12)
    %146 = llvm.and %137, %142 : i1 loc(#loc12)
    %147 = llvm.and %138, %142 : i1 loc(#loc12)
    %148 = llvm.and %139, %142 : i1 loc(#loc12)
    %149 = llvm.and %140, %142 : i1 loc(#loc12)
    %150 = llvm.and %141, %142 : i1 loc(#loc12)
    %151 = llvm.and %133, %143 : i1 loc(#loc9)
    %152 = llvm.and %133, %144 : i1 loc(#loc9)
    %153 = llvm.and %133, %145 : i1 loc(#loc9)
    %154 = llvm.and %133, %146 : i1 loc(#loc9)
    %155 = llvm.and %133, %147 : i1 loc(#loc9)
    %156 = llvm.and %133, %148 : i1 loc(#loc9)
    %157 = llvm.and %133, %149 : i1 loc(#loc9)
    %158 = llvm.and %133, %150 : i1 loc(#loc9)
    %159 = llvm.getelementptr %102[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %160 = llvm.getelementptr %102[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %161 = llvm.getelementptr %102[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %162 = llvm.getelementptr %102[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %163 = llvm.getelementptr %102[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %164 = llvm.getelementptr %102[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %165 = llvm.getelementptr %102[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %166 = llvm.getelementptr %102[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %167 = llvm.insertelement %29, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    %168 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%159, %151, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %169 = llvm.extractelement %168[%25 : i32] : vector<1xbf16> loc(#loc13)
    %170 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%160, %152, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %171 = llvm.extractelement %170[%25 : i32] : vector<1xbf16> loc(#loc13)
    %172 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%161, %153, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %173 = llvm.extractelement %172[%25 : i32] : vector<1xbf16> loc(#loc13)
    %174 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%162, %154, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %175 = llvm.extractelement %174[%25 : i32] : vector<1xbf16> loc(#loc13)
    %176 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%163, %155, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %177 = llvm.extractelement %176[%25 : i32] : vector<1xbf16> loc(#loc13)
    %178 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%164, %156, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %179 = llvm.extractelement %178[%25 : i32] : vector<1xbf16> loc(#loc13)
    %180 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%165, %157, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %181 = llvm.extractelement %180[%25 : i32] : vector<1xbf16> loc(#loc13)
    %182 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%166, %158, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %183 = llvm.extractelement %182[%25 : i32] : vector<1xbf16> loc(#loc13)
    %184 = llvm.insertvalue %169, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %185 = llvm.insertvalue %171, %184[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %186 = llvm.insertvalue %173, %185[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %187 = llvm.insertvalue %175, %186[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %188 = llvm.insertvalue %177, %187[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %189 = llvm.insertvalue %179, %188[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %190 = llvm.insertvalue %181, %189[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %191 = llvm.insertvalue %183, %190[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %192 = rocdl.workgroup.id.y : i32 loc(#loc14)
    %193 = llvm.mul %192, %27 : i32 loc(#loc15)
    %194 = llvm.add %193, %77 : i32 loc(#loc16)
    %195 = llvm.add %193, %78 : i32 loc(#loc16)
    %196 = llvm.add %193, %79 : i32 loc(#loc16)
    %197 = llvm.add %193, %80 : i32 loc(#loc16)
    %198 = llvm.add %193, %81 : i32 loc(#loc16)
    %199 = llvm.add %193, %82 : i32 loc(#loc16)
    %200 = llvm.add %193, %83 : i32 loc(#loc16)
    %201 = llvm.add %193, %84 : i32 loc(#loc16)
    %202 = llvm.mul %193, %arg7 : i32 loc(#loc17)
    %203 = llvm.mul %77, %arg7 : i32 loc(#loc17)
    %204 = llvm.mul %78, %arg7 : i32 loc(#loc17)
    %205 = llvm.mul %79, %arg7 : i32 loc(#loc17)
    %206 = llvm.mul %80, %arg7 : i32 loc(#loc17)
    %207 = llvm.mul %81, %arg7 : i32 loc(#loc17)
    %208 = llvm.mul %82, %arg7 : i32 loc(#loc17)
    %209 = llvm.mul %83, %arg7 : i32 loc(#loc17)
    %210 = llvm.mul %84, %arg7 : i32 loc(#loc17)
    %211 = llvm.getelementptr %arg2[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc17)
    %212 = llvm.add %124, %203 : i32 loc(#loc18)
    %213 = llvm.add %124, %204 : i32 loc(#loc18)
    %214 = llvm.add %124, %205 : i32 loc(#loc18)
    %215 = llvm.add %124, %206 : i32 loc(#loc18)
    %216 = llvm.add %124, %207 : i32 loc(#loc18)
    %217 = llvm.add %124, %208 : i32 loc(#loc18)
    %218 = llvm.add %124, %209 : i32 loc(#loc18)
    %219 = llvm.add %124, %210 : i32 loc(#loc18)
    %220 = llvm.icmp "slt" %194, %arg4 : i32 loc(#loc19)
    %221 = llvm.icmp "slt" %195, %arg4 : i32 loc(#loc19)
    %222 = llvm.icmp "slt" %196, %arg4 : i32 loc(#loc19)
    %223 = llvm.icmp "slt" %197, %arg4 : i32 loc(#loc19)
    %224 = llvm.icmp "slt" %198, %arg4 : i32 loc(#loc19)
    %225 = llvm.icmp "slt" %199, %arg4 : i32 loc(#loc19)
    %226 = llvm.icmp "slt" %200, %arg4 : i32 loc(#loc19)
    %227 = llvm.icmp "slt" %201, %arg4 : i32 loc(#loc19)
    %228 = llvm.and %220, %142 : i1 loc(#loc20)
    %229 = llvm.and %221, %142 : i1 loc(#loc20)
    %230 = llvm.and %222, %142 : i1 loc(#loc20)
    %231 = llvm.and %223, %142 : i1 loc(#loc20)
    %232 = llvm.and %224, %142 : i1 loc(#loc20)
    %233 = llvm.and %225, %142 : i1 loc(#loc20)
    %234 = llvm.and %226, %142 : i1 loc(#loc20)
    %235 = llvm.and %227, %142 : i1 loc(#loc20)
    %236 = llvm.and %133, %228 : i1 loc(#loc9)
    %237 = llvm.and %133, %229 : i1 loc(#loc9)
    %238 = llvm.and %133, %230 : i1 loc(#loc9)
    %239 = llvm.and %133, %231 : i1 loc(#loc9)
    %240 = llvm.and %133, %232 : i1 loc(#loc9)
    %241 = llvm.and %133, %233 : i1 loc(#loc9)
    %242 = llvm.and %133, %234 : i1 loc(#loc9)
    %243 = llvm.and %133, %235 : i1 loc(#loc9)
    %244 = llvm.getelementptr %211[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %245 = llvm.getelementptr %211[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %246 = llvm.getelementptr %211[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %247 = llvm.getelementptr %211[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %248 = llvm.getelementptr %211[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %249 = llvm.getelementptr %211[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %250 = llvm.getelementptr %211[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %251 = llvm.getelementptr %211[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %252 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%244, %236, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %253 = llvm.extractelement %252[%25 : i32] : vector<1xbf16> loc(#loc21)
    %254 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%245, %237, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %255 = llvm.extractelement %254[%25 : i32] : vector<1xbf16> loc(#loc21)
    %256 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%246, %238, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %257 = llvm.extractelement %256[%25 : i32] : vector<1xbf16> loc(#loc21)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%247, %239, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %259 = llvm.extractelement %258[%25 : i32] : vector<1xbf16> loc(#loc21)
    %260 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%248, %240, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %261 = llvm.extractelement %260[%25 : i32] : vector<1xbf16> loc(#loc21)
    %262 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%249, %241, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %263 = llvm.extractelement %262[%25 : i32] : vector<1xbf16> loc(#loc21)
    %264 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%250, %242, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %265 = llvm.extractelement %264[%25 : i32] : vector<1xbf16> loc(#loc21)
    %266 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%251, %243, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %267 = llvm.extractelement %266[%25 : i32] : vector<1xbf16> loc(#loc21)
    %268 = llvm.insertvalue %253, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %269 = llvm.insertvalue %255, %268[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %270 = llvm.insertvalue %257, %269[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %271 = llvm.insertvalue %259, %270[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %272 = llvm.insertvalue %261, %271[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %273 = llvm.insertvalue %263, %272[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %274 = llvm.insertvalue %265, %273[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %275 = llvm.insertvalue %267, %274[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %276 = llvm.add %124, %30 : i32 loc(#loc22)
    %277 = llvm.getelementptr %102[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %278 = llvm.icmp "sgt" %arg5, %30 : i32 loc(#loc9)
    %279 = llvm.icmp "slt" %276, %arg5 : i32 loc(#loc11)
    %280 = llvm.and %134, %279 : i1 loc(#loc12)
    %281 = llvm.and %135, %279 : i1 loc(#loc12)
    %282 = llvm.and %136, %279 : i1 loc(#loc12)
    %283 = llvm.and %137, %279 : i1 loc(#loc12)
    %284 = llvm.and %138, %279 : i1 loc(#loc12)
    %285 = llvm.and %139, %279 : i1 loc(#loc12)
    %286 = llvm.and %140, %279 : i1 loc(#loc12)
    %287 = llvm.and %141, %279 : i1 loc(#loc12)
    %288 = llvm.and %278, %280 : i1 loc(#loc9)
    %289 = llvm.and %278, %281 : i1 loc(#loc9)
    %290 = llvm.and %278, %282 : i1 loc(#loc9)
    %291 = llvm.and %278, %283 : i1 loc(#loc9)
    %292 = llvm.and %278, %284 : i1 loc(#loc9)
    %293 = llvm.and %278, %285 : i1 loc(#loc9)
    %294 = llvm.and %278, %286 : i1 loc(#loc9)
    %295 = llvm.and %278, %287 : i1 loc(#loc9)
    %296 = llvm.getelementptr %277[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %297 = llvm.getelementptr %277[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %298 = llvm.getelementptr %277[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %299 = llvm.getelementptr %277[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %300 = llvm.getelementptr %277[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %301 = llvm.getelementptr %277[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %302 = llvm.getelementptr %277[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %303 = llvm.getelementptr %277[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%296, %288, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %305 = llvm.extractelement %304[%25 : i32] : vector<1xbf16> loc(#loc13)
    %306 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%297, %289, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %307 = llvm.extractelement %306[%25 : i32] : vector<1xbf16> loc(#loc13)
    %308 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%298, %290, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %309 = llvm.extractelement %308[%25 : i32] : vector<1xbf16> loc(#loc13)
    %310 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%299, %291, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %311 = llvm.extractelement %310[%25 : i32] : vector<1xbf16> loc(#loc13)
    %312 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%300, %292, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %313 = llvm.extractelement %312[%25 : i32] : vector<1xbf16> loc(#loc13)
    %314 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%301, %293, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %315 = llvm.extractelement %314[%25 : i32] : vector<1xbf16> loc(#loc13)
    %316 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%302, %294, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %317 = llvm.extractelement %316[%25 : i32] : vector<1xbf16> loc(#loc13)
    %318 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%303, %295, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %319 = llvm.extractelement %318[%25 : i32] : vector<1xbf16> loc(#loc13)
    %320 = llvm.insertvalue %305, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %321 = llvm.insertvalue %307, %320[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %322 = llvm.insertvalue %309, %321[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %323 = llvm.insertvalue %311, %322[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %324 = llvm.insertvalue %313, %323[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %325 = llvm.insertvalue %315, %324[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %326 = llvm.insertvalue %317, %325[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %327 = llvm.insertvalue %319, %326[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %328 = llvm.getelementptr %211[32] : (!llvm.ptr<1>) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %329 = llvm.and %220, %279 : i1 loc(#loc20)
    %330 = llvm.and %221, %279 : i1 loc(#loc20)
    %331 = llvm.and %222, %279 : i1 loc(#loc20)
    %332 = llvm.and %223, %279 : i1 loc(#loc20)
    %333 = llvm.and %224, %279 : i1 loc(#loc20)
    %334 = llvm.and %225, %279 : i1 loc(#loc20)
    %335 = llvm.and %226, %279 : i1 loc(#loc20)
    %336 = llvm.and %227, %279 : i1 loc(#loc20)
    %337 = llvm.and %278, %329 : i1 loc(#loc9)
    %338 = llvm.and %278, %330 : i1 loc(#loc9)
    %339 = llvm.and %278, %331 : i1 loc(#loc9)
    %340 = llvm.and %278, %332 : i1 loc(#loc9)
    %341 = llvm.and %278, %333 : i1 loc(#loc9)
    %342 = llvm.and %278, %334 : i1 loc(#loc9)
    %343 = llvm.and %278, %335 : i1 loc(#loc9)
    %344 = llvm.and %278, %336 : i1 loc(#loc9)
    %345 = llvm.getelementptr %328[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %346 = llvm.getelementptr %328[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %347 = llvm.getelementptr %328[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %348 = llvm.getelementptr %328[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %349 = llvm.getelementptr %328[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %350 = llvm.getelementptr %328[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %351 = llvm.getelementptr %328[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %352 = llvm.getelementptr %328[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %353 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%345, %337, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %354 = llvm.extractelement %353[%25 : i32] : vector<1xbf16> loc(#loc21)
    %355 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%346, %338, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %356 = llvm.extractelement %355[%25 : i32] : vector<1xbf16> loc(#loc21)
    %357 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%347, %339, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %358 = llvm.extractelement %357[%25 : i32] : vector<1xbf16> loc(#loc21)
    %359 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%348, %340, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %360 = llvm.extractelement %359[%25 : i32] : vector<1xbf16> loc(#loc21)
    %361 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%349, %341, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %362 = llvm.extractelement %361[%25 : i32] : vector<1xbf16> loc(#loc21)
    %363 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%350, %342, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %364 = llvm.extractelement %363[%25 : i32] : vector<1xbf16> loc(#loc21)
    %365 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%351, %343, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %366 = llvm.extractelement %365[%25 : i32] : vector<1xbf16> loc(#loc21)
    %367 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%352, %344, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %368 = llvm.extractelement %367[%25 : i32] : vector<1xbf16> loc(#loc21)
    %369 = llvm.insertvalue %354, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %370 = llvm.insertvalue %356, %369[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %371 = llvm.insertvalue %358, %370[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %372 = llvm.insertvalue %360, %371[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %373 = llvm.insertvalue %362, %372[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %374 = llvm.insertvalue %364, %373[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %375 = llvm.insertvalue %366, %374[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %376 = llvm.insertvalue %368, %375[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %377 = llvm.select %66, %26, %30 : i1, i32 loc(#loc4)
    %378 = llvm.xor %122, %377 : i32 loc(#loc4)
    %379 = llvm.xor %378, %26 : i32 loc(#loc4)
    %380 = llvm.add %379, %25 : i32 loc(#loc4)
    %381 = llvm.select %58, %26, %24 : i1, i32 loc(#loc4)
    %382 = llvm.xor %26, %381 : i32 loc(#loc4)
    %383 = llvm.select %62, %26, %30 : i1, i32 loc(#loc4)
    %384 = llvm.xor %382, %383 : i32 loc(#loc4)
    %385 = llvm.xor %384, %26 : i32 loc(#loc4)
    %386 = llvm.xor %384, %23 : i32 loc(#loc4)
    %387 = llvm.xor %384, %22 : i32 loc(#loc4)
    %388 = llvm.xor %384, %21 : i32 loc(#loc4)
    %389 = llvm.add %385, %25 : i32 loc(#loc4)
    %390 = llvm.add %386, %25 : i32 loc(#loc4)
    %391 = llvm.add %387, %25 : i32 loc(#loc4)
    %392 = llvm.add %388, %25 : i32 loc(#loc4)
    %393 = llvm.add %53, %380 : i32 loc(#loc5)
    %394 = llvm.add %193, %389 : i32 loc(#loc16)
    %395 = llvm.add %193, %390 : i32 loc(#loc16)
    %396 = llvm.add %193, %391 : i32 loc(#loc16)
    %397 = llvm.add %193, %392 : i32 loc(#loc16)
    %398 = llvm.sub %arg5, %27 : i32 loc(#loc9)
    llvm.br ^bb1(%26, %51, %275, %376, %191, %327 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb1(%399: i32 loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":58:26), %400: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(unknown), %401: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %402: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":73:28), %403: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25), %404: !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":65:25)):  // 2 preds: ^bb0, ^bb2
    %405 = llvm.icmp "slt" %399, %398 : i32 loc(#loc9)
    llvm.cond_br %405, ^bb2, ^bb3 loc(#loc9)
  ^bb2:  // pred: ^bb1
    %406 = llvm.add %399, %27 : i32 loc(#loc9)
    %407 = llvm.add %406, %124 : i32 loc(#loc22)
    %408 = llvm.getelementptr %102[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc8)
    %409 = llvm.icmp "slt" %407, %arg5 : i32 loc(#loc11)
    %410 = llvm.and %134, %409 : i1 loc(#loc12)
    %411 = llvm.and %135, %409 : i1 loc(#loc12)
    %412 = llvm.and %136, %409 : i1 loc(#loc12)
    %413 = llvm.and %137, %409 : i1 loc(#loc12)
    %414 = llvm.and %138, %409 : i1 loc(#loc12)
    %415 = llvm.and %139, %409 : i1 loc(#loc12)
    %416 = llvm.and %140, %409 : i1 loc(#loc12)
    %417 = llvm.and %141, %409 : i1 loc(#loc12)
    %418 = llvm.getelementptr %408[%125] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %419 = llvm.getelementptr %408[%126] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %420 = llvm.getelementptr %408[%127] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %421 = llvm.getelementptr %408[%128] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %422 = llvm.getelementptr %408[%129] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %423 = llvm.getelementptr %408[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %424 = llvm.getelementptr %408[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %425 = llvm.getelementptr %408[%132] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc13)
    %426 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%418, %410, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %427 = llvm.extractelement %426[%25 : i32] : vector<1xbf16> loc(#loc13)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%419, %411, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %429 = llvm.extractelement %428[%25 : i32] : vector<1xbf16> loc(#loc13)
    %430 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%420, %412, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %431 = llvm.extractelement %430[%25 : i32] : vector<1xbf16> loc(#loc13)
    %432 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%421, %413, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %433 = llvm.extractelement %432[%25 : i32] : vector<1xbf16> loc(#loc13)
    %434 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%422, %414, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %435 = llvm.extractelement %434[%25 : i32] : vector<1xbf16> loc(#loc13)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%423, %415, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %437 = llvm.extractelement %436[%25 : i32] : vector<1xbf16> loc(#loc13)
    %438 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%424, %416, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %439 = llvm.extractelement %438[%25 : i32] : vector<1xbf16> loc(#loc13)
    %440 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%425, %417, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc13)
    %441 = llvm.extractelement %440[%25 : i32] : vector<1xbf16> loc(#loc13)
    %442 = llvm.insertvalue %427, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %443 = llvm.insertvalue %429, %442[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %444 = llvm.insertvalue %431, %443[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %445 = llvm.insertvalue %433, %444[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %446 = llvm.insertvalue %435, %445[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %447 = llvm.insertvalue %437, %446[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %448 = llvm.insertvalue %439, %447[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %449 = llvm.insertvalue %441, %448[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %450 = llvm.getelementptr %211[%406] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc18)
    %451 = llvm.and %220, %409 : i1 loc(#loc20)
    %452 = llvm.and %221, %409 : i1 loc(#loc20)
    %453 = llvm.and %222, %409 : i1 loc(#loc20)
    %454 = llvm.and %223, %409 : i1 loc(#loc20)
    %455 = llvm.and %224, %409 : i1 loc(#loc20)
    %456 = llvm.and %225, %409 : i1 loc(#loc20)
    %457 = llvm.and %226, %409 : i1 loc(#loc20)
    %458 = llvm.and %227, %409 : i1 loc(#loc20)
    %459 = llvm.getelementptr %450[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %460 = llvm.getelementptr %450[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %461 = llvm.getelementptr %450[%214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %462 = llvm.getelementptr %450[%215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %463 = llvm.getelementptr %450[%216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %464 = llvm.getelementptr %450[%217] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %465 = llvm.getelementptr %450[%218] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %466 = llvm.getelementptr %450[%219] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc21)
    %467 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%459, %451, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %468 = llvm.extractelement %467[%25 : i32] : vector<1xbf16> loc(#loc21)
    %469 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%460, %452, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %470 = llvm.extractelement %469[%25 : i32] : vector<1xbf16> loc(#loc21)
    %471 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%461, %453, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %472 = llvm.extractelement %471[%25 : i32] : vector<1xbf16> loc(#loc21)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%462, %454, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %474 = llvm.extractelement %473[%25 : i32] : vector<1xbf16> loc(#loc21)
    %475 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%463, %455, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %476 = llvm.extractelement %475[%25 : i32] : vector<1xbf16> loc(#loc21)
    %477 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%464, %456, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %478 = llvm.extractelement %477[%25 : i32] : vector<1xbf16> loc(#loc21)
    %479 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%465, %457, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %480 = llvm.extractelement %479[%25 : i32] : vector<1xbf16> loc(#loc21)
    %481 = llvm.call @"__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_"(%466, %458, %167) : (!llvm.ptr<1>, i1, vector<1xbf16>) -> vector<1xbf16> loc(#loc21)
    %482 = llvm.extractelement %481[%25 : i32] : vector<1xbf16> loc(#loc21)
    %483 = llvm.insertvalue %468, %28[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %484 = llvm.insertvalue %470, %483[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %485 = llvm.insertvalue %472, %484[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %486 = llvm.insertvalue %474, %485[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %487 = llvm.insertvalue %476, %486[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %488 = llvm.insertvalue %478, %487[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %489 = llvm.insertvalue %480, %488[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    %490 = llvm.insertvalue %482, %489[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc21)
    rocdl.barrier loc(#loc23)
    %491 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %492 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %493 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %494 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %495 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %496 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %497 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %498 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %499 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %500 = llvm.xor %122, %499 : i32 loc(#loc23)
    %501 = llvm.mul %500, %33 : i32 loc(#loc23)
    %502 = llvm.add %501, %26 : i32 loc(#loc23)
    %503 = llvm.mul %68, %30 : i32 loc(#loc23)
    %504 = llvm.add %502, %503 : i32 loc(#loc23)
    %505 = llvm.getelementptr inbounds %12[%504] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %506 = llvm.insertelement %491, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %506, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %507 = llvm.xor %22, %105 : i32 loc(#loc23)
    %508 = llvm.xor %507, %109 : i32 loc(#loc23)
    %509 = llvm.xor %508, %113 : i32 loc(#loc23)
    %510 = llvm.xor %509, %117 : i32 loc(#loc23)
    %511 = llvm.xor %510, %121 : i32 loc(#loc23)
    %512 = llvm.xor %23, %59 : i32 loc(#loc23)
    %513 = llvm.xor %512, %63 : i32 loc(#loc23)
    %514 = llvm.xor %511, %499 : i32 loc(#loc23)
    %515 = llvm.xor %513, %67 : i32 loc(#loc23)
    %516 = llvm.mul %514, %33 : i32 loc(#loc23)
    %517 = llvm.add %516, %26 : i32 loc(#loc23)
    %518 = llvm.mul %515, %30 : i32 loc(#loc23)
    %519 = llvm.add %517, %518 : i32 loc(#loc23)
    %520 = llvm.getelementptr inbounds %12[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %521 = llvm.insertelement %492, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %521, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %522 = llvm.xor %22, %59 : i32 loc(#loc23)
    %523 = llvm.xor %522, %63 : i32 loc(#loc23)
    %524 = llvm.xor %523, %67 : i32 loc(#loc23)
    %525 = llvm.mul %524, %30 : i32 loc(#loc23)
    %526 = llvm.add %502, %525 : i32 loc(#loc23)
    %527 = llvm.getelementptr inbounds %12[%526] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %528 = llvm.insertelement %493, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %528, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %529 = llvm.xor %21, %59 : i32 loc(#loc23)
    %530 = llvm.xor %529, %63 : i32 loc(#loc23)
    %531 = llvm.xor %530, %67 : i32 loc(#loc23)
    %532 = llvm.mul %531, %30 : i32 loc(#loc23)
    %533 = llvm.add %517, %532 : i32 loc(#loc23)
    %534 = llvm.getelementptr inbounds %12[%533] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %535 = llvm.insertelement %494, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %535, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %536 = llvm.xor %30, %59 : i32 loc(#loc23)
    %537 = llvm.xor %536, %63 : i32 loc(#loc23)
    %538 = llvm.xor %537, %67 : i32 loc(#loc23)
    %539 = llvm.mul %538, %30 : i32 loc(#loc23)
    %540 = llvm.add %502, %539 : i32 loc(#loc23)
    %541 = llvm.getelementptr inbounds %12[%540] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %542 = llvm.insertelement %495, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %542, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %543 = llvm.xor %20, %59 : i32 loc(#loc23)
    %544 = llvm.xor %543, %63 : i32 loc(#loc23)
    %545 = llvm.xor %544, %67 : i32 loc(#loc23)
    %546 = llvm.mul %545, %30 : i32 loc(#loc23)
    %547 = llvm.add %517, %546 : i32 loc(#loc23)
    %548 = llvm.getelementptr inbounds %12[%547] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %549 = llvm.insertelement %496, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %549, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %550 = llvm.xor %19, %59 : i32 loc(#loc23)
    %551 = llvm.xor %550, %63 : i32 loc(#loc23)
    %552 = llvm.xor %551, %67 : i32 loc(#loc23)
    %553 = llvm.mul %552, %30 : i32 loc(#loc23)
    %554 = llvm.add %502, %553 : i32 loc(#loc23)
    %555 = llvm.getelementptr inbounds %12[%554] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %556 = llvm.insertelement %497, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %556, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %557 = llvm.xor %18, %59 : i32 loc(#loc23)
    %558 = llvm.xor %557, %63 : i32 loc(#loc23)
    %559 = llvm.xor %558, %67 : i32 loc(#loc23)
    %560 = llvm.mul %559, %30 : i32 loc(#loc23)
    %561 = llvm.add %517, %560 : i32 loc(#loc23)
    %562 = llvm.getelementptr inbounds %12[%561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %563 = llvm.insertelement %498, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %563, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %564 = llvm.urem %56, %32 : i32 loc(#loc23)
    %565 = llvm.urem %564, %32 : i32 loc(#loc23)
    %566 = llvm.urem %56, %33 : i32 loc(#loc23)
    %567 = llvm.mul %565, %30 : i32 loc(#loc23)
    %568 = llvm.urem %55, %30 : i32 loc(#loc23)
    %569 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %570 = llvm.select %569, %23, %26 : i1, i32 loc(#loc23)
    %571 = llvm.add %568, %26 : i32 loc(#loc23)
    %572 = llvm.add %571, %26 : i32 loc(#loc23)
    %573 = llvm.add %572, %567 : i32 loc(#loc23)
    %574 = llvm.add %570, %26 : i32 loc(#loc23)
    %575 = llvm.add %574, %26 : i32 loc(#loc23)
    %576 = llvm.add %573, %26 : i32 loc(#loc23)
    %577 = llvm.add %575, %26 : i32 loc(#loc23)
    %578 = llvm.add %570, %22 : i32 loc(#loc23)
    %579 = llvm.add %578, %26 : i32 loc(#loc23)
    %580 = llvm.add %579, %26 : i32 loc(#loc23)
    %581 = llvm.udiv %576, %24 : i32 loc(#loc23)
    %582 = llvm.urem %581, %24 : i32 loc(#loc23)
    %583 = llvm.udiv %577, %23 : i32 loc(#loc23)
    %584 = llvm.xor %583, %582 : i32 loc(#loc23)
    %585 = llvm.mul %584, %23 : i32 loc(#loc23)
    %586 = llvm.urem %577, %23 : i32 loc(#loc23)
    %587 = llvm.add %585, %586 : i32 loc(#loc23)
    %588 = llvm.mul %587, %33 : i32 loc(#loc23)
    %589 = llvm.mul %576, %30 : i32 loc(#loc23)
    %590 = llvm.add %588, %589 : i32 loc(#loc23)
    %591 = llvm.udiv %580, %23 : i32 loc(#loc23)
    %592 = llvm.xor %591, %582 : i32 loc(#loc23)
    %593 = llvm.mul %592, %23 : i32 loc(#loc23)
    %594 = llvm.urem %580, %23 : i32 loc(#loc23)
    %595 = llvm.add %593, %594 : i32 loc(#loc23)
    %596 = llvm.mul %595, %33 : i32 loc(#loc23)
    %597 = llvm.add %596, %589 : i32 loc(#loc23)
    %598 = llvm.mul %26, %30 : i32 loc(#loc23)
    %599 = llvm.add %598, %590 : i32 loc(#loc23)
    %600 = llvm.add %598, %597 : i32 loc(#loc23)
    %601 = llvm.mul %26, %33 : i32 loc(#loc23)
    %602 = llvm.sub %26, %601 : i32 loc(#loc23)
    %603 = llvm.getelementptr %12[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %604 = llvm.sub %26, %598 : i32 loc(#loc23)
    %605 = llvm.getelementptr %603[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %606 = llvm.add %566, %26 : i32 loc(#loc23)
    %607 = llvm.mul %606, %8 : i32 loc(#loc23)
    %608 = llvm.add %599, %607 : i32 loc(#loc23)
    %609 = llvm.getelementptr %605[%608] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %610 = llvm.load %609 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %611 = llvm.extractelement %610[%26 : i32] : vector<8xbf16> loc(#loc23)
    %612 = llvm.extractelement %610[%33 : i32] : vector<8xbf16> loc(#loc23)
    %613 = llvm.extractelement %610[%32 : i32] : vector<8xbf16> loc(#loc23)
    %614 = llvm.extractelement %610[%16 : i32] : vector<8xbf16> loc(#loc23)
    %615 = llvm.extractelement %610[%24 : i32] : vector<8xbf16> loc(#loc23)
    %616 = llvm.extractelement %610[%11 : i32] : vector<8xbf16> loc(#loc23)
    %617 = llvm.extractelement %610[%10 : i32] : vector<8xbf16> loc(#loc23)
    %618 = llvm.extractelement %610[%9 : i32] : vector<8xbf16> loc(#loc23)
    %619 = llvm.add %600, %607 : i32 loc(#loc23)
    %620 = llvm.getelementptr %605[%619] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %621 = llvm.load %620 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %622 = llvm.extractelement %621[%26 : i32] : vector<8xbf16> loc(#loc23)
    %623 = llvm.extractelement %621[%33 : i32] : vector<8xbf16> loc(#loc23)
    %624 = llvm.extractelement %621[%32 : i32] : vector<8xbf16> loc(#loc23)
    %625 = llvm.extractelement %621[%16 : i32] : vector<8xbf16> loc(#loc23)
    %626 = llvm.extractelement %621[%24 : i32] : vector<8xbf16> loc(#loc23)
    %627 = llvm.extractelement %621[%11 : i32] : vector<8xbf16> loc(#loc23)
    %628 = llvm.extractelement %621[%10 : i32] : vector<8xbf16> loc(#loc23)
    %629 = llvm.extractelement %621[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %630 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %631 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %632 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %633 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %634 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %635 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %636 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %637 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %638 = llvm.insertelement %630, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %638, %505 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %639 = llvm.insertelement %631, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %639, %520 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %640 = llvm.insertelement %632, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %640, %527 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %641 = llvm.insertelement %633, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %641, %534 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %642 = llvm.insertelement %634, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %642, %541 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %643 = llvm.insertelement %635, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %643, %548 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %644 = llvm.insertelement %636, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %644, %555 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %645 = llvm.insertelement %637, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %645, %562 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %646 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %647 = llvm.urem %646, %32 : i32 loc(#loc13)
    %648 = llvm.urem %647, %32 : i32 loc(#loc13)
    %649 = llvm.mul %648, %30 : i32 loc(#loc13)
    %650 = llvm.add %572, %649 : i32 loc(#loc13)
    %651 = llvm.add %650, %26 : i32 loc(#loc13)
    %652 = llvm.udiv %651, %24 : i32 loc(#loc13)
    %653 = llvm.urem %652, %24 : i32 loc(#loc13)
    %654 = llvm.xor %583, %653 : i32 loc(#loc13)
    %655 = llvm.mul %654, %23 : i32 loc(#loc13)
    %656 = llvm.add %655, %586 : i32 loc(#loc13)
    %657 = llvm.mul %651, %30 : i32 loc(#loc13)
    %658 = llvm.mul %656, %33 : i32 loc(#loc13)
    %659 = llvm.add %657, %658 : i32 loc(#loc13)
    %660 = llvm.xor %591, %653 : i32 loc(#loc13)
    %661 = llvm.mul %660, %23 : i32 loc(#loc13)
    %662 = llvm.add %661, %594 : i32 loc(#loc13)
    %663 = llvm.mul %662, %33 : i32 loc(#loc13)
    %664 = llvm.add %657, %663 : i32 loc(#loc13)
    %665 = llvm.add %598, %659 : i32 loc(#loc13)
    %666 = llvm.add %598, %664 : i32 loc(#loc13)
    %667 = llvm.getelementptr %12[%604] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %668 = llvm.getelementptr %667[%602] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %669 = llvm.add %665, %607 : i32 loc(#loc13)
    %670 = llvm.getelementptr %668[%669] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %671 = llvm.load %670 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %672 = llvm.extractelement %671[%26 : i32] : vector<8xbf16> loc(#loc13)
    %673 = llvm.extractelement %671[%33 : i32] : vector<8xbf16> loc(#loc13)
    %674 = llvm.extractelement %671[%32 : i32] : vector<8xbf16> loc(#loc13)
    %675 = llvm.extractelement %671[%16 : i32] : vector<8xbf16> loc(#loc13)
    %676 = llvm.extractelement %671[%24 : i32] : vector<8xbf16> loc(#loc13)
    %677 = llvm.extractelement %671[%11 : i32] : vector<8xbf16> loc(#loc13)
    %678 = llvm.extractelement %671[%10 : i32] : vector<8xbf16> loc(#loc13)
    %679 = llvm.extractelement %671[%9 : i32] : vector<8xbf16> loc(#loc13)
    %680 = llvm.add %666, %607 : i32 loc(#loc13)
    %681 = llvm.getelementptr %668[%680] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %682 = llvm.load %681 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %683 = llvm.extractelement %682[%26 : i32] : vector<8xbf16> loc(#loc13)
    %684 = llvm.extractelement %682[%33 : i32] : vector<8xbf16> loc(#loc13)
    %685 = llvm.extractelement %682[%32 : i32] : vector<8xbf16> loc(#loc13)
    %686 = llvm.extractelement %682[%16 : i32] : vector<8xbf16> loc(#loc13)
    %687 = llvm.extractelement %682[%24 : i32] : vector<8xbf16> loc(#loc13)
    %688 = llvm.extractelement %682[%11 : i32] : vector<8xbf16> loc(#loc13)
    %689 = llvm.extractelement %682[%10 : i32] : vector<8xbf16> loc(#loc13)
    %690 = llvm.extractelement %682[%9 : i32] : vector<8xbf16> loc(#loc13)
    %691 = llvm.insertelement %672, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %692 = llvm.insertelement %673, %691[%33 : i32] : vector<8xbf16> loc(#loc24)
    %693 = llvm.insertelement %674, %692[%32 : i32] : vector<8xbf16> loc(#loc24)
    %694 = llvm.insertelement %675, %693[%16 : i32] : vector<8xbf16> loc(#loc24)
    %695 = llvm.insertelement %676, %694[%24 : i32] : vector<8xbf16> loc(#loc24)
    %696 = llvm.insertelement %677, %695[%11 : i32] : vector<8xbf16> loc(#loc24)
    %697 = llvm.insertelement %678, %696[%10 : i32] : vector<8xbf16> loc(#loc24)
    %698 = llvm.insertelement %679, %697[%9 : i32] : vector<8xbf16> loc(#loc24)
    %699 = llvm.extractelement %698[%26 : i32] : vector<8xbf16> loc(#loc24)
    %700 = llvm.insertelement %699, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %701 = llvm.extractelement %698[%33 : i32] : vector<8xbf16> loc(#loc24)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<8xbf16> loc(#loc24)
    %703 = llvm.extractelement %698[%32 : i32] : vector<8xbf16> loc(#loc24)
    %704 = llvm.insertelement %703, %702[%32 : i32] : vector<8xbf16> loc(#loc24)
    %705 = llvm.extractelement %698[%16 : i32] : vector<8xbf16> loc(#loc24)
    %706 = llvm.insertelement %705, %704[%16 : i32] : vector<8xbf16> loc(#loc24)
    %707 = llvm.extractelement %698[%24 : i32] : vector<8xbf16> loc(#loc24)
    %708 = llvm.insertelement %707, %706[%24 : i32] : vector<8xbf16> loc(#loc24)
    %709 = llvm.extractelement %698[%11 : i32] : vector<8xbf16> loc(#loc24)
    %710 = llvm.insertelement %709, %708[%11 : i32] : vector<8xbf16> loc(#loc24)
    %711 = llvm.extractelement %698[%10 : i32] : vector<8xbf16> loc(#loc24)
    %712 = llvm.insertelement %711, %710[%10 : i32] : vector<8xbf16> loc(#loc24)
    %713 = llvm.extractelement %698[%9 : i32] : vector<8xbf16> loc(#loc24)
    %714 = llvm.insertelement %713, %712[%9 : i32] : vector<8xbf16> loc(#loc24)
    %715 = llvm.insertelement %683, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %716 = llvm.insertelement %684, %715[%33 : i32] : vector<8xbf16> loc(#loc24)
    %717 = llvm.insertelement %685, %716[%32 : i32] : vector<8xbf16> loc(#loc24)
    %718 = llvm.insertelement %686, %717[%16 : i32] : vector<8xbf16> loc(#loc24)
    %719 = llvm.insertelement %687, %718[%24 : i32] : vector<8xbf16> loc(#loc24)
    %720 = llvm.insertelement %688, %719[%11 : i32] : vector<8xbf16> loc(#loc24)
    %721 = llvm.insertelement %689, %720[%10 : i32] : vector<8xbf16> loc(#loc24)
    %722 = llvm.insertelement %690, %721[%9 : i32] : vector<8xbf16> loc(#loc24)
    %723 = llvm.extractelement %722[%26 : i32] : vector<8xbf16> loc(#loc24)
    %724 = llvm.insertelement %723, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %725 = llvm.extractelement %722[%33 : i32] : vector<8xbf16> loc(#loc24)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<8xbf16> loc(#loc24)
    %727 = llvm.extractelement %722[%32 : i32] : vector<8xbf16> loc(#loc24)
    %728 = llvm.insertelement %727, %726[%32 : i32] : vector<8xbf16> loc(#loc24)
    %729 = llvm.extractelement %722[%16 : i32] : vector<8xbf16> loc(#loc24)
    %730 = llvm.insertelement %729, %728[%16 : i32] : vector<8xbf16> loc(#loc24)
    %731 = llvm.extractelement %722[%24 : i32] : vector<8xbf16> loc(#loc24)
    %732 = llvm.insertelement %731, %730[%24 : i32] : vector<8xbf16> loc(#loc24)
    %733 = llvm.extractelement %722[%11 : i32] : vector<8xbf16> loc(#loc24)
    %734 = llvm.insertelement %733, %732[%11 : i32] : vector<8xbf16> loc(#loc24)
    %735 = llvm.extractelement %722[%10 : i32] : vector<8xbf16> loc(#loc24)
    %736 = llvm.insertelement %735, %734[%10 : i32] : vector<8xbf16> loc(#loc24)
    %737 = llvm.extractelement %722[%9 : i32] : vector<8xbf16> loc(#loc24)
    %738 = llvm.insertelement %737, %736[%9 : i32] : vector<8xbf16> loc(#loc24)
    %739 = llvm.insertelement %611, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %740 = llvm.insertelement %612, %739[%33 : i32] : vector<8xbf16> loc(#loc24)
    %741 = llvm.insertelement %613, %740[%32 : i32] : vector<8xbf16> loc(#loc24)
    %742 = llvm.insertelement %614, %741[%16 : i32] : vector<8xbf16> loc(#loc24)
    %743 = llvm.insertelement %615, %742[%24 : i32] : vector<8xbf16> loc(#loc24)
    %744 = llvm.insertelement %616, %743[%11 : i32] : vector<8xbf16> loc(#loc24)
    %745 = llvm.insertelement %617, %744[%10 : i32] : vector<8xbf16> loc(#loc24)
    %746 = llvm.insertelement %618, %745[%9 : i32] : vector<8xbf16> loc(#loc24)
    %747 = llvm.extractelement %746[%26 : i32] : vector<8xbf16> loc(#loc24)
    %748 = llvm.insertelement %747, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %749 = llvm.extractelement %746[%33 : i32] : vector<8xbf16> loc(#loc24)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<8xbf16> loc(#loc24)
    %751 = llvm.extractelement %746[%32 : i32] : vector<8xbf16> loc(#loc24)
    %752 = llvm.insertelement %751, %750[%32 : i32] : vector<8xbf16> loc(#loc24)
    %753 = llvm.extractelement %746[%16 : i32] : vector<8xbf16> loc(#loc24)
    %754 = llvm.insertelement %753, %752[%16 : i32] : vector<8xbf16> loc(#loc24)
    %755 = llvm.extractelement %746[%24 : i32] : vector<8xbf16> loc(#loc24)
    %756 = llvm.insertelement %755, %754[%24 : i32] : vector<8xbf16> loc(#loc24)
    %757 = llvm.extractelement %746[%11 : i32] : vector<8xbf16> loc(#loc24)
    %758 = llvm.insertelement %757, %756[%11 : i32] : vector<8xbf16> loc(#loc24)
    %759 = llvm.extractelement %746[%10 : i32] : vector<8xbf16> loc(#loc24)
    %760 = llvm.insertelement %759, %758[%10 : i32] : vector<8xbf16> loc(#loc24)
    %761 = llvm.extractelement %746[%9 : i32] : vector<8xbf16> loc(#loc24)
    %762 = llvm.insertelement %761, %760[%9 : i32] : vector<8xbf16> loc(#loc24)
    %763 = llvm.insertelement %622, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %764 = llvm.insertelement %623, %763[%33 : i32] : vector<8xbf16> loc(#loc24)
    %765 = llvm.insertelement %624, %764[%32 : i32] : vector<8xbf16> loc(#loc24)
    %766 = llvm.insertelement %625, %765[%16 : i32] : vector<8xbf16> loc(#loc24)
    %767 = llvm.insertelement %626, %766[%24 : i32] : vector<8xbf16> loc(#loc24)
    %768 = llvm.insertelement %627, %767[%11 : i32] : vector<8xbf16> loc(#loc24)
    %769 = llvm.insertelement %628, %768[%10 : i32] : vector<8xbf16> loc(#loc24)
    %770 = llvm.insertelement %629, %769[%9 : i32] : vector<8xbf16> loc(#loc24)
    %771 = llvm.extractelement %770[%26 : i32] : vector<8xbf16> loc(#loc24)
    %772 = llvm.insertelement %771, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %773 = llvm.extractelement %770[%33 : i32] : vector<8xbf16> loc(#loc24)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<8xbf16> loc(#loc24)
    %775 = llvm.extractelement %770[%32 : i32] : vector<8xbf16> loc(#loc24)
    %776 = llvm.insertelement %775, %774[%32 : i32] : vector<8xbf16> loc(#loc24)
    %777 = llvm.extractelement %770[%16 : i32] : vector<8xbf16> loc(#loc24)
    %778 = llvm.insertelement %777, %776[%16 : i32] : vector<8xbf16> loc(#loc24)
    %779 = llvm.extractelement %770[%24 : i32] : vector<8xbf16> loc(#loc24)
    %780 = llvm.insertelement %779, %778[%24 : i32] : vector<8xbf16> loc(#loc24)
    %781 = llvm.extractelement %770[%11 : i32] : vector<8xbf16> loc(#loc24)
    %782 = llvm.insertelement %781, %780[%11 : i32] : vector<8xbf16> loc(#loc24)
    %783 = llvm.extractelement %770[%10 : i32] : vector<8xbf16> loc(#loc24)
    %784 = llvm.insertelement %783, %782[%10 : i32] : vector<8xbf16> loc(#loc24)
    %785 = llvm.extractelement %770[%9 : i32] : vector<8xbf16> loc(#loc24)
    %786 = llvm.insertelement %785, %784[%9 : i32] : vector<8xbf16> loc(#loc24)
    %787 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %788 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %789 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %790 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %791 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %792 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %793 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %794 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %795 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %796 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %797 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %798 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %799 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %800 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %801 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %802 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %803 = llvm.insertelement %787, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %804 = llvm.insertelement %788, %803[%33 : i32] : vector<16xf32> loc(#loc24)
    %805 = llvm.insertelement %789, %804[%32 : i32] : vector<16xf32> loc(#loc24)
    %806 = llvm.insertelement %790, %805[%16 : i32] : vector<16xf32> loc(#loc24)
    %807 = llvm.insertelement %791, %806[%24 : i32] : vector<16xf32> loc(#loc24)
    %808 = llvm.insertelement %792, %807[%11 : i32] : vector<16xf32> loc(#loc24)
    %809 = llvm.insertelement %793, %808[%10 : i32] : vector<16xf32> loc(#loc24)
    %810 = llvm.insertelement %794, %809[%9 : i32] : vector<16xf32> loc(#loc24)
    %811 = llvm.insertelement %795, %810[%23 : i32] : vector<16xf32> loc(#loc24)
    %812 = llvm.insertelement %796, %811[%15 : i32] : vector<16xf32> loc(#loc24)
    %813 = llvm.insertelement %797, %812[%14 : i32] : vector<16xf32> loc(#loc24)
    %814 = llvm.insertelement %798, %813[%13 : i32] : vector<16xf32> loc(#loc24)
    %815 = llvm.insertelement %799, %814[%5 : i32] : vector<16xf32> loc(#loc24)
    %816 = llvm.insertelement %800, %815[%4 : i32] : vector<16xf32> loc(#loc24)
    %817 = llvm.insertelement %801, %816[%3 : i32] : vector<16xf32> loc(#loc24)
    %818 = llvm.insertelement %802, %817[%2 : i32] : vector<16xf32> loc(#loc24)
    %819 = rocdl.mfma.f32.32x32x16.bf16 %762, %714, %818, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %820 = rocdl.mfma.f32.32x32x16.bf16 %786, %738, %819, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %821 = llvm.extractelement %820[%26 : i32] : vector<16xf32> loc(#loc24)
    %822 = llvm.extractelement %820[%33 : i32] : vector<16xf32> loc(#loc24)
    %823 = llvm.extractelement %820[%32 : i32] : vector<16xf32> loc(#loc24)
    %824 = llvm.extractelement %820[%16 : i32] : vector<16xf32> loc(#loc24)
    %825 = llvm.extractelement %820[%24 : i32] : vector<16xf32> loc(#loc24)
    %826 = llvm.extractelement %820[%11 : i32] : vector<16xf32> loc(#loc24)
    %827 = llvm.extractelement %820[%10 : i32] : vector<16xf32> loc(#loc24)
    %828 = llvm.extractelement %820[%9 : i32] : vector<16xf32> loc(#loc24)
    %829 = llvm.extractelement %820[%23 : i32] : vector<16xf32> loc(#loc24)
    %830 = llvm.extractelement %820[%15 : i32] : vector<16xf32> loc(#loc24)
    %831 = llvm.extractelement %820[%14 : i32] : vector<16xf32> loc(#loc24)
    %832 = llvm.extractelement %820[%13 : i32] : vector<16xf32> loc(#loc24)
    %833 = llvm.extractelement %820[%5 : i32] : vector<16xf32> loc(#loc24)
    %834 = llvm.extractelement %820[%4 : i32] : vector<16xf32> loc(#loc24)
    %835 = llvm.extractelement %820[%3 : i32] : vector<16xf32> loc(#loc24)
    %836 = llvm.extractelement %820[%2 : i32] : vector<16xf32> loc(#loc24)
    %837 = llvm.insertvalue %821, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %838 = llvm.insertvalue %822, %837[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %839 = llvm.insertvalue %823, %838[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %840 = llvm.insertvalue %824, %839[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %841 = llvm.insertvalue %825, %840[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %842 = llvm.insertvalue %826, %841[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %843 = llvm.insertvalue %827, %842[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %844 = llvm.insertvalue %828, %843[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %845 = llvm.insertvalue %829, %844[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %846 = llvm.insertvalue %830, %845[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %847 = llvm.insertvalue %831, %846[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %848 = llvm.insertvalue %832, %847[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %849 = llvm.insertvalue %833, %848[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %850 = llvm.insertvalue %834, %849[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %851 = llvm.insertvalue %835, %850[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %852 = llvm.insertvalue %836, %851[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %853 = llvm.add %399, %30 : i32 loc(#loc9)
    llvm.br ^bb1(%853, %852, %402, %490, %404, %449 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>, !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>) loc(#loc9)
  ^bb3:  // pred: ^bb1
    %854 = llvm.add %arg5, %31 : i32 loc(#loc9)
    %855 = llvm.sdiv %854, %30 : i32 loc(#loc9)
    %856 = llvm.icmp "sge" %855, %33 : i32 loc(#loc9)
    %857 = llvm.icmp "sge" %855, %32 : i32 loc(#loc9)
    rocdl.barrier loc(#loc23)
    %858 = llvm.extractvalue %401[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %859 = llvm.extractvalue %401[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %860 = llvm.extractvalue %401[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %861 = llvm.extractvalue %401[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %862 = llvm.extractvalue %401[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %863 = llvm.extractvalue %401[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %864 = llvm.extractvalue %401[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %865 = llvm.extractvalue %401[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %866 = llvm.select %66, %26, %23 : i1, i32 loc(#loc23)
    %867 = llvm.xor %122, %866 : i32 loc(#loc23)
    %868 = llvm.mul %867, %33 : i32 loc(#loc23)
    %869 = llvm.add %868, %26 : i32 loc(#loc23)
    %870 = llvm.mul %68, %30 : i32 loc(#loc23)
    %871 = llvm.add %869, %870 : i32 loc(#loc23)
    %872 = llvm.getelementptr inbounds %12[%871] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %873 = llvm.insertelement %858, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %873, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %874 = llvm.xor %22, %105 : i32 loc(#loc23)
    %875 = llvm.xor %874, %109 : i32 loc(#loc23)
    %876 = llvm.xor %875, %113 : i32 loc(#loc23)
    %877 = llvm.xor %876, %117 : i32 loc(#loc23)
    %878 = llvm.xor %877, %121 : i32 loc(#loc23)
    %879 = llvm.xor %23, %59 : i32 loc(#loc23)
    %880 = llvm.xor %879, %63 : i32 loc(#loc23)
    %881 = llvm.xor %878, %866 : i32 loc(#loc23)
    %882 = llvm.xor %880, %67 : i32 loc(#loc23)
    %883 = llvm.mul %881, %33 : i32 loc(#loc23)
    %884 = llvm.add %883, %26 : i32 loc(#loc23)
    %885 = llvm.mul %882, %30 : i32 loc(#loc23)
    %886 = llvm.add %884, %885 : i32 loc(#loc23)
    %887 = llvm.getelementptr inbounds %12[%886] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %888 = llvm.insertelement %859, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %888, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %889 = llvm.xor %22, %59 : i32 loc(#loc23)
    %890 = llvm.xor %889, %63 : i32 loc(#loc23)
    %891 = llvm.xor %890, %67 : i32 loc(#loc23)
    %892 = llvm.mul %891, %30 : i32 loc(#loc23)
    %893 = llvm.add %869, %892 : i32 loc(#loc23)
    %894 = llvm.getelementptr inbounds %12[%893] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %895 = llvm.insertelement %860, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %895, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %896 = llvm.xor %21, %59 : i32 loc(#loc23)
    %897 = llvm.xor %896, %63 : i32 loc(#loc23)
    %898 = llvm.xor %897, %67 : i32 loc(#loc23)
    %899 = llvm.mul %898, %30 : i32 loc(#loc23)
    %900 = llvm.add %884, %899 : i32 loc(#loc23)
    %901 = llvm.getelementptr inbounds %12[%900] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %902 = llvm.insertelement %861, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %902, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %903 = llvm.xor %30, %59 : i32 loc(#loc23)
    %904 = llvm.xor %903, %63 : i32 loc(#loc23)
    %905 = llvm.xor %904, %67 : i32 loc(#loc23)
    %906 = llvm.mul %905, %30 : i32 loc(#loc23)
    %907 = llvm.add %869, %906 : i32 loc(#loc23)
    %908 = llvm.getelementptr inbounds %12[%907] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %909 = llvm.insertelement %862, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %909, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %910 = llvm.xor %20, %59 : i32 loc(#loc23)
    %911 = llvm.xor %910, %63 : i32 loc(#loc23)
    %912 = llvm.xor %911, %67 : i32 loc(#loc23)
    %913 = llvm.mul %912, %30 : i32 loc(#loc23)
    %914 = llvm.add %884, %913 : i32 loc(#loc23)
    %915 = llvm.getelementptr inbounds %12[%914] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %916 = llvm.insertelement %863, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %916, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %917 = llvm.xor %19, %59 : i32 loc(#loc23)
    %918 = llvm.xor %917, %63 : i32 loc(#loc23)
    %919 = llvm.xor %918, %67 : i32 loc(#loc23)
    %920 = llvm.mul %919, %30 : i32 loc(#loc23)
    %921 = llvm.add %869, %920 : i32 loc(#loc23)
    %922 = llvm.getelementptr inbounds %12[%921] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %923 = llvm.insertelement %864, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %923, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %924 = llvm.xor %18, %59 : i32 loc(#loc23)
    %925 = llvm.xor %924, %63 : i32 loc(#loc23)
    %926 = llvm.xor %925, %67 : i32 loc(#loc23)
    %927 = llvm.mul %926, %30 : i32 loc(#loc23)
    %928 = llvm.add %884, %927 : i32 loc(#loc23)
    %929 = llvm.getelementptr inbounds %12[%928] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %930 = llvm.insertelement %865, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %930, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %931 = llvm.urem %56, %32 : i32 loc(#loc23)
    %932 = llvm.urem %931, %32 : i32 loc(#loc23)
    %933 = llvm.urem %56, %33 : i32 loc(#loc23)
    %934 = llvm.mul %932, %30 : i32 loc(#loc23)
    %935 = llvm.urem %55, %30 : i32 loc(#loc23)
    %936 = llvm.icmp "uge" %55, %30 : i32 loc(#loc23)
    %937 = llvm.select %936, %23, %26 : i1, i32 loc(#loc23)
    %938 = llvm.add %935, %26 : i32 loc(#loc23)
    %939 = llvm.add %938, %26 : i32 loc(#loc23)
    %940 = llvm.add %939, %934 : i32 loc(#loc23)
    %941 = llvm.add %937, %26 : i32 loc(#loc23)
    %942 = llvm.add %941, %26 : i32 loc(#loc23)
    %943 = llvm.add %940, %26 : i32 loc(#loc23)
    %944 = llvm.add %942, %26 : i32 loc(#loc23)
    %945 = llvm.add %937, %22 : i32 loc(#loc23)
    %946 = llvm.add %945, %26 : i32 loc(#loc23)
    %947 = llvm.add %946, %26 : i32 loc(#loc23)
    %948 = llvm.udiv %943, %24 : i32 loc(#loc23)
    %949 = llvm.urem %948, %24 : i32 loc(#loc23)
    %950 = llvm.udiv %944, %23 : i32 loc(#loc23)
    %951 = llvm.xor %950, %949 : i32 loc(#loc23)
    %952 = llvm.mul %951, %23 : i32 loc(#loc23)
    %953 = llvm.urem %944, %23 : i32 loc(#loc23)
    %954 = llvm.add %952, %953 : i32 loc(#loc23)
    %955 = llvm.mul %954, %33 : i32 loc(#loc23)
    %956 = llvm.mul %943, %30 : i32 loc(#loc23)
    %957 = llvm.add %955, %956 : i32 loc(#loc23)
    %958 = llvm.udiv %947, %23 : i32 loc(#loc23)
    %959 = llvm.xor %958, %949 : i32 loc(#loc23)
    %960 = llvm.mul %959, %23 : i32 loc(#loc23)
    %961 = llvm.urem %947, %23 : i32 loc(#loc23)
    %962 = llvm.add %960, %961 : i32 loc(#loc23)
    %963 = llvm.mul %962, %33 : i32 loc(#loc23)
    %964 = llvm.add %963, %956 : i32 loc(#loc23)
    %965 = llvm.mul %26, %30 : i32 loc(#loc23)
    %966 = llvm.add %965, %957 : i32 loc(#loc23)
    %967 = llvm.add %965, %964 : i32 loc(#loc23)
    %968 = llvm.mul %26, %33 : i32 loc(#loc23)
    %969 = llvm.sub %26, %968 : i32 loc(#loc23)
    %970 = llvm.getelementptr %12[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %971 = llvm.sub %26, %965 : i32 loc(#loc23)
    %972 = llvm.getelementptr %970[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %973 = llvm.add %933, %26 : i32 loc(#loc23)
    %974 = llvm.mul %973, %8 : i32 loc(#loc23)
    %975 = llvm.add %966, %974 : i32 loc(#loc23)
    %976 = llvm.getelementptr %972[%975] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %977 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %978 = llvm.extractelement %977[%26 : i32] : vector<8xbf16> loc(#loc23)
    %979 = llvm.extractelement %977[%33 : i32] : vector<8xbf16> loc(#loc23)
    %980 = llvm.extractelement %977[%32 : i32] : vector<8xbf16> loc(#loc23)
    %981 = llvm.extractelement %977[%16 : i32] : vector<8xbf16> loc(#loc23)
    %982 = llvm.extractelement %977[%24 : i32] : vector<8xbf16> loc(#loc23)
    %983 = llvm.extractelement %977[%11 : i32] : vector<8xbf16> loc(#loc23)
    %984 = llvm.extractelement %977[%10 : i32] : vector<8xbf16> loc(#loc23)
    %985 = llvm.extractelement %977[%9 : i32] : vector<8xbf16> loc(#loc23)
    %986 = llvm.add %967, %974 : i32 loc(#loc23)
    %987 = llvm.getelementptr %972[%986] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc23)
    %988 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %989 = llvm.extractelement %988[%26 : i32] : vector<8xbf16> loc(#loc23)
    %990 = llvm.extractelement %988[%33 : i32] : vector<8xbf16> loc(#loc23)
    %991 = llvm.extractelement %988[%32 : i32] : vector<8xbf16> loc(#loc23)
    %992 = llvm.extractelement %988[%16 : i32] : vector<8xbf16> loc(#loc23)
    %993 = llvm.extractelement %988[%24 : i32] : vector<8xbf16> loc(#loc23)
    %994 = llvm.extractelement %988[%11 : i32] : vector<8xbf16> loc(#loc23)
    %995 = llvm.extractelement %988[%10 : i32] : vector<8xbf16> loc(#loc23)
    %996 = llvm.extractelement %988[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %997 = llvm.extractvalue %403[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %998 = llvm.extractvalue %403[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %999 = llvm.extractvalue %403[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1000 = llvm.extractvalue %403[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1001 = llvm.extractvalue %403[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1002 = llvm.extractvalue %403[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1003 = llvm.extractvalue %403[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1004 = llvm.extractvalue %403[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1005 = llvm.insertelement %997, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1005, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1006 = llvm.insertelement %998, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1006, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1007 = llvm.insertelement %999, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1007, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1008 = llvm.insertelement %1000, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1008, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1009 = llvm.insertelement %1001, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1009, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1010 = llvm.insertelement %1002, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1010, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1011 = llvm.insertelement %1003, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1011, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1012 = llvm.insertelement %1004, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1012, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1013 = llvm.udiv %56, %32 : i32 loc(#loc13)
    %1014 = llvm.urem %1013, %32 : i32 loc(#loc13)
    %1015 = llvm.urem %1014, %32 : i32 loc(#loc13)
    %1016 = llvm.mul %1015, %30 : i32 loc(#loc13)
    %1017 = llvm.add %939, %1016 : i32 loc(#loc13)
    %1018 = llvm.add %1017, %26 : i32 loc(#loc13)
    %1019 = llvm.udiv %1018, %24 : i32 loc(#loc13)
    %1020 = llvm.urem %1019, %24 : i32 loc(#loc13)
    %1021 = llvm.xor %950, %1020 : i32 loc(#loc13)
    %1022 = llvm.mul %1021, %23 : i32 loc(#loc13)
    %1023 = llvm.add %1022, %953 : i32 loc(#loc13)
    %1024 = llvm.mul %1018, %30 : i32 loc(#loc13)
    %1025 = llvm.mul %1023, %33 : i32 loc(#loc13)
    %1026 = llvm.add %1024, %1025 : i32 loc(#loc13)
    %1027 = llvm.xor %958, %1020 : i32 loc(#loc13)
    %1028 = llvm.mul %1027, %23 : i32 loc(#loc13)
    %1029 = llvm.add %1028, %961 : i32 loc(#loc13)
    %1030 = llvm.mul %1029, %33 : i32 loc(#loc13)
    %1031 = llvm.add %1024, %1030 : i32 loc(#loc13)
    %1032 = llvm.add %965, %1026 : i32 loc(#loc13)
    %1033 = llvm.add %965, %1031 : i32 loc(#loc13)
    %1034 = llvm.getelementptr %12[%971] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1035 = llvm.getelementptr %1034[%969] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1036 = llvm.add %1032, %974 : i32 loc(#loc13)
    %1037 = llvm.getelementptr %1035[%1036] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1038 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1039 = llvm.extractelement %1038[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1040 = llvm.extractelement %1038[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1041 = llvm.extractelement %1038[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1042 = llvm.extractelement %1038[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1043 = llvm.extractelement %1038[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1044 = llvm.extractelement %1038[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1045 = llvm.extractelement %1038[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1046 = llvm.extractelement %1038[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1047 = llvm.add %1033, %974 : i32 loc(#loc13)
    %1048 = llvm.getelementptr %1035[%1047] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, bf16 loc(#loc13)
    %1049 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1050 = llvm.extractelement %1049[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1051 = llvm.extractelement %1049[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1052 = llvm.extractelement %1049[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1053 = llvm.extractelement %1049[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1054 = llvm.extractelement %1049[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1055 = llvm.extractelement %1049[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1056 = llvm.extractelement %1049[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1057 = llvm.extractelement %1049[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %856, ^bb4, ^bb5 loc(#loc24)
  ^bb4:  // pred: ^bb3
    %1058 = llvm.insertelement %1039, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1059 = llvm.insertelement %1040, %1058[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1060 = llvm.insertelement %1041, %1059[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1061 = llvm.insertelement %1042, %1060[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1062 = llvm.insertelement %1043, %1061[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1063 = llvm.insertelement %1044, %1062[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1064 = llvm.insertelement %1045, %1063[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1065 = llvm.insertelement %1046, %1064[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1066 = llvm.extractelement %1065[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1067 = llvm.insertelement %1066, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1068 = llvm.extractelement %1065[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1069 = llvm.insertelement %1068, %1067[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1070 = llvm.extractelement %1065[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1071 = llvm.insertelement %1070, %1069[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1072 = llvm.extractelement %1065[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1073 = llvm.insertelement %1072, %1071[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1074 = llvm.extractelement %1065[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1075 = llvm.insertelement %1074, %1073[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1076 = llvm.extractelement %1065[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1077 = llvm.insertelement %1076, %1075[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1078 = llvm.extractelement %1065[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1079 = llvm.insertelement %1078, %1077[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1080 = llvm.extractelement %1065[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1081 = llvm.insertelement %1080, %1079[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1082 = llvm.insertelement %1050, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1083 = llvm.insertelement %1051, %1082[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1084 = llvm.insertelement %1052, %1083[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1085 = llvm.insertelement %1053, %1084[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1086 = llvm.insertelement %1054, %1085[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1087 = llvm.insertelement %1055, %1086[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1088 = llvm.insertelement %1056, %1087[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1089 = llvm.insertelement %1057, %1088[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1090 = llvm.extractelement %1089[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1091 = llvm.insertelement %1090, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1092 = llvm.extractelement %1089[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1093 = llvm.insertelement %1092, %1091[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1094 = llvm.extractelement %1089[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1095 = llvm.insertelement %1094, %1093[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1096 = llvm.extractelement %1089[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1097 = llvm.insertelement %1096, %1095[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1098 = llvm.extractelement %1089[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1099 = llvm.insertelement %1098, %1097[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1100 = llvm.extractelement %1089[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1101 = llvm.insertelement %1100, %1099[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1102 = llvm.extractelement %1089[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1103 = llvm.insertelement %1102, %1101[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1104 = llvm.extractelement %1089[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1105 = llvm.insertelement %1104, %1103[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1106 = llvm.insertelement %978, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1107 = llvm.insertelement %979, %1106[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1108 = llvm.insertelement %980, %1107[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1109 = llvm.insertelement %981, %1108[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1110 = llvm.insertelement %982, %1109[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1111 = llvm.insertelement %983, %1110[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1112 = llvm.insertelement %984, %1111[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1113 = llvm.insertelement %985, %1112[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1114 = llvm.extractelement %1113[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1115 = llvm.insertelement %1114, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1116 = llvm.extractelement %1113[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1117 = llvm.insertelement %1116, %1115[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1118 = llvm.extractelement %1113[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1119 = llvm.insertelement %1118, %1117[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1120 = llvm.extractelement %1113[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1121 = llvm.insertelement %1120, %1119[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1122 = llvm.extractelement %1113[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1123 = llvm.insertelement %1122, %1121[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1124 = llvm.extractelement %1113[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1125 = llvm.insertelement %1124, %1123[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1126 = llvm.extractelement %1113[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1127 = llvm.insertelement %1126, %1125[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1128 = llvm.extractelement %1113[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1129 = llvm.insertelement %1128, %1127[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1130 = llvm.insertelement %989, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1131 = llvm.insertelement %990, %1130[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1132 = llvm.insertelement %991, %1131[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1133 = llvm.insertelement %992, %1132[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1134 = llvm.insertelement %993, %1133[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1135 = llvm.insertelement %994, %1134[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1136 = llvm.insertelement %995, %1135[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1137 = llvm.insertelement %996, %1136[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1138 = llvm.extractelement %1137[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1139 = llvm.insertelement %1138, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1140 = llvm.extractelement %1137[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1141 = llvm.insertelement %1140, %1139[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1142 = llvm.extractelement %1137[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1143 = llvm.insertelement %1142, %1141[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1144 = llvm.extractelement %1137[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1145 = llvm.insertelement %1144, %1143[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1146 = llvm.extractelement %1137[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1147 = llvm.insertelement %1146, %1145[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1148 = llvm.extractelement %1137[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1149 = llvm.insertelement %1148, %1147[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1150 = llvm.extractelement %1137[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1151 = llvm.insertelement %1150, %1149[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1152 = llvm.extractelement %1137[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1153 = llvm.insertelement %1152, %1151[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1154 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1155 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1156 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1157 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1158 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1159 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1160 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1161 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1162 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1163 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1164 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1165 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1166 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1167 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1168 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1169 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1170 = llvm.insertelement %1154, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1171 = llvm.insertelement %1155, %1170[%33 : i32] : vector<16xf32> loc(#loc24)
    %1172 = llvm.insertelement %1156, %1171[%32 : i32] : vector<16xf32> loc(#loc24)
    %1173 = llvm.insertelement %1157, %1172[%16 : i32] : vector<16xf32> loc(#loc24)
    %1174 = llvm.insertelement %1158, %1173[%24 : i32] : vector<16xf32> loc(#loc24)
    %1175 = llvm.insertelement %1159, %1174[%11 : i32] : vector<16xf32> loc(#loc24)
    %1176 = llvm.insertelement %1160, %1175[%10 : i32] : vector<16xf32> loc(#loc24)
    %1177 = llvm.insertelement %1161, %1176[%9 : i32] : vector<16xf32> loc(#loc24)
    %1178 = llvm.insertelement %1162, %1177[%23 : i32] : vector<16xf32> loc(#loc24)
    %1179 = llvm.insertelement %1163, %1178[%15 : i32] : vector<16xf32> loc(#loc24)
    %1180 = llvm.insertelement %1164, %1179[%14 : i32] : vector<16xf32> loc(#loc24)
    %1181 = llvm.insertelement %1165, %1180[%13 : i32] : vector<16xf32> loc(#loc24)
    %1182 = llvm.insertelement %1166, %1181[%5 : i32] : vector<16xf32> loc(#loc24)
    %1183 = llvm.insertelement %1167, %1182[%4 : i32] : vector<16xf32> loc(#loc24)
    %1184 = llvm.insertelement %1168, %1183[%3 : i32] : vector<16xf32> loc(#loc24)
    %1185 = llvm.insertelement %1169, %1184[%2 : i32] : vector<16xf32> loc(#loc24)
    %1186 = rocdl.mfma.f32.32x32x16.bf16 %1129, %1081, %1185, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1187 = rocdl.mfma.f32.32x32x16.bf16 %1153, %1105, %1186, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1188 = llvm.extractelement %1187[%26 : i32] : vector<16xf32> loc(#loc24)
    %1189 = llvm.extractelement %1187[%33 : i32] : vector<16xf32> loc(#loc24)
    %1190 = llvm.extractelement %1187[%32 : i32] : vector<16xf32> loc(#loc24)
    %1191 = llvm.extractelement %1187[%16 : i32] : vector<16xf32> loc(#loc24)
    %1192 = llvm.extractelement %1187[%24 : i32] : vector<16xf32> loc(#loc24)
    %1193 = llvm.extractelement %1187[%11 : i32] : vector<16xf32> loc(#loc24)
    %1194 = llvm.extractelement %1187[%10 : i32] : vector<16xf32> loc(#loc24)
    %1195 = llvm.extractelement %1187[%9 : i32] : vector<16xf32> loc(#loc24)
    %1196 = llvm.extractelement %1187[%23 : i32] : vector<16xf32> loc(#loc24)
    %1197 = llvm.extractelement %1187[%15 : i32] : vector<16xf32> loc(#loc24)
    %1198 = llvm.extractelement %1187[%14 : i32] : vector<16xf32> loc(#loc24)
    %1199 = llvm.extractelement %1187[%13 : i32] : vector<16xf32> loc(#loc24)
    %1200 = llvm.extractelement %1187[%5 : i32] : vector<16xf32> loc(#loc24)
    %1201 = llvm.extractelement %1187[%4 : i32] : vector<16xf32> loc(#loc24)
    %1202 = llvm.extractelement %1187[%3 : i32] : vector<16xf32> loc(#loc24)
    %1203 = llvm.extractelement %1187[%2 : i32] : vector<16xf32> loc(#loc24)
    %1204 = llvm.insertvalue %1188, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1205 = llvm.insertvalue %1189, %1204[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1206 = llvm.insertvalue %1190, %1205[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1207 = llvm.insertvalue %1191, %1206[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1208 = llvm.insertvalue %1192, %1207[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1209 = llvm.insertvalue %1193, %1208[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1210 = llvm.insertvalue %1194, %1209[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1211 = llvm.insertvalue %1195, %1210[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1212 = llvm.insertvalue %1196, %1211[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1213 = llvm.insertvalue %1197, %1212[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1214 = llvm.insertvalue %1198, %1213[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1215 = llvm.insertvalue %1199, %1214[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1216 = llvm.insertvalue %1200, %1215[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1217 = llvm.insertvalue %1201, %1216[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1218 = llvm.insertvalue %1202, %1217[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1219 = llvm.insertvalue %1203, %1218[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb6(%1219 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb5:  // pred: ^bb3
    llvm.br ^bb6(%400 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb6(%1220: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb4, ^bb5
    llvm.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %1221 = llvm.extractvalue %1220[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1222 = llvm.extractvalue %1220[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1223 = llvm.extractvalue %1220[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1224 = llvm.extractvalue %1220[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1225 = llvm.extractvalue %1220[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1226 = llvm.extractvalue %1220[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1227 = llvm.extractvalue %1220[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1228 = llvm.extractvalue %1220[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1229 = llvm.extractvalue %1220[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1230 = llvm.extractvalue %1220[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1231 = llvm.extractvalue %1220[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1232 = llvm.extractvalue %1220[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1233 = llvm.extractvalue %1220[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1234 = llvm.extractvalue %1220[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1235 = llvm.extractvalue %1220[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1236 = llvm.extractvalue %1220[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1237 = llvm.extractvalue %400[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1238 = llvm.extractvalue %400[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1239 = llvm.extractvalue %400[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1240 = llvm.extractvalue %400[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1241 = llvm.extractvalue %400[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1242 = llvm.extractvalue %400[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1243 = llvm.extractvalue %400[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1244 = llvm.extractvalue %400[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1245 = llvm.extractvalue %400[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1246 = llvm.extractvalue %400[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1247 = llvm.extractvalue %400[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1248 = llvm.extractvalue %400[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1249 = llvm.extractvalue %400[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1250 = llvm.extractvalue %400[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1251 = llvm.extractvalue %400[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1252 = llvm.extractvalue %400[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1253 = llvm.select %856, %1221, %1237 : i1, f32 loc(#loc9)
    %1254 = llvm.select %856, %1222, %1238 : i1, f32 loc(#loc9)
    %1255 = llvm.select %856, %1223, %1239 : i1, f32 loc(#loc9)
    %1256 = llvm.select %856, %1224, %1240 : i1, f32 loc(#loc9)
    %1257 = llvm.select %856, %1225, %1241 : i1, f32 loc(#loc9)
    %1258 = llvm.select %856, %1226, %1242 : i1, f32 loc(#loc9)
    %1259 = llvm.select %856, %1227, %1243 : i1, f32 loc(#loc9)
    %1260 = llvm.select %856, %1228, %1244 : i1, f32 loc(#loc9)
    %1261 = llvm.select %856, %1229, %1245 : i1, f32 loc(#loc9)
    %1262 = llvm.select %856, %1230, %1246 : i1, f32 loc(#loc9)
    %1263 = llvm.select %856, %1231, %1247 : i1, f32 loc(#loc9)
    %1264 = llvm.select %856, %1232, %1248 : i1, f32 loc(#loc9)
    %1265 = llvm.select %856, %1233, %1249 : i1, f32 loc(#loc9)
    %1266 = llvm.select %856, %1234, %1250 : i1, f32 loc(#loc9)
    %1267 = llvm.select %856, %1235, %1251 : i1, f32 loc(#loc9)
    %1268 = llvm.select %856, %1236, %1252 : i1, f32 loc(#loc9)
    %1269 = llvm.insertvalue %1253, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1270 = llvm.insertvalue %1254, %1269[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1271 = llvm.insertvalue %1255, %1270[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1272 = llvm.insertvalue %1256, %1271[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1273 = llvm.insertvalue %1257, %1272[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1274 = llvm.insertvalue %1258, %1273[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1275 = llvm.insertvalue %1259, %1274[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1276 = llvm.insertvalue %1260, %1275[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1277 = llvm.insertvalue %1261, %1276[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1278 = llvm.insertvalue %1262, %1277[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1279 = llvm.insertvalue %1263, %1278[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1280 = llvm.insertvalue %1264, %1279[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1281 = llvm.insertvalue %1265, %1280[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1282 = llvm.insertvalue %1266, %1281[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1283 = llvm.insertvalue %1267, %1282[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1284 = llvm.insertvalue %1268, %1283[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    rocdl.barrier loc(#loc23)
    %1285 = llvm.extractvalue %402[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1286 = llvm.extractvalue %402[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1287 = llvm.extractvalue %402[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1288 = llvm.extractvalue %402[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1289 = llvm.extractvalue %402[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1290 = llvm.extractvalue %402[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1291 = llvm.extractvalue %402[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1292 = llvm.extractvalue %402[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc23)
    %1293 = llvm.insertelement %1285, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1293, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1294 = llvm.insertelement %1286, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1294, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1295 = llvm.insertelement %1287, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1295, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1296 = llvm.insertelement %1288, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1296, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1297 = llvm.insertelement %1289, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1297, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1298 = llvm.insertelement %1290, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1298, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1299 = llvm.insertelement %1291, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1299, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    %1300 = llvm.insertelement %1292, %17[%26 : i32] : vector<1xbf16> loc(#loc23)
    llvm.store %1300, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc23)
    rocdl.barrier loc(#loc23)
    %1301 = llvm.load %976 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1302 = llvm.extractelement %1301[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1303 = llvm.extractelement %1301[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1304 = llvm.extractelement %1301[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1305 = llvm.extractelement %1301[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1306 = llvm.extractelement %1301[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1307 = llvm.extractelement %1301[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1308 = llvm.extractelement %1301[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1309 = llvm.extractelement %1301[%9 : i32] : vector<8xbf16> loc(#loc23)
    %1310 = llvm.load %987 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc23)
    %1311 = llvm.extractelement %1310[%26 : i32] : vector<8xbf16> loc(#loc23)
    %1312 = llvm.extractelement %1310[%33 : i32] : vector<8xbf16> loc(#loc23)
    %1313 = llvm.extractelement %1310[%32 : i32] : vector<8xbf16> loc(#loc23)
    %1314 = llvm.extractelement %1310[%16 : i32] : vector<8xbf16> loc(#loc23)
    %1315 = llvm.extractelement %1310[%24 : i32] : vector<8xbf16> loc(#loc23)
    %1316 = llvm.extractelement %1310[%11 : i32] : vector<8xbf16> loc(#loc23)
    %1317 = llvm.extractelement %1310[%10 : i32] : vector<8xbf16> loc(#loc23)
    %1318 = llvm.extractelement %1310[%9 : i32] : vector<8xbf16> loc(#loc23)
    rocdl.barrier loc(#loc13)
    %1319 = llvm.extractvalue %404[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1320 = llvm.extractvalue %404[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1321 = llvm.extractvalue %404[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1322 = llvm.extractvalue %404[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1323 = llvm.extractvalue %404[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1324 = llvm.extractvalue %404[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1325 = llvm.extractvalue %404[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1326 = llvm.extractvalue %404[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc13)
    %1327 = llvm.insertelement %1319, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1327, %872 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1328 = llvm.insertelement %1320, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1328, %887 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1329 = llvm.insertelement %1321, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1329, %894 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1330 = llvm.insertelement %1322, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1330, %901 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1331 = llvm.insertelement %1323, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1331, %908 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1332 = llvm.insertelement %1324, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1332, %915 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1333 = llvm.insertelement %1325, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1333, %922 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    %1334 = llvm.insertelement %1326, %17[%26 : i32] : vector<1xbf16> loc(#loc13)
    llvm.store %1334, %929 {alignment = 2 : i64} : vector<1xbf16>, !llvm.ptr<3> loc(#loc13)
    rocdl.barrier loc(#loc13)
    %1335 = llvm.load %1037 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1336 = llvm.extractelement %1335[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1337 = llvm.extractelement %1335[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1338 = llvm.extractelement %1335[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1339 = llvm.extractelement %1335[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1340 = llvm.extractelement %1335[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1341 = llvm.extractelement %1335[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1342 = llvm.extractelement %1335[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1343 = llvm.extractelement %1335[%9 : i32] : vector<8xbf16> loc(#loc13)
    %1344 = llvm.load %1048 : !llvm.ptr<3> -> vector<8xbf16> loc(#loc13)
    %1345 = llvm.extractelement %1344[%26 : i32] : vector<8xbf16> loc(#loc13)
    %1346 = llvm.extractelement %1344[%33 : i32] : vector<8xbf16> loc(#loc13)
    %1347 = llvm.extractelement %1344[%32 : i32] : vector<8xbf16> loc(#loc13)
    %1348 = llvm.extractelement %1344[%16 : i32] : vector<8xbf16> loc(#loc13)
    %1349 = llvm.extractelement %1344[%24 : i32] : vector<8xbf16> loc(#loc13)
    %1350 = llvm.extractelement %1344[%11 : i32] : vector<8xbf16> loc(#loc13)
    %1351 = llvm.extractelement %1344[%10 : i32] : vector<8xbf16> loc(#loc13)
    %1352 = llvm.extractelement %1344[%9 : i32] : vector<8xbf16> loc(#loc13)
    llvm.cond_br %857, ^bb8, ^bb9 loc(#loc24)
  ^bb8:  // pred: ^bb7
    %1353 = llvm.insertelement %1336, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1354 = llvm.insertelement %1337, %1353[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1355 = llvm.insertelement %1338, %1354[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1356 = llvm.insertelement %1339, %1355[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1357 = llvm.insertelement %1340, %1356[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1358 = llvm.insertelement %1341, %1357[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1359 = llvm.insertelement %1342, %1358[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1360 = llvm.insertelement %1343, %1359[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1361 = llvm.extractelement %1360[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1362 = llvm.insertelement %1361, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1363 = llvm.extractelement %1360[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1364 = llvm.insertelement %1363, %1362[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1365 = llvm.extractelement %1360[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1366 = llvm.insertelement %1365, %1364[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1367 = llvm.extractelement %1360[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1368 = llvm.insertelement %1367, %1366[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1369 = llvm.extractelement %1360[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1370 = llvm.insertelement %1369, %1368[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1371 = llvm.extractelement %1360[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1372 = llvm.insertelement %1371, %1370[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1373 = llvm.extractelement %1360[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1374 = llvm.insertelement %1373, %1372[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1375 = llvm.extractelement %1360[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1376 = llvm.insertelement %1375, %1374[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1377 = llvm.insertelement %1345, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1378 = llvm.insertelement %1346, %1377[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1379 = llvm.insertelement %1347, %1378[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1380 = llvm.insertelement %1348, %1379[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1381 = llvm.insertelement %1349, %1380[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1382 = llvm.insertelement %1350, %1381[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1383 = llvm.insertelement %1351, %1382[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1384 = llvm.insertelement %1352, %1383[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1385 = llvm.extractelement %1384[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1386 = llvm.insertelement %1385, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1387 = llvm.extractelement %1384[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1388 = llvm.insertelement %1387, %1386[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1389 = llvm.extractelement %1384[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1390 = llvm.insertelement %1389, %1388[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1391 = llvm.extractelement %1384[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1392 = llvm.insertelement %1391, %1390[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1393 = llvm.extractelement %1384[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1394 = llvm.insertelement %1393, %1392[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1395 = llvm.extractelement %1384[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1396 = llvm.insertelement %1395, %1394[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1397 = llvm.extractelement %1384[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1398 = llvm.insertelement %1397, %1396[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1399 = llvm.extractelement %1384[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1400 = llvm.insertelement %1399, %1398[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1401 = llvm.insertelement %1302, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1402 = llvm.insertelement %1303, %1401[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1403 = llvm.insertelement %1304, %1402[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1404 = llvm.insertelement %1305, %1403[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1405 = llvm.insertelement %1306, %1404[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1406 = llvm.insertelement %1307, %1405[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1407 = llvm.insertelement %1308, %1406[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1408 = llvm.insertelement %1309, %1407[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1409 = llvm.extractelement %1408[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1410 = llvm.insertelement %1409, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1411 = llvm.extractelement %1408[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1412 = llvm.insertelement %1411, %1410[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1413 = llvm.extractelement %1408[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1414 = llvm.insertelement %1413, %1412[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1415 = llvm.extractelement %1408[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1416 = llvm.insertelement %1415, %1414[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1417 = llvm.extractelement %1408[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1418 = llvm.insertelement %1417, %1416[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1419 = llvm.extractelement %1408[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1420 = llvm.insertelement %1419, %1418[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1421 = llvm.extractelement %1408[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1422 = llvm.insertelement %1421, %1420[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1423 = llvm.extractelement %1408[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1424 = llvm.insertelement %1423, %1422[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1425 = llvm.insertelement %1311, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1426 = llvm.insertelement %1312, %1425[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1427 = llvm.insertelement %1313, %1426[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1428 = llvm.insertelement %1314, %1427[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1429 = llvm.insertelement %1315, %1428[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1430 = llvm.insertelement %1316, %1429[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1431 = llvm.insertelement %1317, %1430[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1432 = llvm.insertelement %1318, %1431[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1433 = llvm.extractelement %1432[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1434 = llvm.insertelement %1433, %7[%26 : i32] : vector<8xbf16> loc(#loc24)
    %1435 = llvm.extractelement %1432[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1436 = llvm.insertelement %1435, %1434[%33 : i32] : vector<8xbf16> loc(#loc24)
    %1437 = llvm.extractelement %1432[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1438 = llvm.insertelement %1437, %1436[%32 : i32] : vector<8xbf16> loc(#loc24)
    %1439 = llvm.extractelement %1432[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1440 = llvm.insertelement %1439, %1438[%16 : i32] : vector<8xbf16> loc(#loc24)
    %1441 = llvm.extractelement %1432[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1442 = llvm.insertelement %1441, %1440[%24 : i32] : vector<8xbf16> loc(#loc24)
    %1443 = llvm.extractelement %1432[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1444 = llvm.insertelement %1443, %1442[%11 : i32] : vector<8xbf16> loc(#loc24)
    %1445 = llvm.extractelement %1432[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1446 = llvm.insertelement %1445, %1444[%10 : i32] : vector<8xbf16> loc(#loc24)
    %1447 = llvm.extractelement %1432[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1448 = llvm.insertelement %1447, %1446[%9 : i32] : vector<8xbf16> loc(#loc24)
    %1449 = llvm.insertelement %1253, %6[%26 : i32] : vector<16xf32> loc(#loc24)
    %1450 = llvm.insertelement %1254, %1449[%33 : i32] : vector<16xf32> loc(#loc24)
    %1451 = llvm.insertelement %1255, %1450[%32 : i32] : vector<16xf32> loc(#loc24)
    %1452 = llvm.insertelement %1256, %1451[%16 : i32] : vector<16xf32> loc(#loc24)
    %1453 = llvm.insertelement %1257, %1452[%24 : i32] : vector<16xf32> loc(#loc24)
    %1454 = llvm.insertelement %1258, %1453[%11 : i32] : vector<16xf32> loc(#loc24)
    %1455 = llvm.insertelement %1259, %1454[%10 : i32] : vector<16xf32> loc(#loc24)
    %1456 = llvm.insertelement %1260, %1455[%9 : i32] : vector<16xf32> loc(#loc24)
    %1457 = llvm.insertelement %1261, %1456[%23 : i32] : vector<16xf32> loc(#loc24)
    %1458 = llvm.insertelement %1262, %1457[%15 : i32] : vector<16xf32> loc(#loc24)
    %1459 = llvm.insertelement %1263, %1458[%14 : i32] : vector<16xf32> loc(#loc24)
    %1460 = llvm.insertelement %1264, %1459[%13 : i32] : vector<16xf32> loc(#loc24)
    %1461 = llvm.insertelement %1265, %1460[%5 : i32] : vector<16xf32> loc(#loc24)
    %1462 = llvm.insertelement %1266, %1461[%4 : i32] : vector<16xf32> loc(#loc24)
    %1463 = llvm.insertelement %1267, %1462[%3 : i32] : vector<16xf32> loc(#loc24)
    %1464 = llvm.insertelement %1268, %1463[%2 : i32] : vector<16xf32> loc(#loc24)
    %1465 = rocdl.mfma.f32.32x32x16.bf16 %1424, %1376, %1464, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1466 = rocdl.mfma.f32.32x32x16.bf16 %1448, %1400, %1465, %26, %26, %26 : (vector<8xbf16>, vector<8xbf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc24)
    %1467 = llvm.extractelement %1466[%26 : i32] : vector<16xf32> loc(#loc24)
    %1468 = llvm.extractelement %1466[%33 : i32] : vector<16xf32> loc(#loc24)
    %1469 = llvm.extractelement %1466[%32 : i32] : vector<16xf32> loc(#loc24)
    %1470 = llvm.extractelement %1466[%16 : i32] : vector<16xf32> loc(#loc24)
    %1471 = llvm.extractelement %1466[%24 : i32] : vector<16xf32> loc(#loc24)
    %1472 = llvm.extractelement %1466[%11 : i32] : vector<16xf32> loc(#loc24)
    %1473 = llvm.extractelement %1466[%10 : i32] : vector<16xf32> loc(#loc24)
    %1474 = llvm.extractelement %1466[%9 : i32] : vector<16xf32> loc(#loc24)
    %1475 = llvm.extractelement %1466[%23 : i32] : vector<16xf32> loc(#loc24)
    %1476 = llvm.extractelement %1466[%15 : i32] : vector<16xf32> loc(#loc24)
    %1477 = llvm.extractelement %1466[%14 : i32] : vector<16xf32> loc(#loc24)
    %1478 = llvm.extractelement %1466[%13 : i32] : vector<16xf32> loc(#loc24)
    %1479 = llvm.extractelement %1466[%5 : i32] : vector<16xf32> loc(#loc24)
    %1480 = llvm.extractelement %1466[%4 : i32] : vector<16xf32> loc(#loc24)
    %1481 = llvm.extractelement %1466[%3 : i32] : vector<16xf32> loc(#loc24)
    %1482 = llvm.extractelement %1466[%2 : i32] : vector<16xf32> loc(#loc24)
    %1483 = llvm.insertvalue %1467, %34[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1484 = llvm.insertvalue %1468, %1483[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1485 = llvm.insertvalue %1469, %1484[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1486 = llvm.insertvalue %1470, %1485[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1487 = llvm.insertvalue %1471, %1486[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1488 = llvm.insertvalue %1472, %1487[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1489 = llvm.insertvalue %1473, %1488[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1490 = llvm.insertvalue %1474, %1489[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1491 = llvm.insertvalue %1475, %1490[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1492 = llvm.insertvalue %1476, %1491[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1493 = llvm.insertvalue %1477, %1492[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1494 = llvm.insertvalue %1478, %1493[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1495 = llvm.insertvalue %1479, %1494[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1496 = llvm.insertvalue %1480, %1495[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1497 = llvm.insertvalue %1481, %1496[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    %1498 = llvm.insertvalue %1482, %1497[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc24)
    llvm.br ^bb10(%1498 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb9:  // pred: ^bb7
    llvm.br ^bb10(%1284 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>) loc(#loc24)
  ^bb10(%1499: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":78:30)):  // 2 preds: ^bb8, ^bb9
    llvm.br ^bb11 loc(#loc24)
  ^bb11:  // pred: ^bb10
    %1500 = llvm.extractvalue %1499[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1501 = llvm.extractvalue %1499[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1502 = llvm.extractvalue %1499[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1503 = llvm.extractvalue %1499[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1504 = llvm.extractvalue %1499[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1505 = llvm.extractvalue %1499[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1506 = llvm.extractvalue %1499[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1507 = llvm.extractvalue %1499[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1508 = llvm.extractvalue %1499[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1509 = llvm.extractvalue %1499[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1510 = llvm.extractvalue %1499[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1511 = llvm.extractvalue %1499[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1512 = llvm.extractvalue %1499[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1513 = llvm.extractvalue %1499[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1514 = llvm.extractvalue %1499[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1515 = llvm.extractvalue %1499[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc9)
    %1516 = llvm.select %857, %1500, %1253 : i1, f32 loc(#loc9)
    %1517 = llvm.select %857, %1501, %1254 : i1, f32 loc(#loc9)
    %1518 = llvm.select %857, %1502, %1255 : i1, f32 loc(#loc9)
    %1519 = llvm.select %857, %1503, %1256 : i1, f32 loc(#loc9)
    %1520 = llvm.select %857, %1504, %1257 : i1, f32 loc(#loc9)
    %1521 = llvm.select %857, %1505, %1258 : i1, f32 loc(#loc9)
    %1522 = llvm.select %857, %1506, %1259 : i1, f32 loc(#loc9)
    %1523 = llvm.select %857, %1507, %1260 : i1, f32 loc(#loc9)
    %1524 = llvm.select %857, %1508, %1261 : i1, f32 loc(#loc9)
    %1525 = llvm.select %857, %1509, %1262 : i1, f32 loc(#loc9)
    %1526 = llvm.select %857, %1510, %1263 : i1, f32 loc(#loc9)
    %1527 = llvm.select %857, %1511, %1264 : i1, f32 loc(#loc9)
    %1528 = llvm.select %857, %1512, %1265 : i1, f32 loc(#loc9)
    %1529 = llvm.select %857, %1513, %1266 : i1, f32 loc(#loc9)
    %1530 = llvm.select %857, %1514, %1267 : i1, f32 loc(#loc9)
    %1531 = llvm.select %857, %1515, %1268 : i1, f32 loc(#loc9)
    %1532 = llvm.mul %53, %arg8 : i32 loc(#loc25)
    %1533 = llvm.mul %380, %arg8 : i32 loc(#loc25)
    %1534 = llvm.getelementptr %arg0[%1532] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc25)
    %1535 = llvm.getelementptr %1534[%193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc26)
    %1536 = llvm.add %389, %1533 : i32 loc(#loc26)
    %1537 = llvm.add %390, %1533 : i32 loc(#loc26)
    %1538 = llvm.add %391, %1533 : i32 loc(#loc26)
    %1539 = llvm.add %392, %1533 : i32 loc(#loc26)
    %1540 = llvm.icmp "slt" %393, %arg3 : i32 loc(#loc27)
    %1541 = llvm.icmp "slt" %394, %arg4 : i32 loc(#loc28)
    %1542 = llvm.icmp "slt" %395, %arg4 : i32 loc(#loc28)
    %1543 = llvm.icmp "slt" %396, %arg4 : i32 loc(#loc28)
    %1544 = llvm.icmp "slt" %397, %arg4 : i32 loc(#loc28)
    %1545 = llvm.and %1540, %1541 : i1 loc(#loc29)
    %1546 = llvm.and %1540, %1542 : i1 loc(#loc29)
    %1547 = llvm.and %1540, %1543 : i1 loc(#loc29)
    %1548 = llvm.and %1540, %1544 : i1 loc(#loc29)
    %1549 = llvm.getelementptr %1535[%1536] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1550 = llvm.getelementptr %1535[%1537] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1551 = llvm.getelementptr %1535[%1538] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1552 = llvm.getelementptr %1535[%1539] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f32 loc(#loc30)
    %1553 = llvm.and %1, %1545 : i1 loc(#loc30)
    %1554 = llvm.insertelement %1516, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1555 = llvm.insertelement %1517, %1554[%33 : i32] : vector<4xf32> loc(#loc30)
    %1556 = llvm.insertelement %1518, %1555[%32 : i32] : vector<4xf32> loc(#loc30)
    %1557 = llvm.insertelement %1519, %1556[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1549, %1557, %1553) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1558 = llvm.and %1, %1546 : i1 loc(#loc30)
    %1559 = llvm.insertelement %1520, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1560 = llvm.insertelement %1521, %1559[%33 : i32] : vector<4xf32> loc(#loc30)
    %1561 = llvm.insertelement %1522, %1560[%32 : i32] : vector<4xf32> loc(#loc30)
    %1562 = llvm.insertelement %1523, %1561[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1550, %1562, %1558) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1563 = llvm.and %1, %1547 : i1 loc(#loc30)
    %1564 = llvm.insertelement %1524, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1565 = llvm.insertelement %1525, %1564[%33 : i32] : vector<4xf32> loc(#loc30)
    %1566 = llvm.insertelement %1526, %1565[%32 : i32] : vector<4xf32> loc(#loc30)
    %1567 = llvm.insertelement %1527, %1566[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1551, %1567, %1563) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    %1568 = llvm.and %1, %1548 : i1 loc(#loc30)
    %1569 = llvm.insertelement %1528, %0[%26 : i32] : vector<4xf32> loc(#loc30)
    %1570 = llvm.insertelement %1529, %1569[%33 : i32] : vector<4xf32> loc(#loc30)
    %1571 = llvm.insertelement %1530, %1570[%32 : i32] : vector<4xf32> loc(#loc30)
    %1572 = llvm.insertelement %1531, %1571[%16 : i32] : vector<4xf32> loc(#loc30)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_"(%1552, %1572, %1568) : (!llvm.ptr<1>, vector<4xf32>, i1) -> () loc(#loc30)
    llvm.return loc(#loc31)
  } loc(#loc34)
} loc(#loc)
#di_file = #llvm.di_file<"gemm_bench.py" in "/home/adespirl/wave/lit_tests/kernel/wave">
#di_subroutine_type = #llvm.di_subroutine_type<callingConvention = DW_CC_normal>
#loc2 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":49:26)
#loc3 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:21)
#loc4 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:44)
#loc5 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":52:31)
#loc6 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":63:20)
#loc7 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":54:26)
#loc8 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":64:20)
#loc10 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:49)
#loc11 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:33)
#loc12 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":66:54)
#loc14 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":50:26)
#loc15 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:21)
#loc16 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":53:31)
#loc17 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":71:20)
#loc18 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":72:20)
#loc19 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:52)
#loc20 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":74:57)
#loc22 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":59:23)
#loc23 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":76:26)
#loc25 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:17)
#loc26 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":80:47)
#loc27 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:50)
#loc28 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:74)
#loc29 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:56)
#loc30 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:21)
#loc31 = loc("/home/adespirl/wave/lit_tests/kernel/wave/gemm_bench.py":81:4)
#di_compile_unit = #llvm.di_compile_unit<id = distinct[0]<>, sourceLanguage = DW_LANG_C, file = #di_file, producer = "triton", isOptimized = true, emissionKind = LineTablesOnly>
#di_subprogram = #llvm.di_subprogram<scope = #di_file, name = "__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_", linkageName = "__triton_hip_predicated_load_vector<1xbf16>_!llvm.ptr<1>_i1_vector<1xbf16>_", file = #di_file, line = 41, scopeLine = 41, subprogramFlags = Optimized, type = #di_subroutine_type>
#di_subprogram1 = #llvm.di_subprogram<scope = #di_file, name = "__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_", linkageName = "__triton_hip_predicated_store_!llvm.void_!llvm.ptr<1>_vector<4xf32>_i1_", file = #di_file, line = 41, scopeLine = 41, subprogramFlags = Optimized, type = #di_subroutine_type>
#di_subprogram2 = #llvm.di_subprogram<id = distinct[0]<>, compileUnit = #di_compile_unit, scope = #di_file, name = "matmul_abt_kernel", linkageName = "matmul_abt_kernel", file = #di_file, line = 41, scopeLine = 41, subprogramFlags = "Definition|Optimized", type = #di_subroutine_type>
#loc32 = loc(fused<#di_subprogram>[#loc])
#loc33 = loc(fused<#di_subprogram1>[#loc])
#loc34 = loc(fused<#di_subprogram2>[#loc])


